"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _antlr = _interopRequireDefault(require("antlr4"));
var _JavaScriptParserListener = _interopRequireDefault(require("./JavaScriptParserListener.js"));
var _JavaScriptParserVisitor = _interopRequireDefault(require("./JavaScriptParserVisitor.js"));
var _JavaScriptParserBase = _interopRequireDefault(require("./JavaScriptParserBase.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
// Generated from java-escape by ANTLR 4.11.1
// jshint ignore: start

const serializedATN = [4, 1, 126, 1031, 2, 0, 7, 0, 2, 1, 7, 1, 2, 2, 7, 2, 2, 3, 7, 3, 2, 4, 7, 4, 2, 5, 7, 5, 2, 6, 7, 6, 2, 7, 7, 7, 2, 8, 7, 8, 2, 9, 7, 9, 2, 10, 7, 10, 2, 11, 7, 11, 2, 12, 7, 12, 2, 13, 7, 13, 2, 14, 7, 14, 2, 15, 7, 15, 2, 16, 7, 16, 2, 17, 7, 17, 2, 18, 7, 18, 2, 19, 7, 19, 2, 20, 7, 20, 2, 21, 7, 21, 2, 22, 7, 22, 2, 23, 7, 23, 2, 24, 7, 24, 2, 25, 7, 25, 2, 26, 7, 26, 2, 27, 7, 27, 2, 28, 7, 28, 2, 29, 7, 29, 2, 30, 7, 30, 2, 31, 7, 31, 2, 32, 7, 32, 2, 33, 7, 33, 2, 34, 7, 34, 2, 35, 7, 35, 2, 36, 7, 36, 2, 37, 7, 37, 2, 38, 7, 38, 2, 39, 7, 39, 2, 40, 7, 40, 2, 41, 7, 41, 2, 42, 7, 42, 2, 43, 7, 43, 2, 44, 7, 44, 2, 45, 7, 45, 2, 46, 7, 46, 2, 47, 7, 47, 2, 48, 7, 48, 2, 49, 7, 49, 2, 50, 7, 50, 2, 51, 7, 51, 2, 52, 7, 52, 2, 53, 7, 53, 2, 54, 7, 54, 2, 55, 7, 55, 2, 56, 7, 56, 2, 57, 7, 57, 2, 58, 7, 58, 2, 59, 7, 59, 2, 60, 7, 60, 2, 61, 7, 61, 2, 62, 7, 62, 2, 63, 7, 63, 2, 64, 7, 64, 2, 65, 7, 65, 2, 66, 7, 66, 2, 67, 7, 67, 2, 68, 7, 68, 2, 69, 7, 69, 2, 70, 7, 70, 2, 71, 7, 71, 2, 72, 7, 72, 2, 73, 7, 73, 2, 74, 7, 74, 2, 75, 7, 75, 2, 76, 7, 76, 1, 0, 3, 0, 156, 8, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 3, 2, 182, 8, 2, 1, 3, 1, 3, 3, 3, 186, 8, 3, 1, 3, 1, 3, 1, 4, 4, 4, 191, 8, 4, 11, 4, 12, 4, 192, 1, 5, 1, 5, 1, 5, 1, 6, 3, 6, 199, 8, 6, 1, 6, 1, 6, 3, 6, 203, 8, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 3, 6, 210, 8, 6, 1, 7, 1, 7, 1, 7, 1, 7, 5, 7, 216, 8, 7, 10, 7, 12, 7, 219, 9, 7, 1, 7, 1, 7, 3, 7, 223, 8, 7, 3, 7, 225, 8, 7, 1, 7, 1, 7, 1, 8, 1, 8, 1, 8, 1, 9, 1, 9, 3, 9, 234, 8, 9, 1, 9, 1, 9, 3, 9, 238, 8, 9, 1, 10, 1, 10, 1, 10, 1, 11, 1, 11, 1, 11, 3, 11, 246, 8, 11, 1, 12, 1, 12, 1, 12, 3, 12, 251, 8, 12, 1, 12, 1, 12, 1, 12, 1, 12, 1, 12, 1, 12, 1, 12, 3, 12, 260, 8, 12, 1, 13, 1, 13, 1, 13, 1, 13, 1, 13, 1, 13, 3, 13, 268, 8, 13, 1, 13, 1, 13, 3, 13, 272, 8, 13, 1, 14, 1, 14, 1, 14, 3, 14, 277, 8, 14, 1, 15, 1, 15, 1, 15, 1, 16, 1, 16, 1, 16, 1, 16, 5, 16, 286, 8, 16, 10, 16, 12, 16, 289, 9, 16, 1, 17, 1, 17, 1, 17, 3, 17, 294, 8, 17, 1, 18, 1, 18, 1, 19, 1, 19, 1, 19, 1, 19, 1, 20, 1, 20, 1, 20, 1, 20, 1, 20, 1, 20, 1, 20, 3, 20, 309, 8, 20, 1, 21, 1, 21, 1, 21, 1, 21, 1, 21, 1, 21, 1, 21, 1, 21, 1, 21, 1, 21, 1, 21, 1, 21, 1, 21, 1, 21, 1, 21, 1, 21, 1, 21, 1, 21, 3, 21, 329, 8, 21, 1, 21, 1, 21, 3, 21, 333, 8, 21, 1, 21, 1, 21, 3, 21, 337, 8, 21, 1, 21, 1, 21, 1, 21, 1, 21, 1, 21, 1, 21, 3, 21, 345, 8, 21, 1, 21, 1, 21, 1, 21, 1, 21, 1, 21, 1, 21, 1, 21, 3, 21, 354, 8, 21, 1, 21, 1, 21, 1, 21, 3, 21, 359, 8, 21, 1, 21, 1, 21, 1, 21, 1, 21, 1, 21, 1, 21, 3, 21, 367, 8, 21, 1, 22, 1, 22, 1, 22, 3, 22, 372, 8, 22, 1, 23, 1, 23, 1, 23, 3, 23, 377, 8, 23, 1, 23, 1, 23, 1, 24, 1, 24, 1, 24, 3, 24, 384, 8, 24, 1, 24, 1, 24, 1, 25, 1, 25, 1, 25, 3, 25, 391, 8, 25, 1, 25, 1, 25, 1, 26, 1, 26, 1, 26, 3, 26, 398, 8, 26, 1, 26, 1, 26, 1, 27, 1, 27, 1, 27, 1, 27, 1, 27, 1, 27, 1, 28, 1, 28, 1, 28, 1, 28, 1, 28, 1, 28, 1, 29, 1, 29, 3, 29, 416, 8, 29, 1, 29, 1, 29, 3, 29, 420, 8, 29, 3, 29, 422, 8, 29, 1, 29, 1, 29, 1, 30, 4, 30, 427, 8, 30, 11, 30, 12, 30, 428, 1, 31, 1, 31, 1, 31, 1, 31, 3, 31, 435, 8, 31, 1, 32, 1, 32, 1, 32, 3, 32, 440, 8, 32, 1, 33, 1, 33, 1, 33, 1, 33, 1, 34, 1, 34, 1, 34, 1, 34, 1, 34, 1, 35, 1, 35, 1, 35, 1, 35, 3, 35, 455, 8, 35, 1, 35, 3, 35, 458, 8, 35, 1, 36, 1, 36, 1, 36, 3, 36, 463, 8, 36, 1, 36, 3, 36, 466, 8, 36, 1, 36, 1, 36, 1, 37, 1, 37, 1, 37, 1, 38, 1, 38, 1, 38, 1, 39, 3, 39, 477, 8, 39, 1, 39, 1, 39, 3, 39, 481, 8, 39, 1, 39, 1, 39, 1, 39, 3, 39, 486, 8, 39, 1, 39, 1, 39, 1, 39, 1, 40, 1, 40, 1, 40, 1, 40, 1, 41, 1, 41, 3, 41, 497, 8, 41, 1, 41, 1, 41, 5, 41, 501, 8, 41, 10, 41, 12, 41, 504, 9, 41, 1, 41, 1, 41, 1, 42, 1, 42, 1, 42, 1, 42, 5, 42, 512, 8, 42, 10, 42, 12, 42, 515, 9, 42, 1, 42, 1, 42, 1, 42, 1, 42, 1, 42, 1, 42, 3, 42, 523, 8, 42, 1, 42, 1, 42, 3, 42, 527, 8, 42, 1, 42, 1, 42, 1, 42, 1, 42, 3, 42, 533, 8, 42, 1, 43, 3, 43, 536, 8, 43, 1, 43, 3, 43, 539, 8, 43, 1, 43, 1, 43, 1, 43, 3, 43, 544, 8, 43, 1, 43, 1, 43, 1, 43, 1, 43, 3, 43, 550, 8, 43, 1, 43, 3, 43, 553, 8, 43, 1, 43, 1, 43, 1, 43, 1, 43, 1, 43, 1, 43, 3, 43, 561, 8, 43, 1, 43, 3, 43, 564, 8, 43, 1, 43, 1, 43, 1, 43, 3, 43, 569, 8, 43, 1, 43, 1, 43, 1, 43, 3, 43, 574, 8, 43, 1, 44, 1, 44, 1, 44, 5, 44, 579, 8, 44, 10, 44, 12, 44, 582, 9, 44, 1, 44, 1, 44, 3, 44, 586, 8, 44, 1, 44, 3, 44, 589, 8, 44, 1, 45, 1, 45, 1, 45, 3, 45, 594, 8, 45, 1, 46, 1, 46, 1, 46, 1, 47, 1, 47, 3, 47, 601, 8, 47, 1, 47, 1, 47, 1, 48, 4, 48, 606, 8, 48, 11, 48, 12, 48, 607, 1, 49, 1, 49, 1, 49, 1, 49, 1, 50, 5, 50, 615, 8, 50, 10, 50, 12, 50, 618, 9, 50, 1, 50, 3, 50, 621, 8, 50, 1, 50, 4, 50, 624, 8, 50, 11, 50, 12, 50, 625, 1, 50, 5, 50, 629, 8, 50, 10, 50, 12, 50, 632, 9, 50, 1, 50, 5, 50, 635, 8, 50, 10, 50, 12, 50, 638, 9, 50, 1, 51, 3, 51, 641, 8, 51, 1, 51, 1, 51, 1, 52, 1, 52, 1, 52, 1, 52, 1, 52, 1, 52, 1, 52, 1, 52, 1, 52, 1, 52, 1, 52, 3, 52, 656, 8, 52, 1, 52, 3, 52, 659, 8, 52, 1, 52, 1, 52, 1, 52, 3, 52, 664, 8, 52, 1, 52, 1, 52, 1, 52, 1, 52, 1, 52, 1, 52, 1, 52, 1, 52, 1, 52, 1, 52, 1, 52, 1, 52, 1, 52, 1, 52, 1, 52, 3, 52, 681, 8, 52, 1, 52, 3, 52, 684, 8, 52, 1, 53, 1, 53, 1, 53, 1, 53, 1, 53, 1, 53, 1, 53, 3, 53, 693, 8, 53, 1, 54, 1, 54, 1, 54, 1, 54, 5, 54, 699, 8, 54, 10, 54, 12, 54, 702, 9, 54, 1, 54, 3, 54, 705, 8, 54, 3, 54, 707, 8, 54, 1, 54, 1, 54, 1, 55, 3, 55, 712, 8, 55, 1, 55, 1, 55, 3, 55, 716, 8, 55, 1, 56, 1, 56, 1, 56, 5, 56, 721, 8, 56, 10, 56, 12, 56, 724, 9, 56, 1, 57, 1, 57, 1, 57, 1, 57, 3, 57, 730, 8, 57, 1, 57, 1, 57, 1, 57, 1, 57, 1, 57, 1, 57, 1, 57, 1, 57, 1, 57, 1, 57, 1, 57, 1, 57, 1, 57, 1, 57, 1, 57, 1, 57, 1, 57, 1, 57, 1, 57, 1, 57, 1, 57, 1, 57, 1, 57, 1, 57, 1, 57, 1, 57, 1, 57, 1, 57, 1, 57, 1, 57, 1, 57, 1, 57, 1, 57, 1, 57, 1, 57, 1, 57, 1, 57, 1, 57, 1, 57, 1, 57, 1, 57, 1, 57, 1, 57, 1, 57, 1, 57, 1, 57, 3, 57, 778, 8, 57, 1, 57, 1, 57, 1, 57, 1, 57, 1, 57, 1, 57, 1, 57, 1, 57, 1, 57, 1, 57, 1, 57, 1, 57, 1, 57, 1, 57, 1, 57, 1, 57, 1, 57, 1, 57, 1, 57, 1, 57, 1, 57, 1, 57, 1, 57, 1, 57, 1, 57, 1, 57, 1, 57, 1, 57, 1, 57, 1, 57, 1, 57, 1, 57, 1, 57, 1, 57, 1, 57, 1, 57, 1, 57, 1, 57, 1, 57, 1, 57, 1, 57, 1, 57, 1, 57, 1, 57, 1, 57, 1, 57, 1, 57, 1, 57, 1, 57, 1, 57, 1, 57, 1, 57, 1, 57, 1, 57, 1, 57, 1, 57, 1, 57, 1, 57, 1, 57, 1, 57, 3, 57, 840, 8, 57, 1, 57, 1, 57, 1, 57, 1, 57, 1, 57, 1, 57, 3, 57, 848, 8, 57, 1, 57, 1, 57, 3, 57, 852, 8, 57, 1, 57, 1, 57, 1, 57, 1, 57, 1, 57, 1, 57, 1, 57, 1, 57, 1, 57, 1, 57, 1, 57, 5, 57, 865, 8, 57, 10, 57, 12, 57, 868, 9, 57, 1, 58, 1, 58, 1, 58, 3, 58, 873, 8, 58, 1, 59, 1, 59, 1, 59, 1, 59, 5, 59, 879, 8, 59, 10, 59, 12, 59, 882, 9, 59, 1, 59, 3, 59, 885, 8, 59, 3, 59, 887, 8, 59, 1, 59, 1, 59, 1, 60, 1, 60, 3, 60, 893, 8, 60, 1, 60, 1, 60, 3, 60, 897, 8, 60, 1, 60, 1, 60, 3, 60, 901, 8, 60, 1, 60, 1, 60, 1, 60, 3, 60, 906, 8, 60, 1, 60, 1, 60, 1, 60, 1, 60, 3, 60, 912, 8, 60, 1, 61, 1, 61, 1, 61, 3, 61, 917, 8, 61, 1, 61, 3, 61, 920, 8, 61, 1, 62, 1, 62, 3, 62, 924, 8, 62, 1, 63, 1, 63, 1, 64, 1, 64, 1, 64, 1, 64, 1, 64, 1, 64, 3, 64, 934, 8, 64, 1, 65, 1, 65, 5, 65, 938, 8, 65, 10, 65, 12, 65, 941, 9, 65, 1, 65, 1, 65, 1, 66, 1, 66, 1, 66, 1, 66, 1, 66, 3, 66, 950, 8, 66, 1, 67, 1, 67, 1, 68, 1, 68, 1, 69, 1, 69, 1, 69, 1, 69, 1, 70, 1, 70, 1, 70, 1, 70, 1, 71, 1, 71, 3, 71, 966, 8, 71, 1, 72, 1, 72, 1, 73, 1, 73, 1, 73, 3, 73, 973, 8, 73, 1, 74, 1, 74, 1, 74, 1, 74, 1, 74, 1, 74, 1, 74, 1, 74, 1, 74, 1, 74, 1, 74, 1, 74, 1, 74, 1, 74, 1, 74, 1, 74, 1, 74, 1, 74, 1, 74, 1, 74, 1, 74, 1, 74, 1, 74, 1, 74, 1, 74, 1, 74, 1, 74, 1, 74, 1, 74, 1, 74, 1, 74, 1, 74, 1, 74, 1, 74, 1, 74, 1, 74, 1, 74, 1, 74, 1, 74, 1, 74, 1, 74, 1, 74, 1, 74, 1, 74, 1, 74, 1, 74, 3, 74, 1021, 8, 74, 1, 75, 1, 75, 1, 76, 1, 76, 1, 76, 1, 76, 3, 76, 1029, 8, 76, 1, 76, 0, 1, 114, 77, 0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 62, 64, 66, 68, 70, 72, 74, 76, 78, 80, 82, 84, 86, 88, 90, 92, 94, 96, 98, 100, 102, 104, 106, 108, 110, 112, 114, 116, 118, 120, 122, 124, 126, 128, 130, 132, 134, 136, 138, 140, 142, 144, 146, 148, 150, 152, 0, 10, 1, 0, 24, 26, 1, 0, 20, 21, 1, 0, 30, 32, 1, 0, 33, 36, 1, 0, 37, 40, 1, 0, 46, 57, 1, 0, 61, 65, 1, 0, 66, 69, 3, 0, 105, 105, 110, 110, 117, 117, 1, 0, 109, 110, 1195, 0, 155, 1, 0, 0, 0, 2, 159, 1, 0, 0, 0, 4, 181, 1, 0, 0, 0, 6, 183, 1, 0, 0, 0, 8, 190, 1, 0, 0, 0, 10, 194, 1, 0, 0, 0, 12, 209, 1, 0, 0, 0, 14, 211, 1, 0, 0, 0, 16, 228, 1, 0, 0, 0, 18, 233, 1, 0, 0, 0, 20, 239, 1, 0, 0, 0, 22, 242, 1, 0, 0, 0, 24, 259, 1, 0, 0, 0, 26, 271, 1, 0, 0, 0, 28, 276, 1, 0, 0, 0, 30, 278, 1, 0, 0, 0, 32, 281, 1, 0, 0, 0, 34, 290, 1, 0, 0, 0, 36, 295, 1, 0, 0, 0, 38, 297, 1, 0, 0, 0, 40, 301, 1, 0, 0, 0, 42, 366, 1, 0, 0, 0, 44, 371, 1, 0, 0, 0, 46, 373, 1, 0, 0, 0, 48, 380, 1, 0, 0, 0, 50, 387, 1, 0, 0, 0, 52, 394, 1, 0, 0, 0, 54, 401, 1, 0, 0, 0, 56, 407, 1, 0, 0, 0, 58, 413, 1, 0, 0, 0, 60, 426, 1, 0, 0, 0, 62, 430, 1, 0, 0, 0, 64, 436, 1, 0, 0, 0, 66, 441, 1, 0, 0, 0, 68, 445, 1, 0, 0, 0, 70, 450, 1, 0, 0, 0, 72, 459, 1, 0, 0, 0, 74, 469, 1, 0, 0, 0, 76, 472, 1, 0, 0, 0, 78, 476, 1, 0, 0, 0, 80, 490, 1, 0, 0, 0, 82, 496, 1, 0, 0, 0, 84, 532, 1, 0, 0, 0, 86, 573, 1, 0, 0, 0, 88, 588, 1, 0, 0, 0, 90, 590, 1, 0, 0, 0, 92, 595, 1, 0, 0, 0, 94, 598, 1, 0, 0, 0, 96, 605, 1, 0, 0, 0, 98, 609, 1, 0, 0, 0, 100, 616, 1, 0, 0, 0, 102, 640, 1, 0, 0, 0, 104, 683, 1, 0, 0, 0, 106, 692, 1, 0, 0, 0, 108, 694, 1, 0, 0, 0, 110, 711, 1, 0, 0, 0, 112, 717, 1, 0, 0, 0, 114, 777, 1, 0, 0, 0, 116, 872, 1, 0, 0, 0, 118, 874, 1, 0, 0, 0, 120, 911, 1, 0, 0, 0, 122, 919, 1, 0, 0, 0, 124, 923, 1, 0, 0, 0, 126, 925, 1, 0, 0, 0, 128, 933, 1, 0, 0, 0, 130, 935, 1, 0, 0, 0, 132, 949, 1, 0, 0, 0, 134, 951, 1, 0, 0, 0, 136, 953, 1, 0, 0, 0, 138, 955, 1, 0, 0, 0, 140, 959, 1, 0, 0, 0, 142, 965, 1, 0, 0, 0, 144, 967, 1, 0, 0, 0, 146, 972, 1, 0, 0, 0, 148, 1020, 1, 0, 0, 0, 150, 1022, 1, 0, 0, 0, 152, 1028, 1, 0, 0, 0, 154, 156, 3, 96, 48, 0, 155, 154, 1, 0, 0, 0, 155, 156, 1, 0, 0, 0, 156, 157, 1, 0, 0, 0, 157, 158, 5, 0, 0, 1, 158, 1, 1, 0, 0, 0, 159, 160, 3, 4, 2, 0, 160, 3, 1, 0, 0, 0, 161, 182, 3, 6, 3, 0, 162, 182, 3, 30, 15, 0, 163, 182, 3, 10, 5, 0, 164, 182, 3, 24, 12, 0, 165, 182, 3, 36, 18, 0, 166, 182, 3, 80, 40, 0, 167, 182, 3, 38, 19, 0, 168, 182, 3, 40, 20, 0, 169, 182, 3, 42, 21, 0, 170, 182, 3, 46, 23, 0, 171, 182, 3, 48, 24, 0, 172, 182, 3, 50, 25, 0, 173, 182, 3, 52, 26, 0, 174, 182, 3, 54, 27, 0, 175, 182, 3, 66, 33, 0, 176, 182, 3, 56, 28, 0, 177, 182, 3, 68, 34, 0, 178, 182, 3, 70, 35, 0, 179, 182, 3, 76, 38, 0, 180, 182, 3, 78, 39, 0, 181, 161, 1, 0, 0, 0, 181, 162, 1, 0, 0, 0, 181, 163, 1, 0, 0, 0, 181, 164, 1, 0, 0, 0, 181, 165, 1, 0, 0, 0, 181, 166, 1, 0, 0, 0, 181, 167, 1, 0, 0, 0, 181, 168, 1, 0, 0, 0, 181, 169, 1, 0, 0, 0, 181, 170, 1, 0, 0, 0, 181, 171, 1, 0, 0, 0, 181, 172, 1, 0, 0, 0, 181, 173, 1, 0, 0, 0, 181, 174, 1, 0, 0, 0, 181, 175, 1, 0, 0, 0, 181, 176, 1, 0, 0, 0, 181, 177, 1, 0, 0, 0, 181, 178, 1, 0, 0, 0, 181, 179, 1, 0, 0, 0, 181, 180, 1, 0, 0, 0, 182, 5, 1, 0, 0, 0, 183, 185, 5, 7, 0, 0, 184, 186, 3, 8, 4, 0, 185, 184, 1, 0, 0, 0, 185, 186, 1, 0, 0, 0, 186, 187, 1, 0, 0, 0, 187, 188, 5, 9, 0, 0, 188, 7, 1, 0, 0, 0, 189, 191, 3, 4, 2, 0, 190, 189, 1, 0, 0, 0, 191, 192, 1, 0, 0, 0, 192, 190, 1, 0, 0, 0, 192, 193, 1, 0, 0, 0, 193, 9, 1, 0, 0, 0, 194, 195, 5, 104, 0, 0, 195, 196, 3, 12, 6, 0, 196, 11, 1, 0, 0, 0, 197, 199, 3, 16, 8, 0, 198, 197, 1, 0, 0, 0, 198, 199, 1, 0, 0, 0, 199, 202, 1, 0, 0, 0, 200, 203, 3, 18, 9, 0, 201, 203, 3, 14, 7, 0, 202, 200, 1, 0, 0, 0, 202, 201, 1, 0, 0, 0, 203, 204, 1, 0, 0, 0, 204, 205, 3, 20, 10, 0, 205, 206, 3, 152, 76, 0, 206, 210, 1, 0, 0, 0, 207, 208, 5, 118, 0, 0, 208, 210, 3, 152, 76, 0, 209, 198, 1, 0, 0, 0, 209, 207, 1, 0, 0, 0, 210, 13, 1, 0, 0, 0, 211, 217, 5, 7, 0, 0, 212, 213, 3, 22, 11, 0, 213, 214, 5, 11, 0, 0, 214, 216, 1, 0, 0, 0, 215, 212, 1, 0, 0, 0, 216, 219, 1, 0, 0, 0, 217, 215, 1, 0, 0, 0, 217, 218, 1, 0, 0, 0, 218, 224, 1, 0, 0, 0, 219, 217, 1, 0, 0, 0, 220, 222, 3, 22, 11, 0, 221, 223, 5, 11, 0, 0, 222, 221, 1, 0, 0, 0, 222, 223, 1, 0, 0, 0, 223, 225, 1, 0, 0, 0, 224, 220, 1, 0, 0, 0, 224, 225, 1, 0, 0, 0, 225, 226, 1, 0, 0, 0, 226, 227, 5, 9, 0, 0, 227, 15, 1, 0, 0, 0, 228, 229, 3, 22, 11, 0, 229, 230, 5, 11, 0, 0, 230, 17, 1, 0, 0, 0, 231, 234, 5, 24, 0, 0, 232, 234, 3, 142, 71, 0, 233, 231, 1, 0, 0, 0, 233, 232, 1, 0, 0, 0, 234, 237, 1, 0, 0, 0, 235, 236, 5, 96, 0, 0, 236, 238, 3, 142, 71, 0, 237, 235, 1, 0, 0, 0, 237, 238, 1, 0, 0, 0, 238, 19, 1, 0, 0, 0, 239, 240, 5, 97, 0, 0, 240, 241, 5, 118, 0, 0, 241, 21, 1, 0, 0, 0, 242, 245, 3, 142, 71, 0, 243, 244, 5, 96, 0, 0, 244, 246, 3, 142, 71, 0, 245, 243, 1, 0, 0, 0, 245, 246, 1, 0, 0, 0, 246, 23, 1, 0, 0, 0, 247, 250, 5, 103, 0, 0, 248, 251, 3, 26, 13, 0, 249, 251, 3, 28, 14, 0, 250, 248, 1, 0, 0, 0, 250, 249, 1, 0, 0, 0, 251, 252, 1, 0, 0, 0, 252, 253, 3, 152, 76, 0, 253, 260, 1, 0, 0, 0, 254, 255, 5, 103, 0, 0, 255, 256, 5, 90, 0, 0, 256, 257, 3, 114, 57, 0, 257, 258, 3, 152, 76, 0, 258, 260, 1, 0, 0, 0, 259, 247, 1, 0, 0, 0, 259, 254, 1, 0, 0, 0, 260, 25, 1, 0, 0, 0, 261, 262, 3, 18, 9, 0, 262, 263, 3, 20, 10, 0, 263, 264, 3, 152, 76, 0, 264, 272, 1, 0, 0, 0, 265, 267, 3, 14, 7, 0, 266, 268, 3, 20, 10, 0, 267, 266, 1, 0, 0, 0, 267, 268, 1, 0, 0, 0, 268, 269, 1, 0, 0, 0, 269, 270, 3, 152, 76, 0, 270, 272, 1, 0, 0, 0, 271, 261, 1, 0, 0, 0, 271, 265, 1, 0, 0, 0, 272, 27, 1, 0, 0, 0, 273, 277, 3, 30, 15, 0, 274, 277, 3, 80, 40, 0, 275, 277, 3, 78, 39, 0, 276, 273, 1, 0, 0, 0, 276, 274, 1, 0, 0, 0, 276, 275, 1, 0, 0, 0, 277, 29, 1, 0, 0, 0, 278, 279, 3, 32, 16, 0, 279, 280, 3, 152, 76, 0, 280, 31, 1, 0, 0, 0, 281, 282, 3, 44, 22, 0, 282, 287, 3, 34, 17, 0, 283, 284, 5, 11, 0, 0, 284, 286, 3, 34, 17, 0, 285, 283, 1, 0, 0, 0, 286, 289, 1, 0, 0, 0, 287, 285, 1, 0, 0, 0, 287, 288, 1, 0, 0, 0, 288, 33, 1, 0, 0, 0, 289, 287, 1, 0, 0, 0, 290, 293, 3, 116, 58, 0, 291, 292, 5, 12, 0, 0, 292, 294, 3, 114, 57, 0, 293, 291, 1, 0, 0, 0, 293, 294, 1, 0, 0, 0, 294, 35, 1, 0, 0, 0, 295, 296, 5, 10, 0, 0, 296, 37, 1, 0, 0, 0, 297, 298, 4, 19, 0, 0, 298, 299, 3, 112, 56, 0, 299, 300, 3, 152, 76, 0, 300, 39, 1, 0, 0, 0, 301, 302, 5, 91, 0, 0, 302, 303, 5, 5, 0, 0, 303, 304, 3, 112, 56, 0, 304, 305, 5, 6, 0, 0, 305, 308, 3, 4, 2, 0, 306, 307, 5, 75, 0, 0, 307, 309, 3, 4, 2, 0, 308, 306, 1, 0, 0, 0, 308, 309, 1, 0, 0, 0, 309, 41, 1, 0, 0, 0, 310, 311, 5, 71, 0, 0, 311, 312, 3, 4, 2, 0, 312, 313, 5, 85, 0, 0, 313, 314, 5, 5, 0, 0, 314, 315, 3, 112, 56, 0, 315, 316, 5, 6, 0, 0, 316, 317, 3, 152, 76, 0, 317, 367, 1, 0, 0, 0, 318, 319, 5, 85, 0, 0, 319, 320, 5, 5, 0, 0, 320, 321, 3, 112, 56, 0, 321, 322, 5, 6, 0, 0, 322, 323, 3, 4, 2, 0, 323, 367, 1, 0, 0, 0, 324, 325, 5, 83, 0, 0, 325, 328, 5, 5, 0, 0, 326, 329, 3, 112, 56, 0, 327, 329, 3, 32, 16, 0, 328, 326, 1, 0, 0, 0, 328, 327, 1, 0, 0, 0, 328, 329, 1, 0, 0, 0, 329, 330, 1, 0, 0, 0, 330, 332, 5, 10, 0, 0, 331, 333, 3, 112, 56, 0, 332, 331, 1, 0, 0, 0, 332, 333, 1, 0, 0, 0, 333, 334, 1, 0, 0, 0, 334, 336, 5, 10, 0, 0, 335, 337, 3, 112, 56, 0, 336, 335, 1, 0, 0, 0, 336, 337, 1, 0, 0, 0, 337, 338, 1, 0, 0, 0, 338, 339, 5, 6, 0, 0, 339, 367, 3, 4, 2, 0, 340, 341, 5, 83, 0, 0, 341, 344, 5, 5, 0, 0, 342, 345, 3, 114, 57, 0, 343, 345, 3, 32, 16, 0, 344, 342, 1, 0, 0, 0, 344, 343, 1, 0, 0, 0, 345, 346, 1, 0, 0, 0, 346, 347, 5, 94, 0, 0, 347, 348, 3, 112, 56, 0, 348, 349, 5, 6, 0, 0, 349, 350, 3, 4, 2, 0, 350, 367, 1, 0, 0, 0, 351, 353, 5, 83, 0, 0, 352, 354, 5, 106, 0, 0, 353, 352, 1, 0, 0, 0, 353, 354, 1, 0, 0, 0, 354, 355, 1, 0, 0, 0, 355, 358, 5, 5, 0, 0, 356, 359, 3, 114, 57, 0, 357, 359, 3, 32, 16, 0, 358, 356, 1, 0, 0, 0, 358, 357, 1, 0, 0, 0, 359, 360, 1, 0, 0, 0, 360, 361, 3, 144, 72, 0, 361, 362, 4, 21, 1, 0, 362, 363, 3, 112, 56, 0, 363, 364, 5, 6, 0, 0, 364, 365, 3, 4, 2, 0, 365, 367, 1, 0, 0, 0, 366, 310, 1, 0, 0, 0, 366, 318, 1, 0, 0, 0, 366, 324, 1, 0, 0, 0, 366, 340, 1, 0, 0, 0, 366, 351, 1, 0, 0, 0, 367, 43, 1, 0, 0, 0, 368, 372, 5, 77, 0, 0, 369, 372, 3, 150, 75, 0, 370, 372, 5, 102, 0, 0, 371, 368, 1, 0, 0, 0, 371, 369, 1, 0, 0, 0, 371, 370, 1, 0, 0, 0, 372, 45, 1, 0, 0, 0, 373, 376, 5, 82, 0, 0, 374, 375, 4, 23, 2, 0, 375, 377, 3, 144, 72, 0, 376, 374, 1, 0, 0, 0, 376, 377, 1, 0, 0, 0, 377, 378, 1, 0, 0, 0, 378, 379, 3, 152, 76, 0, 379, 47, 1, 0, 0, 0, 380, 383, 5, 70, 0, 0, 381, 382, 4, 24, 3, 0, 382, 384, 3, 144, 72, 0, 383, 381, 1, 0, 0, 0, 383, 384, 1, 0, 0, 0, 384, 385, 1, 0, 0, 0, 385, 386, 3, 152, 76, 0, 386, 49, 1, 0, 0, 0, 387, 390, 5, 80, 0, 0, 388, 389, 4, 25, 4, 0, 389, 391, 3, 112, 56, 0, 390, 388, 1, 0, 0, 0, 390, 391, 1, 0, 0, 0, 391, 392, 1, 0, 0, 0, 392, 393, 3, 152, 76, 0, 393, 51, 1, 0, 0, 0, 394, 397, 5, 107, 0, 0, 395, 396, 4, 26, 5, 0, 396, 398, 3, 112, 56, 0, 397, 395, 1, 0, 0, 0, 397, 398, 1, 0, 0, 0, 398, 399, 1, 0, 0, 0, 399, 400, 3, 152, 76, 0, 400, 53, 1, 0, 0, 0, 401, 402, 5, 89, 0, 0, 402, 403, 5, 5, 0, 0, 403, 404, 3, 112, 56, 0, 404, 405, 5, 6, 0, 0, 405, 406, 3, 4, 2, 0, 406, 55, 1, 0, 0, 0, 407, 408, 5, 84, 0, 0, 408, 409, 5, 5, 0, 0, 409, 410, 3, 112, 56, 0, 410, 411, 5, 6, 0, 0, 411, 412, 3, 58, 29, 0, 412, 57, 1, 0, 0, 0, 413, 415, 5, 7, 0, 0, 414, 416, 3, 60, 30, 0, 415, 414, 1, 0, 0, 0, 415, 416, 1, 0, 0, 0, 416, 421, 1, 0, 0, 0, 417, 419, 3, 64, 32, 0, 418, 420, 3, 60, 30, 0, 419, 418, 1, 0, 0, 0, 419, 420, 1, 0, 0, 0, 420, 422, 1, 0, 0, 0, 421, 417, 1, 0, 0, 0, 421, 422, 1, 0, 0, 0, 422, 423, 1, 0, 0, 0, 423, 424, 5, 9, 0, 0, 424, 59, 1, 0, 0, 0, 425, 427, 3, 62, 31, 0, 426, 425, 1, 0, 0, 0, 427, 428, 1, 0, 0, 0, 428, 426, 1, 0, 0, 0, 428, 429, 1, 0, 0, 0, 429, 61, 1, 0, 0, 0, 430, 431, 5, 74, 0, 0, 431, 432, 3, 112, 56, 0, 432, 434, 5, 15, 0, 0, 433, 435, 3, 8, 4, 0, 434, 433, 1, 0, 0, 0, 434, 435, 1, 0, 0, 0, 435, 63, 1, 0, 0, 0, 436, 437, 5, 90, 0, 0, 437, 439, 5, 15, 0, 0, 438, 440, 3, 8, 4, 0, 439, 438, 1, 0, 0, 0, 439, 440, 1, 0, 0, 0, 440, 65, 1, 0, 0, 0, 441, 442, 3, 144, 72, 0, 442, 443, 5, 15, 0, 0, 443, 444, 3, 4, 2, 0, 444, 67, 1, 0, 0, 0, 445, 446, 5, 92, 0, 0, 446, 447, 4, 34, 6, 0, 447, 448, 3, 112, 56, 0, 448, 449, 3, 152, 76, 0, 449, 69, 1, 0, 0, 0, 450, 451, 5, 95, 0, 0, 451, 457, 3, 6, 3, 0, 452, 454, 3, 72, 36, 0, 453, 455, 3, 74, 37, 0, 454, 453, 1, 0, 0, 0, 454, 455, 1, 0, 0, 0, 455, 458, 1, 0, 0, 0, 456, 458, 3, 74, 37, 0, 457, 452, 1, 0, 0, 0, 457, 456, 1, 0, 0, 0, 458, 71, 1, 0, 0, 0, 459, 465, 5, 78, 0, 0, 460, 462, 5, 5, 0, 0, 461, 463, 3, 116, 58, 0, 462, 461, 1, 0, 0, 0, 462, 463, 1, 0, 0, 0, 463, 464, 1, 0, 0, 0, 464, 466, 5, 6, 0, 0, 465, 460, 1, 0, 0, 0, 465, 466, 1, 0, 0, 0, 466, 467, 1, 0, 0, 0, 467, 468, 3, 6, 3, 0, 468, 73, 1, 0, 0, 0, 469, 470, 5, 79, 0, 0, 470, 471, 3, 6, 3, 0, 471, 75, 1, 0, 0, 0, 472, 473, 5, 86, 0, 0, 473, 474, 3, 152, 76, 0, 474, 77, 1, 0, 0, 0, 475, 477, 5, 105, 0, 0, 476, 475, 1, 0, 0, 0, 476, 477, 1, 0, 0, 0, 477, 478, 1, 0, 0, 0, 478, 480, 5, 87, 0, 0, 479, 481, 5, 24, 0, 0, 480, 479, 1, 0, 0, 0, 480, 481, 1, 0, 0, 0, 481, 482, 1, 0, 0, 0, 482, 483, 3, 144, 72, 0, 483, 485, 5, 5, 0, 0, 484, 486, 3, 88, 44, 0, 485, 484, 1, 0, 0, 0, 485, 486, 1, 0, 0, 0, 486, 487, 1, 0, 0, 0, 487, 488, 5, 6, 0, 0, 488, 489, 3, 94, 47, 0, 489, 79, 1, 0, 0, 0, 490, 491, 5, 98, 0, 0, 491, 492, 3, 144, 72, 0, 492, 493, 3, 82, 41, 0, 493, 81, 1, 0, 0, 0, 494, 495, 5, 100, 0, 0, 495, 497, 3, 114, 57, 0, 496, 494, 1, 0, 0, 0, 496, 497, 1, 0, 0, 0, 497, 498, 1, 0, 0, 0, 498, 502, 5, 7, 0, 0, 499, 501, 3, 84, 42, 0, 500, 499, 1, 0, 0, 0, 501, 504, 1, 0, 0, 0, 502, 500, 1, 0, 0, 0, 502, 503, 1, 0, 0, 0, 503, 505, 1, 0, 0, 0, 504, 502, 1, 0, 0, 0, 505, 506, 5, 9, 0, 0, 506, 83, 1, 0, 0, 0, 507, 512, 5, 116, 0, 0, 508, 509, 4, 42, 7, 0, 509, 512, 3, 144, 72, 0, 510, 512, 5, 105, 0, 0, 511, 507, 1, 0, 0, 0, 511, 508, 1, 0, 0, 0, 511, 510, 1, 0, 0, 0, 512, 515, 1, 0, 0, 0, 513, 511, 1, 0, 0, 0, 513, 514, 1, 0, 0, 0, 514, 522, 1, 0, 0, 0, 515, 513, 1, 0, 0, 0, 516, 523, 3, 86, 43, 0, 517, 518, 3, 116, 58, 0, 518, 519, 5, 12, 0, 0, 519, 520, 3, 118, 59, 0, 520, 521, 5, 10, 0, 0, 521, 523, 1, 0, 0, 0, 522, 516, 1, 0, 0, 0, 522, 517, 1, 0, 0, 0, 523, 533, 1, 0, 0, 0, 524, 533, 3, 36, 18, 0, 525, 527, 5, 29, 0, 0, 526, 525, 1, 0, 0, 0, 526, 527, 1, 0, 0, 0, 527, 528, 1, 0, 0, 0, 528, 529, 3, 106, 53, 0, 529, 530, 5, 12, 0, 0, 530, 531, 3, 114, 57, 0, 531, 533, 1, 0, 0, 0, 532, 513, 1, 0, 0, 0, 532, 524, 1, 0, 0, 0, 532, 526, 1, 0, 0, 0, 533, 85, 1, 0, 0, 0, 534, 536, 5, 24, 0, 0, 535, 534, 1, 0, 0, 0, 535, 536, 1, 0, 0, 0, 536, 538, 1, 0, 0, 0, 537, 539, 5, 29, 0, 0, 538, 537, 1, 0, 0, 0, 538, 539, 1, 0, 0, 0, 539, 540, 1, 0, 0, 0, 540, 541, 3, 106, 53, 0, 541, 543, 5, 5, 0, 0, 542, 544, 3, 88, 44, 0, 543, 542, 1, 0, 0, 0, 543, 544, 1, 0, 0, 0, 544, 545, 1, 0, 0, 0, 545, 546, 5, 6, 0, 0, 546, 547, 3, 94, 47, 0, 547, 574, 1, 0, 0, 0, 548, 550, 5, 24, 0, 0, 549, 548, 1, 0, 0, 0, 549, 550, 1, 0, 0, 0, 550, 552, 1, 0, 0, 0, 551, 553, 5, 29, 0, 0, 552, 551, 1, 0, 0, 0, 552, 553, 1, 0, 0, 0, 553, 554, 1, 0, 0, 0, 554, 555, 3, 138, 69, 0, 555, 556, 5, 5, 0, 0, 556, 557, 5, 6, 0, 0, 557, 558, 3, 94, 47, 0, 558, 574, 1, 0, 0, 0, 559, 561, 5, 24, 0, 0, 560, 559, 1, 0, 0, 0, 560, 561, 1, 0, 0, 0, 561, 563, 1, 0, 0, 0, 562, 564, 5, 29, 0, 0, 563, 562, 1, 0, 0, 0, 563, 564, 1, 0, 0, 0, 564, 565, 1, 0, 0, 0, 565, 566, 3, 140, 70, 0, 566, 568, 5, 5, 0, 0, 567, 569, 3, 88, 44, 0, 568, 567, 1, 0, 0, 0, 568, 569, 1, 0, 0, 0, 569, 570, 1, 0, 0, 0, 570, 571, 5, 6, 0, 0, 571, 572, 3, 94, 47, 0, 572, 574, 1, 0, 0, 0, 573, 535, 1, 0, 0, 0, 573, 549, 1, 0, 0, 0, 573, 560, 1, 0, 0, 0, 574, 87, 1, 0, 0, 0, 575, 580, 3, 90, 45, 0, 576, 577, 5, 11, 0, 0, 577, 579, 3, 90, 45, 0, 578, 576, 1, 0, 0, 0, 579, 582, 1, 0, 0, 0, 580, 578, 1, 0, 0, 0, 580, 581, 1, 0, 0, 0, 581, 585, 1, 0, 0, 0, 582, 580, 1, 0, 0, 0, 583, 584, 5, 11, 0, 0, 584, 586, 3, 92, 46, 0, 585, 583, 1, 0, 0, 0, 585, 586, 1, 0, 0, 0, 586, 589, 1, 0, 0, 0, 587, 589, 3, 92, 46, 0, 588, 575, 1, 0, 0, 0, 588, 587, 1, 0, 0, 0, 589, 89, 1, 0, 0, 0, 590, 593, 3, 116, 58, 0, 591, 592, 5, 12, 0, 0, 592, 594, 3, 114, 57, 0, 593, 591, 1, 0, 0, 0, 593, 594, 1, 0, 0, 0, 594, 91, 1, 0, 0, 0, 595, 596, 5, 16, 0, 0, 596, 597, 3, 114, 57, 0, 597, 93, 1, 0, 0, 0, 598, 600, 5, 7, 0, 0, 599, 601, 3, 96, 48, 0, 600, 599, 1, 0, 0, 0, 600, 601, 1, 0, 0, 0, 601, 602, 1, 0, 0, 0, 602, 603, 5, 9, 0, 0, 603, 95, 1, 0, 0, 0, 604, 606, 3, 2, 1, 0, 605, 604, 1, 0, 0, 0, 606, 607, 1, 0, 0, 0, 607, 605, 1, 0, 0, 0, 607, 608, 1, 0, 0, 0, 608, 97, 1, 0, 0, 0, 609, 610, 5, 3, 0, 0, 610, 611, 3, 100, 50, 0, 611, 612, 5, 4, 0, 0, 612, 99, 1, 0, 0, 0, 613, 615, 5, 11, 0, 0, 614, 613, 1, 0, 0, 0, 615, 618, 1, 0, 0, 0, 616, 614, 1, 0, 0, 0, 616, 617, 1, 0, 0, 0, 617, 620, 1, 0, 0, 0, 618, 616, 1, 0, 0, 0, 619, 621, 3, 102, 51, 0, 620, 619, 1, 0, 0, 0, 620, 621, 1, 0, 0, 0, 621, 630, 1, 0, 0, 0, 622, 624, 5, 11, 0, 0, 623, 622, 1, 0, 0, 0, 624, 625, 1, 0, 0, 0, 625, 623, 1, 0, 0, 0, 625, 626, 1, 0, 0, 0, 626, 627, 1, 0, 0, 0, 627, 629, 3, 102, 51, 0, 628, 623, 1, 0, 0, 0, 629, 632, 1, 0, 0, 0, 630, 628, 1, 0, 0, 0, 630, 631, 1, 0, 0, 0, 631, 636, 1, 0, 0, 0, 632, 630, 1, 0, 0, 0, 633, 635, 5, 11, 0, 0, 634, 633, 1, 0, 0, 0, 635, 638, 1, 0, 0, 0, 636, 634, 1, 0, 0, 0, 636, 637, 1, 0, 0, 0, 637, 101, 1, 0, 0, 0, 638, 636, 1, 0, 0, 0, 639, 641, 5, 16, 0, 0, 640, 639, 1, 0, 0, 0, 640, 641, 1, 0, 0, 0, 641, 642, 1, 0, 0, 0, 642, 643, 3, 114, 57, 0, 643, 103, 1, 0, 0, 0, 644, 645, 3, 106, 53, 0, 645, 646, 5, 15, 0, 0, 646, 647, 3, 114, 57, 0, 647, 684, 1, 0, 0, 0, 648, 649, 5, 3, 0, 0, 649, 650, 3, 114, 57, 0, 650, 651, 5, 4, 0, 0, 651, 652, 5, 15, 0, 0, 652, 653, 3, 114, 57, 0, 653, 684, 1, 0, 0, 0, 654, 656, 5, 105, 0, 0, 655, 654, 1, 0, 0, 0, 655, 656, 1, 0, 0, 0, 656, 658, 1, 0, 0, 0, 657, 659, 5, 24, 0, 0, 658, 657, 1, 0, 0, 0, 658, 659, 1, 0, 0, 0, 659, 660, 1, 0, 0, 0, 660, 661, 3, 106, 53, 0, 661, 663, 5, 5, 0, 0, 662, 664, 3, 88, 44, 0, 663, 662, 1, 0, 0, 0, 663, 664, 1, 0, 0, 0, 664, 665, 1, 0, 0, 0, 665, 666, 5, 6, 0, 0, 666, 667, 3, 94, 47, 0, 667, 684, 1, 0, 0, 0, 668, 669, 3, 138, 69, 0, 669, 670, 5, 5, 0, 0, 670, 671, 5, 6, 0, 0, 671, 672, 3, 94, 47, 0, 672, 684, 1, 0, 0, 0, 673, 674, 3, 140, 70, 0, 674, 675, 5, 5, 0, 0, 675, 676, 3, 90, 45, 0, 676, 677, 5, 6, 0, 0, 677, 678, 3, 94, 47, 0, 678, 684, 1, 0, 0, 0, 679, 681, 5, 16, 0, 0, 680, 679, 1, 0, 0, 0, 680, 681, 1, 0, 0, 0, 681, 682, 1, 0, 0, 0, 682, 684, 3, 114, 57, 0, 683, 644, 1, 0, 0, 0, 683, 648, 1, 0, 0, 0, 683, 655, 1, 0, 0, 0, 683, 668, 1, 0, 0, 0, 683, 673, 1, 0, 0, 0, 683, 680, 1, 0, 0, 0, 684, 105, 1, 0, 0, 0, 685, 693, 3, 142, 71, 0, 686, 693, 5, 118, 0, 0, 687, 693, 3, 134, 67, 0, 688, 689, 5, 3, 0, 0, 689, 690, 3, 114, 57, 0, 690, 691, 5, 4, 0, 0, 691, 693, 1, 0, 0, 0, 692, 685, 1, 0, 0, 0, 692, 686, 1, 0, 0, 0, 692, 687, 1, 0, 0, 0, 692, 688, 1, 0, 0, 0, 693, 107, 1, 0, 0, 0, 694, 706, 5, 5, 0, 0, 695, 700, 3, 110, 55, 0, 696, 697, 5, 11, 0, 0, 697, 699, 3, 110, 55, 0, 698, 696, 1, 0, 0, 0, 699, 702, 1, 0, 0, 0, 700, 698, 1, 0, 0, 0, 700, 701, 1, 0, 0, 0, 701, 704, 1, 0, 0, 0, 702, 700, 1, 0, 0, 0, 703, 705, 5, 11, 0, 0, 704, 703, 1, 0, 0, 0, 704, 705, 1, 0, 0, 0, 705, 707, 1, 0, 0, 0, 706, 695, 1, 0, 0, 0, 706, 707, 1, 0, 0, 0, 707, 708, 1, 0, 0, 0, 708, 709, 5, 6, 0, 0, 709, 109, 1, 0, 0, 0, 710, 712, 5, 16, 0, 0, 711, 710, 1, 0, 0, 0, 711, 712, 1, 0, 0, 0, 712, 715, 1, 0, 0, 0, 713, 716, 3, 114, 57, 0, 714, 716, 3, 144, 72, 0, 715, 713, 1, 0, 0, 0, 715, 714, 1, 0, 0, 0, 716, 111, 1, 0, 0, 0, 717, 722, 3, 114, 57, 0, 718, 719, 5, 11, 0, 0, 719, 721, 3, 114, 57, 0, 720, 718, 1, 0, 0, 0, 721, 724, 1, 0, 0, 0, 722, 720, 1, 0, 0, 0, 722, 723, 1, 0, 0, 0, 723, 113, 1, 0, 0, 0, 724, 722, 1, 0, 0, 0, 725, 726, 6, 57, -1, 0, 726, 778, 3, 120, 60, 0, 727, 729, 5, 98, 0, 0, 728, 730, 3, 144, 72, 0, 729, 728, 1, 0, 0, 0, 729, 730, 1, 0, 0, 0, 730, 731, 1, 0, 0, 0, 731, 778, 3, 82, 41, 0, 732, 733, 5, 76, 0, 0, 733, 734, 3, 114, 57, 0, 734, 735, 3, 108, 54, 0, 735, 778, 1, 0, 0, 0, 736, 737, 5, 76, 0, 0, 737, 778, 3, 114, 57, 42, 738, 739, 5, 76, 0, 0, 739, 740, 5, 17, 0, 0, 740, 778, 3, 144, 72, 0, 741, 742, 5, 93, 0, 0, 742, 778, 3, 114, 57, 37, 743, 744, 5, 81, 0, 0, 744, 778, 3, 114, 57, 36, 745, 746, 5, 73, 0, 0, 746, 778, 3, 114, 57, 35, 747, 748, 5, 18, 0, 0, 748, 778, 3, 114, 57, 34, 749, 750, 5, 19, 0, 0, 750, 778, 3, 114, 57, 33, 751, 752, 5, 20, 0, 0, 752, 778, 3, 114, 57, 32, 753, 754, 5, 21, 0, 0, 754, 778, 3, 114, 57, 31, 755, 756, 5, 22, 0, 0, 756, 778, 3, 114, 57, 30, 757, 758, 5, 23, 0, 0, 758, 778, 3, 114, 57, 29, 759, 760, 5, 106, 0, 0, 760, 778, 3, 114, 57, 28, 761, 762, 5, 104, 0, 0, 762, 763, 5, 5, 0, 0, 763, 764, 3, 114, 57, 0, 764, 765, 5, 6, 0, 0, 765, 778, 1, 0, 0, 0, 766, 778, 3, 52, 26, 0, 767, 778, 5, 88, 0, 0, 768, 778, 3, 144, 72, 0, 769, 778, 5, 101, 0, 0, 770, 778, 3, 128, 64, 0, 771, 778, 3, 98, 49, 0, 772, 778, 3, 118, 59, 0, 773, 774, 5, 5, 0, 0, 774, 775, 3, 112, 56, 0, 775, 776, 5, 6, 0, 0, 776, 778, 1, 0, 0, 0, 777, 725, 1, 0, 0, 0, 777, 727, 1, 0, 0, 0, 777, 732, 1, 0, 0, 0, 777, 736, 1, 0, 0, 0, 777, 738, 1, 0, 0, 0, 777, 741, 1, 0, 0, 0, 777, 743, 1, 0, 0, 0, 777, 745, 1, 0, 0, 0, 777, 747, 1, 0, 0, 0, 777, 749, 1, 0, 0, 0, 777, 751, 1, 0, 0, 0, 777, 753, 1, 0, 0, 0, 777, 755, 1, 0, 0, 0, 777, 757, 1, 0, 0, 0, 777, 759, 1, 0, 0, 0, 777, 761, 1, 0, 0, 0, 777, 766, 1, 0, 0, 0, 777, 767, 1, 0, 0, 0, 777, 768, 1, 0, 0, 0, 777, 769, 1, 0, 0, 0, 777, 770, 1, 0, 0, 0, 777, 771, 1, 0, 0, 0, 777, 772, 1, 0, 0, 0, 777, 773, 1, 0, 0, 0, 778, 866, 1, 0, 0, 0, 779, 780, 10, 46, 0, 0, 780, 781, 5, 14, 0, 0, 781, 865, 3, 114, 57, 47, 782, 783, 10, 27, 0, 0, 783, 784, 5, 27, 0, 0, 784, 865, 3, 114, 57, 27, 785, 786, 10, 26, 0, 0, 786, 787, 7, 0, 0, 0, 787, 865, 3, 114, 57, 27, 788, 789, 10, 25, 0, 0, 789, 790, 7, 1, 0, 0, 790, 865, 3, 114, 57, 26, 791, 792, 10, 24, 0, 0, 792, 793, 5, 28, 0, 0, 793, 865, 3, 114, 57, 25, 794, 795, 10, 23, 0, 0, 795, 796, 7, 2, 0, 0, 796, 865, 3, 114, 57, 24, 797, 798, 10, 22, 0, 0, 798, 799, 7, 3, 0, 0, 799, 865, 3, 114, 57, 23, 800, 801, 10, 21, 0, 0, 801, 802, 5, 72, 0, 0, 802, 865, 3, 114, 57, 22, 803, 804, 10, 20, 0, 0, 804, 805, 5, 94, 0, 0, 805, 865, 3, 114, 57, 21, 806, 807, 10, 19, 0, 0, 807, 808, 7, 4, 0, 0, 808, 865, 3, 114, 57, 20, 809, 810, 10, 18, 0, 0, 810, 811, 5, 41, 0, 0, 811, 865, 3, 114, 57, 19, 812, 813, 10, 17, 0, 0, 813, 814, 5, 42, 0, 0, 814, 865, 3, 114, 57, 18, 815, 816, 10, 16, 0, 0, 816, 817, 5, 43, 0, 0, 817, 865, 3, 114, 57, 17, 818, 819, 10, 15, 0, 0, 819, 820, 5, 44, 0, 0, 820, 865, 3, 114, 57, 16, 821, 822, 10, 14, 0, 0, 822, 823, 5, 45, 0, 0, 823, 865, 3, 114, 57, 15, 824, 825, 10, 13, 0, 0, 825, 826, 5, 13, 0, 0, 826, 827, 3, 114, 57, 0, 827, 828, 5, 15, 0, 0, 828, 829, 3, 114, 57, 14, 829, 865, 1, 0, 0, 0, 830, 831, 10, 12, 0, 0, 831, 832, 5, 12, 0, 0, 832, 865, 3, 114, 57, 12, 833, 834, 10, 11, 0, 0, 834, 835, 3, 126, 63, 0, 835, 836, 3, 114, 57, 11, 836, 865, 1, 0, 0, 0, 837, 839, 10, 45, 0, 0, 838, 840, 5, 14, 0, 0, 839, 838, 1, 0, 0, 0, 839, 840, 1, 0, 0, 0, 840, 841, 1, 0, 0, 0, 841, 842, 5, 3, 0, 0, 842, 843, 3, 112, 56, 0, 843, 844, 5, 4, 0, 0, 844, 865, 1, 0, 0, 0, 845, 847, 10, 44, 0, 0, 846, 848, 5, 13, 0, 0, 847, 846, 1, 0, 0, 0, 847, 848, 1, 0, 0, 0, 848, 849, 1, 0, 0, 0, 849, 851, 5, 17, 0, 0, 850, 852, 5, 29, 0, 0, 851, 850, 1, 0, 0, 0, 851, 852, 1, 0, 0, 0, 852, 853, 1, 0, 0, 0, 853, 865, 3, 142, 71, 0, 854, 855, 10, 41, 0, 0, 855, 865, 3, 108, 54, 0, 856, 857, 10, 39, 0, 0, 857, 858, 4, 57, 30, 0, 858, 865, 5, 18, 0, 0, 859, 860, 10, 38, 0, 0, 860, 861, 4, 57, 32, 0, 861, 865, 5, 19, 0, 0, 862, 863, 10, 9, 0, 0, 863, 865, 3, 130, 65, 0, 864, 779, 1, 0, 0, 0, 864, 782, 1, 0, 0, 0, 864, 785, 1, 0, 0, 0, 864, 788, 1, 0, 0, 0, 864, 791, 1, 0, 0, 0, 864, 794, 1, 0, 0, 0, 864, 797, 1, 0, 0, 0, 864, 800, 1, 0, 0, 0, 864, 803, 1, 0, 0, 0, 864, 806, 1, 0, 0, 0, 864, 809, 1, 0, 0, 0, 864, 812, 1, 0, 0, 0, 864, 815, 1, 0, 0, 0, 864, 818, 1, 0, 0, 0, 864, 821, 1, 0, 0, 0, 864, 824, 1, 0, 0, 0, 864, 830, 1, 0, 0, 0, 864, 833, 1, 0, 0, 0, 864, 837, 1, 0, 0, 0, 864, 845, 1, 0, 0, 0, 864, 854, 1, 0, 0, 0, 864, 856, 1, 0, 0, 0, 864, 859, 1, 0, 0, 0, 864, 862, 1, 0, 0, 0, 865, 868, 1, 0, 0, 0, 866, 864, 1, 0, 0, 0, 866, 867, 1, 0, 0, 0, 867, 115, 1, 0, 0, 0, 868, 866, 1, 0, 0, 0, 869, 873, 3, 144, 72, 0, 870, 873, 3, 98, 49, 0, 871, 873, 3, 118, 59, 0, 872, 869, 1, 0, 0, 0, 872, 870, 1, 0, 0, 0, 872, 871, 1, 0, 0, 0, 873, 117, 1, 0, 0, 0, 874, 886, 5, 7, 0, 0, 875, 880, 3, 104, 52, 0, 876, 877, 5, 11, 0, 0, 877, 879, 3, 104, 52, 0, 878, 876, 1, 0, 0, 0, 879, 882, 1, 0, 0, 0, 880, 878, 1, 0, 0, 0, 880, 881, 1, 0, 0, 0, 881, 884, 1, 0, 0, 0, 882, 880, 1, 0, 0, 0, 883, 885, 5, 11, 0, 0, 884, 883, 1, 0, 0, 0, 884, 885, 1, 0, 0, 0, 885, 887, 1, 0, 0, 0, 886, 875, 1, 0, 0, 0, 886, 887, 1, 0, 0, 0, 887, 888, 1, 0, 0, 0, 888, 889, 5, 9, 0, 0, 889, 119, 1, 0, 0, 0, 890, 912, 3, 78, 39, 0, 891, 893, 5, 105, 0, 0, 892, 891, 1, 0, 0, 0, 892, 893, 1, 0, 0, 0, 893, 894, 1, 0, 0, 0, 894, 896, 5, 87, 0, 0, 895, 897, 5, 24, 0, 0, 896, 895, 1, 0, 0, 0, 896, 897, 1, 0, 0, 0, 897, 898, 1, 0, 0, 0, 898, 900, 5, 5, 0, 0, 899, 901, 3, 88, 44, 0, 900, 899, 1, 0, 0, 0, 900, 901, 1, 0, 0, 0, 901, 902, 1, 0, 0, 0, 902, 903, 5, 6, 0, 0, 903, 912, 3, 94, 47, 0, 904, 906, 5, 105, 0, 0, 905, 904, 1, 0, 0, 0, 905, 906, 1, 0, 0, 0, 906, 907, 1, 0, 0, 0, 907, 908, 3, 122, 61, 0, 908, 909, 5, 58, 0, 0, 909, 910, 3, 124, 62, 0, 910, 912, 1, 0, 0, 0, 911, 890, 1, 0, 0, 0, 911, 892, 1, 0, 0, 0, 911, 905, 1, 0, 0, 0, 912, 121, 1, 0, 0, 0, 913, 920, 3, 144, 72, 0, 914, 916, 5, 5, 0, 0, 915, 917, 3, 88, 44, 0, 916, 915, 1, 0, 0, 0, 916, 917, 1, 0, 0, 0, 917, 918, 1, 0, 0, 0, 918, 920, 5, 6, 0, 0, 919, 913, 1, 0, 0, 0, 919, 914, 1, 0, 0, 0, 920, 123, 1, 0, 0, 0, 921, 924, 3, 114, 57, 0, 922, 924, 3, 94, 47, 0, 923, 921, 1, 0, 0, 0, 923, 922, 1, 0, 0, 0, 924, 125, 1, 0, 0, 0, 925, 926, 7, 5, 0, 0, 926, 127, 1, 0, 0, 0, 927, 934, 5, 59, 0, 0, 928, 934, 5, 60, 0, 0, 929, 934, 5, 118, 0, 0, 930, 934, 3, 130, 65, 0, 931, 934, 3, 134, 67, 0, 932, 934, 3, 136, 68, 0, 933, 927, 1, 0, 0, 0, 933, 928, 1, 0, 0, 0, 933, 929, 1, 0, 0, 0, 933, 930, 1, 0, 0, 0, 933, 931, 1, 0, 0, 0, 933, 932, 1, 0, 0, 0, 934, 129, 1, 0, 0, 0, 935, 939, 5, 119, 0, 0, 936, 938, 3, 132, 66, 0, 937, 936, 1, 0, 0, 0, 938, 941, 1, 0, 0, 0, 939, 937, 1, 0, 0, 0, 939, 940, 1, 0, 0, 0, 940, 942, 1, 0, 0, 0, 941, 939, 1, 0, 0, 0, 942, 943, 5, 119, 0, 0, 943, 131, 1, 0, 0, 0, 944, 950, 5, 126, 0, 0, 945, 946, 5, 125, 0, 0, 946, 947, 3, 114, 57, 0, 947, 948, 5, 8, 0, 0, 948, 950, 1, 0, 0, 0, 949, 944, 1, 0, 0, 0, 949, 945, 1, 0, 0, 0, 950, 133, 1, 0, 0, 0, 951, 952, 7, 6, 0, 0, 952, 135, 1, 0, 0, 0, 953, 954, 7, 7, 0, 0, 954, 137, 1, 0, 0, 0, 955, 956, 4, 69, 34, 0, 956, 957, 3, 144, 72, 0, 957, 958, 3, 106, 53, 0, 958, 139, 1, 0, 0, 0, 959, 960, 4, 70, 35, 0, 960, 961, 3, 144, 72, 0, 961, 962, 3, 106, 53, 0, 962, 141, 1, 0, 0, 0, 963, 966, 3, 144, 72, 0, 964, 966, 3, 146, 73, 0, 965, 963, 1, 0, 0, 0, 965, 964, 1, 0, 0, 0, 966, 143, 1, 0, 0, 0, 967, 968, 7, 8, 0, 0, 968, 145, 1, 0, 0, 0, 969, 973, 3, 148, 74, 0, 970, 973, 5, 59, 0, 0, 971, 973, 5, 60, 0, 0, 972, 969, 1, 0, 0, 0, 972, 970, 1, 0, 0, 0, 972, 971, 1, 0, 0, 0, 973, 147, 1, 0, 0, 0, 974, 1021, 5, 70, 0, 0, 975, 1021, 5, 71, 0, 0, 976, 1021, 5, 72, 0, 0, 977, 1021, 5, 73, 0, 0, 978, 1021, 5, 74, 0, 0, 979, 1021, 5, 75, 0, 0, 980, 1021, 5, 76, 0, 0, 981, 1021, 5, 77, 0, 0, 982, 1021, 5, 78, 0, 0, 983, 1021, 5, 79, 0, 0, 984, 1021, 5, 80, 0, 0, 985, 1021, 5, 81, 0, 0, 986, 1021, 5, 82, 0, 0, 987, 1021, 5, 83, 0, 0, 988, 1021, 5, 84, 0, 0, 989, 1021, 5, 85, 0, 0, 990, 1021, 5, 86, 0, 0, 991, 1021, 5, 87, 0, 0, 992, 1021, 5, 88, 0, 0, 993, 1021, 5, 89, 0, 0, 994, 1021, 5, 90, 0, 0, 995, 1021, 5, 91, 0, 0, 996, 1021, 5, 92, 0, 0, 997, 1021, 5, 93, 0, 0, 998, 1021, 5, 94, 0, 0, 999, 1021, 5, 95, 0, 0, 1000, 1021, 5, 98, 0, 0, 1001, 1021, 5, 99, 0, 0, 1002, 1021, 5, 100, 0, 0, 1003, 1021, 5, 101, 0, 0, 1004, 1021, 5, 102, 0, 0, 1005, 1021, 5, 103, 0, 0, 1006, 1021, 5, 104, 0, 0, 1007, 1021, 5, 108, 0, 0, 1008, 1021, 3, 150, 75, 0, 1009, 1021, 5, 111, 0, 0, 1010, 1021, 5, 112, 0, 0, 1011, 1021, 5, 113, 0, 0, 1012, 1021, 5, 114, 0, 0, 1013, 1021, 5, 115, 0, 0, 1014, 1021, 5, 116, 0, 0, 1015, 1021, 5, 107, 0, 0, 1016, 1021, 5, 105, 0, 0, 1017, 1021, 5, 106, 0, 0, 1018, 1021, 5, 97, 0, 0, 1019, 1021, 5, 96, 0, 0, 1020, 974, 1, 0, 0, 0, 1020, 975, 1, 0, 0, 0, 1020, 976, 1, 0, 0, 0, 1020, 977, 1, 0, 0, 0, 1020, 978, 1, 0, 0, 0, 1020, 979, 1, 0, 0, 0, 1020, 980, 1, 0, 0, 0, 1020, 981, 1, 0, 0, 0, 1020, 982, 1, 0, 0, 0, 1020, 983, 1, 0, 0, 0, 1020, 984, 1, 0, 0, 0, 1020, 985, 1, 0, 0, 0, 1020, 986, 1, 0, 0, 0, 1020, 987, 1, 0, 0, 0, 1020, 988, 1, 0, 0, 0, 1020, 989, 1, 0, 0, 0, 1020, 990, 1, 0, 0, 0, 1020, 991, 1, 0, 0, 0, 1020, 992, 1, 0, 0, 0, 1020, 993, 1, 0, 0, 0, 1020, 994, 1, 0, 0, 0, 1020, 995, 1, 0, 0, 0, 1020, 996, 1, 0, 0, 0, 1020, 997, 1, 0, 0, 0, 1020, 998, 1, 0, 0, 0, 1020, 999, 1, 0, 0, 0, 1020, 1000, 1, 0, 0, 0, 1020, 1001, 1, 0, 0, 0, 1020, 1002, 1, 0, 0, 0, 1020, 1003, 1, 0, 0, 0, 1020, 1004, 1, 0, 0, 0, 1020, 1005, 1, 0, 0, 0, 1020, 1006, 1, 0, 0, 0, 1020, 1007, 1, 0, 0, 0, 1020, 1008, 1, 0, 0, 0, 1020, 1009, 1, 0, 0, 0, 1020, 1010, 1, 0, 0, 0, 1020, 1011, 1, 0, 0, 0, 1020, 1012, 1, 0, 0, 0, 1020, 1013, 1, 0, 0, 0, 1020, 1014, 1, 0, 0, 0, 1020, 1015, 1, 0, 0, 0, 1020, 1016, 1, 0, 0, 0, 1020, 1017, 1, 0, 0, 0, 1020, 1018, 1, 0, 0, 0, 1020, 1019, 1, 0, 0, 0, 1021, 149, 1, 0, 0, 0, 1022, 1023, 7, 9, 0, 0, 1023, 151, 1, 0, 0, 0, 1024, 1029, 5, 10, 0, 0, 1025, 1029, 5, 0, 0, 1, 1026, 1029, 4, 76, 36, 0, 1027, 1029, 4, 76, 37, 0, 1028, 1024, 1, 0, 0, 0, 1028, 1025, 1, 0, 0, 0, 1028, 1026, 1, 0, 0, 0, 1028, 1027, 1, 0, 0, 0, 1029, 153, 1, 0, 0, 0, 112, 155, 181, 185, 192, 198, 202, 209, 217, 222, 224, 233, 237, 245, 250, 259, 267, 271, 276, 287, 293, 308, 328, 332, 336, 344, 353, 358, 366, 371, 376, 383, 390, 397, 415, 419, 421, 428, 434, 439, 454, 457, 462, 465, 476, 480, 485, 496, 502, 511, 513, 522, 526, 532, 535, 538, 543, 549, 552, 560, 563, 568, 573, 580, 585, 588, 593, 600, 607, 616, 620, 625, 630, 636, 640, 655, 658, 663, 680, 683, 692, 700, 704, 706, 711, 715, 722, 729, 777, 839, 847, 851, 864, 866, 872, 880, 884, 886, 892, 896, 900, 905, 911, 916, 919, 923, 933, 939, 949, 965, 972, 1020, 1028];
const atn = new _antlr.default.atn.ATNDeserializer().deserialize(serializedATN);
const decisionsToDFA = atn.decisionToState.map((ds, index) => new _antlr.default.dfa.DFA(ds, index));
const sharedContextCache = new _antlr.default.PredictionContextCache();
class JavaScriptParser extends _JavaScriptParserBase.default {
  static grammarFileName = "java-escape";
  static literalNames = [null, null, null, "'['", "']'", "'('", "')'", "'{'", null, "'}'", "';'", "','", "'='", "'?'", "'?.'", "':'", "'...'", "'.'", "'++'", "'--'", "'+'", "'-'", "'~'", "'!'", "'*'", "'/'", "'%'", "'**'", "'??'", "'#'", "'>>'", "'<<'", "'>>>'", "'<'", "'>'", "'<='", "'>='", "'=='", "'!='", "'==='", "'!=='", "'&'", "'^'", "'|'", "'&&'", "'||'", "'*='", "'/='", "'%='", "'+='", "'-='", "'<<='", "'>>='", "'>>>='", "'&='", "'^='", "'|='", "'**='", "'=>'", "'null'", null, null, null, null, null, null, null, null, null, null, "'break'", "'do'", "'instanceof'", "'typeof'", "'case'", "'else'", "'new'", "'var'", "'catch'", "'finally'", "'return'", "'void'", "'continue'", "'for'", "'switch'", "'while'", "'debugger'", "'function'", "'this'", "'with'", "'default'", "'if'", "'throw'", "'delete'", "'in'", "'try'", "'as'", "'from'", "'class'", "'enum'", "'extends'", "'super'", "'const'", "'export'", "'import'", "'async'", "'await'", "'yield'", "'implements'", null, null, "'private'", "'public'", "'interface'", "'package'", "'protected'", "'static'", null, null, null, null, null, null, null, null, "'${'"];
  static symbolicNames = [null, "MultiLineComment", "SingleLineComment", "OpenBracket", "CloseBracket", "OpenParen", "CloseParen", "OpenBrace", "TemplateCloseBrace", "CloseBrace", "SemiColon", "Comma", "Assign", "QuestionMark", "QuestionMarkDot", "Colon", "Ellipsis", "Dot", "PlusPlus", "MinusMinus", "Plus", "Minus", "BitNot", "Not", "Multiply", "Divide", "Modulus", "Power", "NullCoalesce", "Hashtag", "RightShiftArithmetic", "LeftShiftArithmetic", "RightShiftLogical", "LessThan", "MoreThan", "LessThanEquals", "GreaterThanEquals", "Equals_", "NotEquals", "IdentityEquals", "IdentityNotEquals", "BitAnd", "BitXOr", "BitOr", "And", "Or", "MultiplyAssign", "DivideAssign", "ModulusAssign", "PlusAssign", "MinusAssign", "LeftShiftArithmeticAssign", "RightShiftArithmeticAssign", "RightShiftLogicalAssign", "BitAndAssign", "BitXorAssign", "BitOrAssign", "PowerAssign", "ARROW", "NullLiteral", "BooleanLiteral", "DecimalLiteral", "HexIntegerLiteral", "OctalIntegerLiteral", "OctalIntegerLiteral2", "BinaryIntegerLiteral", "BigHexIntegerLiteral", "BigOctalIntegerLiteral", "BigBinaryIntegerLiteral", "BigDecimalIntegerLiteral", "Break", "Do", "Instanceof", "Typeof", "Case", "Else", "New", "Var", "Catch", "Finally", "Return", "Void", "Continue", "For", "Switch", "While", "Debugger", "FunctionObject", "This", "With", "Default", "If", "Throw", "Delete", "In", "Try", "As", "From", "Class", "Enum", "Extends", "Super", "Const", "Export", "Import", "Async", "Await", "Yield", "Implements", "StrictLet", "NonStrictLet", "Private", "Public", "Interface", "Package", "Protected", "Static", "Identifier", "StringLiteral", "BackTick", "WhiteSpaces", "LineTerminator", "HtmlComment", "CDataComment", "UnexpectedCharacter", "TemplateStringStartExpression", "TemplateStringAtom"];
  static ruleNames = ["program", "sourceElement", "statement", "block", "statementList", "importStatement", "importFromBlock", "moduleItems", "importDefault", "importNamespace", "importFrom", "aliasName", "exportStatement", "exportFromBlock", "declaration", "variableStatement", "variableDeclarationList", "variableDeclaration", "emptyStatement_", "expressionStatement", "ifStatement", "iterationStatement", "varModifier", "continueStatement", "breakStatement", "returnStatement", "yieldStatement", "withStatement", "switchStatement", "caseBlock", "caseClauses", "caseClause", "defaultClause", "labelledStatement", "throwStatement", "tryStatement", "catchProduction", "finallyProduction", "debuggerStatement", "functionDeclaration", "classDeclaration", "classTail", "classElement", "methodDefinition", "formalParameterList", "formalParameterArg", "lastFormalParameterArg", "functionBody", "sourceElements", "arrayLiteral", "elementList", "arrayElement", "propertyAssignment", "propertyName", "arguments", "argument", "expressionSequence", "singleExpression", "assignable", "objectLiteral", "anonymousFunction", "arrowFunctionParameters", "arrowFunctionBody", "assignmentOperator", "literal", "templateStringLiteral", "templateStringAtom", "numericLiteral", "bigintLiteral", "getter", "setter", "identifierName", "identifier", "reservedWord", "keyword", "let_", "eos"];
  constructor(input) {
    super(input);
    this._interp = new _antlr.default.atn.ParserATNSimulator(this, atn, decisionsToDFA, sharedContextCache);
    this.ruleNames = JavaScriptParser.ruleNames;
    this.literalNames = JavaScriptParser.literalNames;
    this.symbolicNames = JavaScriptParser.symbolicNames;
  }
  get atn() {
    return atn;
  }
  sempred(localctx, ruleIndex, predIndex) {
    switch (ruleIndex) {
      case 19:
        return this.expressionStatement_sempred(localctx, predIndex);
      case 21:
        return this.iterationStatement_sempred(localctx, predIndex);
      case 23:
        return this.continueStatement_sempred(localctx, predIndex);
      case 24:
        return this.breakStatement_sempred(localctx, predIndex);
      case 25:
        return this.returnStatement_sempred(localctx, predIndex);
      case 26:
        return this.yieldStatement_sempred(localctx, predIndex);
      case 34:
        return this.throwStatement_sempred(localctx, predIndex);
      case 42:
        return this.classElement_sempred(localctx, predIndex);
      case 57:
        return this.singleExpression_sempred(localctx, predIndex);
      case 69:
        return this.getter_sempred(localctx, predIndex);
      case 70:
        return this.setter_sempred(localctx, predIndex);
      case 76:
        return this.eos_sempred(localctx, predIndex);
      default:
        throw "No predicate with index:" + ruleIndex;
    }
  }
  expressionStatement_sempred(localctx, predIndex) {
    switch (predIndex) {
      case 0:
        return this.notOpenBraceAndNotFunction();
      default:
        throw "No predicate with index:" + predIndex;
    }
  }
  iterationStatement_sempred(localctx, predIndex) {
    switch (predIndex) {
      case 1:
        return this.p("of");
      default:
        throw "No predicate with index:" + predIndex;
    }
  }
  continueStatement_sempred(localctx, predIndex) {
    switch (predIndex) {
      case 2:
        return this.notLineTerminator();
      default:
        throw "No predicate with index:" + predIndex;
    }
  }
  breakStatement_sempred(localctx, predIndex) {
    switch (predIndex) {
      case 3:
        return this.notLineTerminator();
      default:
        throw "No predicate with index:" + predIndex;
    }
  }
  returnStatement_sempred(localctx, predIndex) {
    switch (predIndex) {
      case 4:
        return this.notLineTerminator();
      default:
        throw "No predicate with index:" + predIndex;
    }
  }
  yieldStatement_sempred(localctx, predIndex) {
    switch (predIndex) {
      case 5:
        return this.notLineTerminator();
      default:
        throw "No predicate with index:" + predIndex;
    }
  }
  throwStatement_sempred(localctx, predIndex) {
    switch (predIndex) {
      case 6:
        return this.notLineTerminator();
      default:
        throw "No predicate with index:" + predIndex;
    }
  }
  classElement_sempred(localctx, predIndex) {
    switch (predIndex) {
      case 7:
        return this.n("static");
      default:
        throw "No predicate with index:" + predIndex;
    }
  }
  singleExpression_sempred(localctx, predIndex) {
    switch (predIndex) {
      case 8:
        return this.precpred(this._ctx, 46);
      case 9:
        return this.precpred(this._ctx, 27);
      case 10:
        return this.precpred(this._ctx, 26);
      case 11:
        return this.precpred(this._ctx, 25);
      case 12:
        return this.precpred(this._ctx, 24);
      case 13:
        return this.precpred(this._ctx, 23);
      case 14:
        return this.precpred(this._ctx, 22);
      case 15:
        return this.precpred(this._ctx, 21);
      case 16:
        return this.precpred(this._ctx, 20);
      case 17:
        return this.precpred(this._ctx, 19);
      case 18:
        return this.precpred(this._ctx, 18);
      case 19:
        return this.precpred(this._ctx, 17);
      case 20:
        return this.precpred(this._ctx, 16);
      case 21:
        return this.precpred(this._ctx, 15);
      case 22:
        return this.precpred(this._ctx, 14);
      case 23:
        return this.precpred(this._ctx, 13);
      case 24:
        return this.precpred(this._ctx, 12);
      case 25:
        return this.precpred(this._ctx, 11);
      case 26:
        return this.precpred(this._ctx, 45);
      case 27:
        return this.precpred(this._ctx, 44);
      case 28:
        return this.precpred(this._ctx, 41);
      case 29:
        return this.precpred(this._ctx, 39);
      case 30:
        return this.notLineTerminator();
      case 31:
        return this.precpred(this._ctx, 38);
      case 32:
        return this.notLineTerminator();
      case 33:
        return this.precpred(this._ctx, 9);
      default:
        throw "No predicate with index:" + predIndex;
    }
  }
  getter_sempred(localctx, predIndex) {
    switch (predIndex) {
      case 34:
        return this.n("get");
      default:
        throw "No predicate with index:" + predIndex;
    }
  }
  setter_sempred(localctx, predIndex) {
    switch (predIndex) {
      case 35:
        return this.n("set");
      default:
        throw "No predicate with index:" + predIndex;
    }
  }
  eos_sempred(localctx, predIndex) {
    switch (predIndex) {
      case 36:
        return this.lineTerminatorAhead();
      case 37:
        return this.closeBrace();
      default:
        throw "No predicate with index:" + predIndex;
    }
  }
  program() {
    let localctx = new ProgramContext(this, this._ctx, this.state);
    this.enterRule(localctx, 0, JavaScriptParser.RULE_program);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 155;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 0, this._ctx);
      if (la_ === 1) {
        this.state = 154;
        this.sourceElements();
      }
      this.state = 157;
      this.match(JavaScriptParser.EOF);
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  sourceElement() {
    let localctx = new SourceElementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 2, JavaScriptParser.RULE_sourceElement);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 159;
      this.statement();
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  statement() {
    let localctx = new StatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 4, JavaScriptParser.RULE_statement);
    try {
      this.state = 181;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 1, this._ctx);
      switch (la_) {
        case 1:
          this.enterOuterAlt(localctx, 1);
          this.state = 161;
          this.block();
          break;
        case 2:
          this.enterOuterAlt(localctx, 2);
          this.state = 162;
          this.variableStatement();
          break;
        case 3:
          this.enterOuterAlt(localctx, 3);
          this.state = 163;
          this.importStatement();
          break;
        case 4:
          this.enterOuterAlt(localctx, 4);
          this.state = 164;
          this.exportStatement();
          break;
        case 5:
          this.enterOuterAlt(localctx, 5);
          this.state = 165;
          this.emptyStatement_();
          break;
        case 6:
          this.enterOuterAlt(localctx, 6);
          this.state = 166;
          this.classDeclaration();
          break;
        case 7:
          this.enterOuterAlt(localctx, 7);
          this.state = 167;
          this.expressionStatement();
          break;
        case 8:
          this.enterOuterAlt(localctx, 8);
          this.state = 168;
          this.ifStatement();
          break;
        case 9:
          this.enterOuterAlt(localctx, 9);
          this.state = 169;
          this.iterationStatement();
          break;
        case 10:
          this.enterOuterAlt(localctx, 10);
          this.state = 170;
          this.continueStatement();
          break;
        case 11:
          this.enterOuterAlt(localctx, 11);
          this.state = 171;
          this.breakStatement();
          break;
        case 12:
          this.enterOuterAlt(localctx, 12);
          this.state = 172;
          this.returnStatement();
          break;
        case 13:
          this.enterOuterAlt(localctx, 13);
          this.state = 173;
          this.yieldStatement();
          break;
        case 14:
          this.enterOuterAlt(localctx, 14);
          this.state = 174;
          this.withStatement();
          break;
        case 15:
          this.enterOuterAlt(localctx, 15);
          this.state = 175;
          this.labelledStatement();
          break;
        case 16:
          this.enterOuterAlt(localctx, 16);
          this.state = 176;
          this.switchStatement();
          break;
        case 17:
          this.enterOuterAlt(localctx, 17);
          this.state = 177;
          this.throwStatement();
          break;
        case 18:
          this.enterOuterAlt(localctx, 18);
          this.state = 178;
          this.tryStatement();
          break;
        case 19:
          this.enterOuterAlt(localctx, 19);
          this.state = 179;
          this.debuggerStatement();
          break;
        case 20:
          this.enterOuterAlt(localctx, 20);
          this.state = 180;
          this.functionDeclaration();
          break;
      }
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  block() {
    let localctx = new BlockContext(this, this._ctx, this.state);
    this.enterRule(localctx, 6, JavaScriptParser.RULE_block);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 183;
      this.match(JavaScriptParser.OpenBrace);
      this.state = 185;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 2, this._ctx);
      if (la_ === 1) {
        this.state = 184;
        this.statementList();
      }
      this.state = 187;
      this.match(JavaScriptParser.CloseBrace);
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  statementList() {
    let localctx = new StatementListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 8, JavaScriptParser.RULE_statementList);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 190;
      this._errHandler.sync(this);
      var _alt = 1;
      do {
        switch (_alt) {
          case 1:
            this.state = 189;
            this.statement();
            break;
          default:
            throw new _antlr.default.error.NoViableAltException(this);
        }
        this.state = 192;
        this._errHandler.sync(this);
        _alt = this._interp.adaptivePredict(this._input, 3, this._ctx);
      } while (_alt != 2 && _alt != _antlr.default.atn.ATN.INVALID_ALT_NUMBER);
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  importStatement() {
    let localctx = new ImportStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 10, JavaScriptParser.RULE_importStatement);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 194;
      this.match(JavaScriptParser.Import);
      this.state = 195;
      this.importFromBlock();
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  importFromBlock() {
    let localctx = new ImportFromBlockContext(this, this._ctx, this.state);
    this.enterRule(localctx, 12, JavaScriptParser.RULE_importFromBlock);
    try {
      this.state = 209;
      this._errHandler.sync(this);
      switch (this._input.LA(1)) {
        case 7:
        case 24:
        case 59:
        case 60:
        case 70:
        case 71:
        case 72:
        case 73:
        case 74:
        case 75:
        case 76:
        case 77:
        case 78:
        case 79:
        case 80:
        case 81:
        case 82:
        case 83:
        case 84:
        case 85:
        case 86:
        case 87:
        case 88:
        case 89:
        case 90:
        case 91:
        case 92:
        case 93:
        case 94:
        case 95:
        case 96:
        case 97:
        case 98:
        case 99:
        case 100:
        case 101:
        case 102:
        case 103:
        case 104:
        case 105:
        case 106:
        case 107:
        case 108:
        case 109:
        case 110:
        case 111:
        case 112:
        case 113:
        case 114:
        case 115:
        case 116:
        case 117:
          this.enterOuterAlt(localctx, 1);
          this.state = 198;
          this._errHandler.sync(this);
          var la_ = this._interp.adaptivePredict(this._input, 4, this._ctx);
          if (la_ === 1) {
            this.state = 197;
            this.importDefault();
          }
          this.state = 202;
          this._errHandler.sync(this);
          switch (this._input.LA(1)) {
            case 24:
            case 59:
            case 60:
            case 70:
            case 71:
            case 72:
            case 73:
            case 74:
            case 75:
            case 76:
            case 77:
            case 78:
            case 79:
            case 80:
            case 81:
            case 82:
            case 83:
            case 84:
            case 85:
            case 86:
            case 87:
            case 88:
            case 89:
            case 90:
            case 91:
            case 92:
            case 93:
            case 94:
            case 95:
            case 96:
            case 97:
            case 98:
            case 99:
            case 100:
            case 101:
            case 102:
            case 103:
            case 104:
            case 105:
            case 106:
            case 107:
            case 108:
            case 109:
            case 110:
            case 111:
            case 112:
            case 113:
            case 114:
            case 115:
            case 116:
            case 117:
              this.state = 200;
              this.importNamespace();
              break;
            case 7:
              this.state = 201;
              this.moduleItems();
              break;
            default:
              throw new _antlr.default.error.NoViableAltException(this);
          }
          this.state = 204;
          this.importFrom();
          this.state = 205;
          this.eos();
          break;
        case 118:
          this.enterOuterAlt(localctx, 2);
          this.state = 207;
          this.match(JavaScriptParser.StringLiteral);
          this.state = 208;
          this.eos();
          break;
        default:
          throw new _antlr.default.error.NoViableAltException(this);
      }
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  moduleItems() {
    let localctx = new ModuleItemsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 14, JavaScriptParser.RULE_moduleItems);
    var _la = 0; // Token type
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 211;
      this.match(JavaScriptParser.OpenBrace);
      this.state = 217;
      this._errHandler.sync(this);
      var _alt = this._interp.adaptivePredict(this._input, 7, this._ctx);
      while (_alt != 2 && _alt != _antlr.default.atn.ATN.INVALID_ALT_NUMBER) {
        if (_alt === 1) {
          this.state = 212;
          this.aliasName();
          this.state = 213;
          this.match(JavaScriptParser.Comma);
        }
        this.state = 219;
        this._errHandler.sync(this);
        _alt = this._interp.adaptivePredict(this._input, 7, this._ctx);
      }
      this.state = 224;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if ((_la - 59 & ~0x1f) == 0 && (1 << _la - 59 & 4294965251) !== 0 || (_la - 91 & ~0x1f) == 0 && (1 << _la - 91 & 134217727) !== 0) {
        this.state = 220;
        this.aliasName();
        this.state = 222;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if (_la === 11) {
          this.state = 221;
          this.match(JavaScriptParser.Comma);
        }
      }
      this.state = 226;
      this.match(JavaScriptParser.CloseBrace);
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  importDefault() {
    let localctx = new ImportDefaultContext(this, this._ctx, this.state);
    this.enterRule(localctx, 16, JavaScriptParser.RULE_importDefault);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 228;
      this.aliasName();
      this.state = 229;
      this.match(JavaScriptParser.Comma);
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  importNamespace() {
    let localctx = new ImportNamespaceContext(this, this._ctx, this.state);
    this.enterRule(localctx, 18, JavaScriptParser.RULE_importNamespace);
    var _la = 0; // Token type
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 233;
      this._errHandler.sync(this);
      switch (this._input.LA(1)) {
        case 24:
          this.state = 231;
          this.match(JavaScriptParser.Multiply);
          break;
        case 59:
        case 60:
        case 70:
        case 71:
        case 72:
        case 73:
        case 74:
        case 75:
        case 76:
        case 77:
        case 78:
        case 79:
        case 80:
        case 81:
        case 82:
        case 83:
        case 84:
        case 85:
        case 86:
        case 87:
        case 88:
        case 89:
        case 90:
        case 91:
        case 92:
        case 93:
        case 94:
        case 95:
        case 96:
        case 97:
        case 98:
        case 99:
        case 100:
        case 101:
        case 102:
        case 103:
        case 104:
        case 105:
        case 106:
        case 107:
        case 108:
        case 109:
        case 110:
        case 111:
        case 112:
        case 113:
        case 114:
        case 115:
        case 116:
        case 117:
          this.state = 232;
          this.identifierName();
          break;
        default:
          throw new _antlr.default.error.NoViableAltException(this);
      }
      this.state = 237;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === 96) {
        this.state = 235;
        this.match(JavaScriptParser.As);
        this.state = 236;
        this.identifierName();
      }
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  importFrom() {
    let localctx = new ImportFromContext(this, this._ctx, this.state);
    this.enterRule(localctx, 20, JavaScriptParser.RULE_importFrom);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 239;
      this.match(JavaScriptParser.From);
      this.state = 240;
      this.match(JavaScriptParser.StringLiteral);
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  aliasName() {
    let localctx = new AliasNameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 22, JavaScriptParser.RULE_aliasName);
    var _la = 0; // Token type
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 242;
      this.identifierName();
      this.state = 245;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === 96) {
        this.state = 243;
        this.match(JavaScriptParser.As);
        this.state = 244;
        this.identifierName();
      }
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  exportStatement() {
    let localctx = new ExportStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 24, JavaScriptParser.RULE_exportStatement);
    try {
      this.state = 259;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 14, this._ctx);
      switch (la_) {
        case 1:
          localctx = new ExportDeclarationContext(this, localctx);
          this.enterOuterAlt(localctx, 1);
          this.state = 247;
          this.match(JavaScriptParser.Export);
          this.state = 250;
          this._errHandler.sync(this);
          var la_ = this._interp.adaptivePredict(this._input, 13, this._ctx);
          switch (la_) {
            case 1:
              this.state = 248;
              this.exportFromBlock();
              break;
            case 2:
              this.state = 249;
              this.declaration();
              break;
          }
          this.state = 252;
          this.eos();
          break;
        case 2:
          localctx = new ExportDefaultDeclarationContext(this, localctx);
          this.enterOuterAlt(localctx, 2);
          this.state = 254;
          this.match(JavaScriptParser.Export);
          this.state = 255;
          this.match(JavaScriptParser.Default);
          this.state = 256;
          this.singleExpression(0);
          this.state = 257;
          this.eos();
          break;
      }
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  exportFromBlock() {
    let localctx = new ExportFromBlockContext(this, this._ctx, this.state);
    this.enterRule(localctx, 26, JavaScriptParser.RULE_exportFromBlock);
    try {
      this.state = 271;
      this._errHandler.sync(this);
      switch (this._input.LA(1)) {
        case 24:
        case 59:
        case 60:
        case 70:
        case 71:
        case 72:
        case 73:
        case 74:
        case 75:
        case 76:
        case 77:
        case 78:
        case 79:
        case 80:
        case 81:
        case 82:
        case 83:
        case 84:
        case 85:
        case 86:
        case 87:
        case 88:
        case 89:
        case 90:
        case 91:
        case 92:
        case 93:
        case 94:
        case 95:
        case 96:
        case 97:
        case 98:
        case 99:
        case 100:
        case 101:
        case 102:
        case 103:
        case 104:
        case 105:
        case 106:
        case 107:
        case 108:
        case 109:
        case 110:
        case 111:
        case 112:
        case 113:
        case 114:
        case 115:
        case 116:
        case 117:
          this.enterOuterAlt(localctx, 1);
          this.state = 261;
          this.importNamespace();
          this.state = 262;
          this.importFrom();
          this.state = 263;
          this.eos();
          break;
        case 7:
          this.enterOuterAlt(localctx, 2);
          this.state = 265;
          this.moduleItems();
          this.state = 267;
          this._errHandler.sync(this);
          var la_ = this._interp.adaptivePredict(this._input, 15, this._ctx);
          if (la_ === 1) {
            this.state = 266;
            this.importFrom();
          }
          this.state = 269;
          this.eos();
          break;
        default:
          throw new _antlr.default.error.NoViableAltException(this);
      }
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  declaration() {
    let localctx = new DeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 28, JavaScriptParser.RULE_declaration);
    try {
      this.state = 276;
      this._errHandler.sync(this);
      switch (this._input.LA(1)) {
        case 77:
        case 102:
        case 109:
        case 110:
          this.enterOuterAlt(localctx, 1);
          this.state = 273;
          this.variableStatement();
          break;
        case 98:
          this.enterOuterAlt(localctx, 2);
          this.state = 274;
          this.classDeclaration();
          break;
        case 87:
        case 105:
          this.enterOuterAlt(localctx, 3);
          this.state = 275;
          this.functionDeclaration();
          break;
        default:
          throw new _antlr.default.error.NoViableAltException(this);
      }
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  variableStatement() {
    let localctx = new VariableStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 30, JavaScriptParser.RULE_variableStatement);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 278;
      this.variableDeclarationList();
      this.state = 279;
      this.eos();
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  variableDeclarationList() {
    let localctx = new VariableDeclarationListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 32, JavaScriptParser.RULE_variableDeclarationList);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 281;
      this.varModifier();
      this.state = 282;
      this.variableDeclaration();
      this.state = 287;
      this._errHandler.sync(this);
      var _alt = this._interp.adaptivePredict(this._input, 18, this._ctx);
      while (_alt != 2 && _alt != _antlr.default.atn.ATN.INVALID_ALT_NUMBER) {
        if (_alt === 1) {
          this.state = 283;
          this.match(JavaScriptParser.Comma);
          this.state = 284;
          this.variableDeclaration();
        }
        this.state = 289;
        this._errHandler.sync(this);
        _alt = this._interp.adaptivePredict(this._input, 18, this._ctx);
      }
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  variableDeclaration() {
    let localctx = new VariableDeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 34, JavaScriptParser.RULE_variableDeclaration);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 290;
      this.assignable();
      this.state = 293;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 19, this._ctx);
      if (la_ === 1) {
        this.state = 291;
        this.match(JavaScriptParser.Assign);
        this.state = 292;
        this.singleExpression(0);
      }
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  emptyStatement_() {
    let localctx = new EmptyStatement_Context(this, this._ctx, this.state);
    this.enterRule(localctx, 36, JavaScriptParser.RULE_emptyStatement_);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 295;
      this.match(JavaScriptParser.SemiColon);
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  expressionStatement() {
    let localctx = new ExpressionStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 38, JavaScriptParser.RULE_expressionStatement);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 297;
      if (!this.notOpenBraceAndNotFunction()) {
        throw new _antlr.default.error.FailedPredicateException(this, "this.notOpenBraceAndNotFunction()");
      }
      this.state = 298;
      this.expressionSequence();
      this.state = 299;
      this.eos();
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  ifStatement() {
    let localctx = new IfStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 40, JavaScriptParser.RULE_ifStatement);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 301;
      this.match(JavaScriptParser.If);
      this.state = 302;
      this.match(JavaScriptParser.OpenParen);
      this.state = 303;
      this.expressionSequence();
      this.state = 304;
      this.match(JavaScriptParser.CloseParen);
      this.state = 305;
      this.statement();
      this.state = 308;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 20, this._ctx);
      if (la_ === 1) {
        this.state = 306;
        this.match(JavaScriptParser.Else);
        this.state = 307;
        this.statement();
      }
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  iterationStatement() {
    let localctx = new IterationStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 42, JavaScriptParser.RULE_iterationStatement);
    var _la = 0; // Token type
    try {
      this.state = 366;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 27, this._ctx);
      switch (la_) {
        case 1:
          localctx = new DoStatementContext(this, localctx);
          this.enterOuterAlt(localctx, 1);
          this.state = 310;
          this.match(JavaScriptParser.Do);
          this.state = 311;
          this.statement();
          this.state = 312;
          this.match(JavaScriptParser.While);
          this.state = 313;
          this.match(JavaScriptParser.OpenParen);
          this.state = 314;
          this.expressionSequence();
          this.state = 315;
          this.match(JavaScriptParser.CloseParen);
          this.state = 316;
          this.eos();
          break;
        case 2:
          localctx = new WhileStatementContext(this, localctx);
          this.enterOuterAlt(localctx, 2);
          this.state = 318;
          this.match(JavaScriptParser.While);
          this.state = 319;
          this.match(JavaScriptParser.OpenParen);
          this.state = 320;
          this.expressionSequence();
          this.state = 321;
          this.match(JavaScriptParser.CloseParen);
          this.state = 322;
          this.statement();
          break;
        case 3:
          localctx = new ForStatementContext(this, localctx);
          this.enterOuterAlt(localctx, 3);
          this.state = 324;
          this.match(JavaScriptParser.For);
          this.state = 325;
          this.match(JavaScriptParser.OpenParen);
          this.state = 328;
          this._errHandler.sync(this);
          var la_ = this._interp.adaptivePredict(this._input, 21, this._ctx);
          if (la_ === 1) {
            this.state = 326;
            this.expressionSequence();
          } else if (la_ === 2) {
            this.state = 327;
            this.variableDeclarationList();
          }
          this.state = 330;
          this.match(JavaScriptParser.SemiColon);
          this.state = 332;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if ((_la & ~0x1f) == 0 && (1 << _la & 16515240) !== 0 || (_la - 59 & ~0x1f) == 0 && (1 << _la - 59 & 809650175) !== 0 || (_la - 93 & ~0x1f) == 0 && (1 << _la - 93 & 117602593) !== 0) {
            this.state = 331;
            this.expressionSequence();
          }
          this.state = 334;
          this.match(JavaScriptParser.SemiColon);
          this.state = 336;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if ((_la & ~0x1f) == 0 && (1 << _la & 16515240) !== 0 || (_la - 59 & ~0x1f) == 0 && (1 << _la - 59 & 809650175) !== 0 || (_la - 93 & ~0x1f) == 0 && (1 << _la - 93 & 117602593) !== 0) {
            this.state = 335;
            this.expressionSequence();
          }
          this.state = 338;
          this.match(JavaScriptParser.CloseParen);
          this.state = 339;
          this.statement();
          break;
        case 4:
          localctx = new ForInStatementContext(this, localctx);
          this.enterOuterAlt(localctx, 4);
          this.state = 340;
          this.match(JavaScriptParser.For);
          this.state = 341;
          this.match(JavaScriptParser.OpenParen);
          this.state = 344;
          this._errHandler.sync(this);
          var la_ = this._interp.adaptivePredict(this._input, 24, this._ctx);
          switch (la_) {
            case 1:
              this.state = 342;
              this.singleExpression(0);
              break;
            case 2:
              this.state = 343;
              this.variableDeclarationList();
              break;
          }
          this.state = 346;
          this.match(JavaScriptParser.In);
          this.state = 347;
          this.expressionSequence();
          this.state = 348;
          this.match(JavaScriptParser.CloseParen);
          this.state = 349;
          this.statement();
          break;
        case 5:
          localctx = new ForOfStatementContext(this, localctx);
          this.enterOuterAlt(localctx, 5);
          this.state = 351;
          this.match(JavaScriptParser.For);
          this.state = 353;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if (_la === 106) {
            this.state = 352;
            this.match(JavaScriptParser.Await);
          }
          this.state = 355;
          this.match(JavaScriptParser.OpenParen);
          this.state = 358;
          this._errHandler.sync(this);
          var la_ = this._interp.adaptivePredict(this._input, 26, this._ctx);
          switch (la_) {
            case 1:
              this.state = 356;
              this.singleExpression(0);
              break;
            case 2:
              this.state = 357;
              this.variableDeclarationList();
              break;
          }
          this.state = 360;
          this.identifier();
          this.state = 361;
          if (!this.p("of")) {
            throw new _antlr.default.error.FailedPredicateException(this, "this.p(\"of\")");
          }
          this.state = 362;
          this.expressionSequence();
          this.state = 363;
          this.match(JavaScriptParser.CloseParen);
          this.state = 364;
          this.statement();
          break;
      }
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  varModifier() {
    let localctx = new VarModifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 44, JavaScriptParser.RULE_varModifier);
    try {
      this.state = 371;
      this._errHandler.sync(this);
      switch (this._input.LA(1)) {
        case 77:
          this.enterOuterAlt(localctx, 1);
          this.state = 368;
          this.match(JavaScriptParser.Var);
          break;
        case 109:
        case 110:
          this.enterOuterAlt(localctx, 2);
          this.state = 369;
          this.let_();
          break;
        case 102:
          this.enterOuterAlt(localctx, 3);
          this.state = 370;
          this.match(JavaScriptParser.Const);
          break;
        default:
          throw new _antlr.default.error.NoViableAltException(this);
      }
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  continueStatement() {
    let localctx = new ContinueStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 46, JavaScriptParser.RULE_continueStatement);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 373;
      this.match(JavaScriptParser.Continue);
      this.state = 376;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 29, this._ctx);
      if (la_ === 1) {
        this.state = 374;
        if (!this.notLineTerminator()) {
          throw new _antlr.default.error.FailedPredicateException(this, "this.notLineTerminator()");
        }
        this.state = 375;
        this.identifier();
      }
      this.state = 378;
      this.eos();
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  breakStatement() {
    let localctx = new BreakStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 48, JavaScriptParser.RULE_breakStatement);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 380;
      this.match(JavaScriptParser.Break);
      this.state = 383;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 30, this._ctx);
      if (la_ === 1) {
        this.state = 381;
        if (!this.notLineTerminator()) {
          throw new _antlr.default.error.FailedPredicateException(this, "this.notLineTerminator()");
        }
        this.state = 382;
        this.identifier();
      }
      this.state = 385;
      this.eos();
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  returnStatement() {
    let localctx = new ReturnStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 50, JavaScriptParser.RULE_returnStatement);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 387;
      this.match(JavaScriptParser.Return);
      this.state = 390;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 31, this._ctx);
      if (la_ === 1) {
        this.state = 388;
        if (!this.notLineTerminator()) {
          throw new _antlr.default.error.FailedPredicateException(this, "this.notLineTerminator()");
        }
        this.state = 389;
        this.expressionSequence();
      }
      this.state = 392;
      this.eos();
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  yieldStatement() {
    let localctx = new YieldStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 52, JavaScriptParser.RULE_yieldStatement);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 394;
      this.match(JavaScriptParser.Yield);
      this.state = 397;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 32, this._ctx);
      if (la_ === 1) {
        this.state = 395;
        if (!this.notLineTerminator()) {
          throw new _antlr.default.error.FailedPredicateException(this, "this.notLineTerminator()");
        }
        this.state = 396;
        this.expressionSequence();
      }
      this.state = 399;
      this.eos();
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  withStatement() {
    let localctx = new WithStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 54, JavaScriptParser.RULE_withStatement);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 401;
      this.match(JavaScriptParser.With);
      this.state = 402;
      this.match(JavaScriptParser.OpenParen);
      this.state = 403;
      this.expressionSequence();
      this.state = 404;
      this.match(JavaScriptParser.CloseParen);
      this.state = 405;
      this.statement();
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  switchStatement() {
    let localctx = new SwitchStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 56, JavaScriptParser.RULE_switchStatement);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 407;
      this.match(JavaScriptParser.Switch);
      this.state = 408;
      this.match(JavaScriptParser.OpenParen);
      this.state = 409;
      this.expressionSequence();
      this.state = 410;
      this.match(JavaScriptParser.CloseParen);
      this.state = 411;
      this.caseBlock();
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  caseBlock() {
    let localctx = new CaseBlockContext(this, this._ctx, this.state);
    this.enterRule(localctx, 58, JavaScriptParser.RULE_caseBlock);
    var _la = 0; // Token type
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 413;
      this.match(JavaScriptParser.OpenBrace);
      this.state = 415;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === 74) {
        this.state = 414;
        this.caseClauses();
      }
      this.state = 421;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === 90) {
        this.state = 417;
        this.defaultClause();
        this.state = 419;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if (_la === 74) {
          this.state = 418;
          this.caseClauses();
        }
      }
      this.state = 423;
      this.match(JavaScriptParser.CloseBrace);
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  caseClauses() {
    let localctx = new CaseClausesContext(this, this._ctx, this.state);
    this.enterRule(localctx, 60, JavaScriptParser.RULE_caseClauses);
    var _la = 0; // Token type
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 426;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      do {
        this.state = 425;
        this.caseClause();
        this.state = 428;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
      } while (_la === 74);
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  caseClause() {
    let localctx = new CaseClauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 62, JavaScriptParser.RULE_caseClause);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 430;
      this.match(JavaScriptParser.Case);
      this.state = 431;
      this.expressionSequence();
      this.state = 432;
      this.match(JavaScriptParser.Colon);
      this.state = 434;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 37, this._ctx);
      if (la_ === 1) {
        this.state = 433;
        this.statementList();
      }
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  defaultClause() {
    let localctx = new DefaultClauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 64, JavaScriptParser.RULE_defaultClause);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 436;
      this.match(JavaScriptParser.Default);
      this.state = 437;
      this.match(JavaScriptParser.Colon);
      this.state = 439;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 38, this._ctx);
      if (la_ === 1) {
        this.state = 438;
        this.statementList();
      }
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  labelledStatement() {
    let localctx = new LabelledStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 66, JavaScriptParser.RULE_labelledStatement);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 441;
      this.identifier();
      this.state = 442;
      this.match(JavaScriptParser.Colon);
      this.state = 443;
      this.statement();
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  throwStatement() {
    let localctx = new ThrowStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 68, JavaScriptParser.RULE_throwStatement);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 445;
      this.match(JavaScriptParser.Throw);
      this.state = 446;
      if (!this.notLineTerminator()) {
        throw new _antlr.default.error.FailedPredicateException(this, "this.notLineTerminator()");
      }
      this.state = 447;
      this.expressionSequence();
      this.state = 448;
      this.eos();
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  tryStatement() {
    let localctx = new TryStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 70, JavaScriptParser.RULE_tryStatement);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 450;
      this.match(JavaScriptParser.Try);
      this.state = 451;
      this.block();
      this.state = 457;
      this._errHandler.sync(this);
      switch (this._input.LA(1)) {
        case 78:
          this.state = 452;
          this.catchProduction();
          this.state = 454;
          this._errHandler.sync(this);
          var la_ = this._interp.adaptivePredict(this._input, 39, this._ctx);
          if (la_ === 1) {
            this.state = 453;
            this.finallyProduction();
          }
          break;
        case 79:
          this.state = 456;
          this.finallyProduction();
          break;
        default:
          throw new _antlr.default.error.NoViableAltException(this);
      }
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  catchProduction() {
    let localctx = new CatchProductionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 72, JavaScriptParser.RULE_catchProduction);
    var _la = 0; // Token type
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 459;
      this.match(JavaScriptParser.Catch);
      this.state = 465;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === 5) {
        this.state = 460;
        this.match(JavaScriptParser.OpenParen);
        this.state = 462;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if (_la === 3 || _la === 7 || (_la - 105 & ~0x1f) == 0 && (1 << _la - 105 & 4129) !== 0) {
          this.state = 461;
          this.assignable();
        }
        this.state = 464;
        this.match(JavaScriptParser.CloseParen);
      }
      this.state = 467;
      this.block();
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  finallyProduction() {
    let localctx = new FinallyProductionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 74, JavaScriptParser.RULE_finallyProduction);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 469;
      this.match(JavaScriptParser.Finally);
      this.state = 470;
      this.block();
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  debuggerStatement() {
    let localctx = new DebuggerStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 76, JavaScriptParser.RULE_debuggerStatement);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 472;
      this.match(JavaScriptParser.Debugger);
      this.state = 473;
      this.eos();
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  functionDeclaration() {
    let localctx = new FunctionDeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 78, JavaScriptParser.RULE_functionDeclaration);
    var _la = 0; // Token type
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 476;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === 105) {
        this.state = 475;
        this.match(JavaScriptParser.Async);
      }
      this.state = 478;
      this.match(JavaScriptParser.FunctionObject);
      this.state = 480;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === 24) {
        this.state = 479;
        this.match(JavaScriptParser.Multiply);
      }
      this.state = 482;
      this.identifier();
      this.state = 483;
      this.match(JavaScriptParser.OpenParen);
      this.state = 485;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if ((_la & ~0x1f) == 0 && (1 << _la & 65672) !== 0 || (_la - 105 & ~0x1f) == 0 && (1 << _la - 105 & 4129) !== 0) {
        this.state = 484;
        this.formalParameterList();
      }
      this.state = 487;
      this.match(JavaScriptParser.CloseParen);
      this.state = 488;
      this.functionBody();
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  classDeclaration() {
    let localctx = new ClassDeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 80, JavaScriptParser.RULE_classDeclaration);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 490;
      this.match(JavaScriptParser.Class);
      this.state = 491;
      this.identifier();
      this.state = 492;
      this.classTail();
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  classTail() {
    let localctx = new ClassTailContext(this, this._ctx, this.state);
    this.enterRule(localctx, 82, JavaScriptParser.RULE_classTail);
    var _la = 0; // Token type
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 496;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === 100) {
        this.state = 494;
        this.match(JavaScriptParser.Extends);
        this.state = 495;
        this.singleExpression(0);
      }
      this.state = 498;
      this.match(JavaScriptParser.OpenBrace);
      this.state = 502;
      this._errHandler.sync(this);
      var _alt = this._interp.adaptivePredict(this._input, 47, this._ctx);
      while (_alt != 2 && _alt != _antlr.default.atn.ATN.INVALID_ALT_NUMBER) {
        if (_alt === 1) {
          this.state = 499;
          this.classElement();
        }
        this.state = 504;
        this._errHandler.sync(this);
        _alt = this._interp.adaptivePredict(this._input, 47, this._ctx);
      }
      this.state = 505;
      this.match(JavaScriptParser.CloseBrace);
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  classElement() {
    let localctx = new ClassElementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 84, JavaScriptParser.RULE_classElement);
    var _la = 0; // Token type
    try {
      this.state = 532;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 52, this._ctx);
      switch (la_) {
        case 1:
          this.enterOuterAlt(localctx, 1);
          this.state = 513;
          this._errHandler.sync(this);
          var _alt = this._interp.adaptivePredict(this._input, 49, this._ctx);
          while (_alt != 2 && _alt != _antlr.default.atn.ATN.INVALID_ALT_NUMBER) {
            if (_alt === 1) {
              this.state = 511;
              this._errHandler.sync(this);
              var la_ = this._interp.adaptivePredict(this._input, 48, this._ctx);
              switch (la_) {
                case 1:
                  this.state = 507;
                  this.match(JavaScriptParser.Static);
                  break;
                case 2:
                  this.state = 508;
                  if (!this.n("static")) {
                    throw new _antlr.default.error.FailedPredicateException(this, "this.n(\"static\")");
                  }
                  this.state = 509;
                  this.identifier();
                  break;
                case 3:
                  this.state = 510;
                  this.match(JavaScriptParser.Async);
                  break;
              }
            }
            this.state = 515;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input, 49, this._ctx);
          }
          this.state = 522;
          this._errHandler.sync(this);
          var la_ = this._interp.adaptivePredict(this._input, 50, this._ctx);
          switch (la_) {
            case 1:
              this.state = 516;
              this.methodDefinition();
              break;
            case 2:
              this.state = 517;
              this.assignable();
              this.state = 518;
              this.match(JavaScriptParser.Assign);
              this.state = 519;
              this.objectLiteral();
              this.state = 520;
              this.match(JavaScriptParser.SemiColon);
              break;
          }
          break;
        case 2:
          this.enterOuterAlt(localctx, 2);
          this.state = 524;
          this.emptyStatement_();
          break;
        case 3:
          this.enterOuterAlt(localctx, 3);
          this.state = 526;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if (_la === 29) {
            this.state = 525;
            this.match(JavaScriptParser.Hashtag);
          }
          this.state = 528;
          this.propertyName();
          this.state = 529;
          this.match(JavaScriptParser.Assign);
          this.state = 530;
          this.singleExpression(0);
          break;
      }
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  methodDefinition() {
    let localctx = new MethodDefinitionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 86, JavaScriptParser.RULE_methodDefinition);
    var _la = 0; // Token type
    try {
      this.state = 573;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 61, this._ctx);
      switch (la_) {
        case 1:
          this.enterOuterAlt(localctx, 1);
          this.state = 535;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if (_la === 24) {
            this.state = 534;
            this.match(JavaScriptParser.Multiply);
          }
          this.state = 538;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if (_la === 29) {
            this.state = 537;
            this.match(JavaScriptParser.Hashtag);
          }
          this.state = 540;
          this.propertyName();
          this.state = 541;
          this.match(JavaScriptParser.OpenParen);
          this.state = 543;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if ((_la & ~0x1f) == 0 && (1 << _la & 65672) !== 0 || (_la - 105 & ~0x1f) == 0 && (1 << _la - 105 & 4129) !== 0) {
            this.state = 542;
            this.formalParameterList();
          }
          this.state = 545;
          this.match(JavaScriptParser.CloseParen);
          this.state = 546;
          this.functionBody();
          break;
        case 2:
          this.enterOuterAlt(localctx, 2);
          this.state = 549;
          this._errHandler.sync(this);
          var la_ = this._interp.adaptivePredict(this._input, 56, this._ctx);
          if (la_ === 1) {
            this.state = 548;
            this.match(JavaScriptParser.Multiply);
          }
          this.state = 552;
          this._errHandler.sync(this);
          var la_ = this._interp.adaptivePredict(this._input, 57, this._ctx);
          if (la_ === 1) {
            this.state = 551;
            this.match(JavaScriptParser.Hashtag);
          }
          this.state = 554;
          this.getter();
          this.state = 555;
          this.match(JavaScriptParser.OpenParen);
          this.state = 556;
          this.match(JavaScriptParser.CloseParen);
          this.state = 557;
          this.functionBody();
          break;
        case 3:
          this.enterOuterAlt(localctx, 3);
          this.state = 560;
          this._errHandler.sync(this);
          var la_ = this._interp.adaptivePredict(this._input, 58, this._ctx);
          if (la_ === 1) {
            this.state = 559;
            this.match(JavaScriptParser.Multiply);
          }
          this.state = 563;
          this._errHandler.sync(this);
          var la_ = this._interp.adaptivePredict(this._input, 59, this._ctx);
          if (la_ === 1) {
            this.state = 562;
            this.match(JavaScriptParser.Hashtag);
          }
          this.state = 565;
          this.setter();
          this.state = 566;
          this.match(JavaScriptParser.OpenParen);
          this.state = 568;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if ((_la & ~0x1f) == 0 && (1 << _la & 65672) !== 0 || (_la - 105 & ~0x1f) == 0 && (1 << _la - 105 & 4129) !== 0) {
            this.state = 567;
            this.formalParameterList();
          }
          this.state = 570;
          this.match(JavaScriptParser.CloseParen);
          this.state = 571;
          this.functionBody();
          break;
      }
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  formalParameterList() {
    let localctx = new FormalParameterListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 88, JavaScriptParser.RULE_formalParameterList);
    var _la = 0; // Token type
    try {
      this.state = 588;
      this._errHandler.sync(this);
      switch (this._input.LA(1)) {
        case 3:
        case 7:
        case 105:
        case 110:
        case 117:
          this.enterOuterAlt(localctx, 1);
          this.state = 575;
          this.formalParameterArg();
          this.state = 580;
          this._errHandler.sync(this);
          var _alt = this._interp.adaptivePredict(this._input, 62, this._ctx);
          while (_alt != 2 && _alt != _antlr.default.atn.ATN.INVALID_ALT_NUMBER) {
            if (_alt === 1) {
              this.state = 576;
              this.match(JavaScriptParser.Comma);
              this.state = 577;
              this.formalParameterArg();
            }
            this.state = 582;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input, 62, this._ctx);
          }
          this.state = 585;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if (_la === 11) {
            this.state = 583;
            this.match(JavaScriptParser.Comma);
            this.state = 584;
            this.lastFormalParameterArg();
          }
          break;
        case 16:
          this.enterOuterAlt(localctx, 2);
          this.state = 587;
          this.lastFormalParameterArg();
          break;
        default:
          throw new _antlr.default.error.NoViableAltException(this);
      }
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  formalParameterArg() {
    let localctx = new FormalParameterArgContext(this, this._ctx, this.state);
    this.enterRule(localctx, 90, JavaScriptParser.RULE_formalParameterArg);
    var _la = 0; // Token type
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 590;
      this.assignable();
      this.state = 593;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === 12) {
        this.state = 591;
        this.match(JavaScriptParser.Assign);
        this.state = 592;
        this.singleExpression(0);
      }
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  lastFormalParameterArg() {
    let localctx = new LastFormalParameterArgContext(this, this._ctx, this.state);
    this.enterRule(localctx, 92, JavaScriptParser.RULE_lastFormalParameterArg);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 595;
      this.match(JavaScriptParser.Ellipsis);
      this.state = 596;
      this.singleExpression(0);
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  functionBody() {
    let localctx = new FunctionBodyContext(this, this._ctx, this.state);
    this.enterRule(localctx, 94, JavaScriptParser.RULE_functionBody);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 598;
      this.match(JavaScriptParser.OpenBrace);
      this.state = 600;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 66, this._ctx);
      if (la_ === 1) {
        this.state = 599;
        this.sourceElements();
      }
      this.state = 602;
      this.match(JavaScriptParser.CloseBrace);
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  sourceElements() {
    let localctx = new SourceElementsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 96, JavaScriptParser.RULE_sourceElements);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 605;
      this._errHandler.sync(this);
      var _alt = 1;
      do {
        switch (_alt) {
          case 1:
            this.state = 604;
            this.sourceElement();
            break;
          default:
            throw new _antlr.default.error.NoViableAltException(this);
        }
        this.state = 607;
        this._errHandler.sync(this);
        _alt = this._interp.adaptivePredict(this._input, 67, this._ctx);
      } while (_alt != 2 && _alt != _antlr.default.atn.ATN.INVALID_ALT_NUMBER);
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  arrayLiteral() {
    let localctx = new ArrayLiteralContext(this, this._ctx, this.state);
    this.enterRule(localctx, 98, JavaScriptParser.RULE_arrayLiteral);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 609;
      this.match(JavaScriptParser.OpenBracket);
      this.state = 610;
      this.elementList();
      this.state = 611;
      this.match(JavaScriptParser.CloseBracket);
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  elementList() {
    let localctx = new ElementListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 100, JavaScriptParser.RULE_elementList);
    var _la = 0; // Token type
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 616;
      this._errHandler.sync(this);
      var _alt = this._interp.adaptivePredict(this._input, 68, this._ctx);
      while (_alt != 2 && _alt != _antlr.default.atn.ATN.INVALID_ALT_NUMBER) {
        if (_alt === 1) {
          this.state = 613;
          this.match(JavaScriptParser.Comma);
        }
        this.state = 618;
        this._errHandler.sync(this);
        _alt = this._interp.adaptivePredict(this._input, 68, this._ctx);
      }
      this.state = 620;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if ((_la & ~0x1f) == 0 && (1 << _la & 16580776) !== 0 || (_la - 59 & ~0x1f) == 0 && (1 << _la - 59 & 809650175) !== 0 || (_la - 93 & ~0x1f) == 0 && (1 << _la - 93 & 117602593) !== 0) {
        this.state = 619;
        this.arrayElement();
      }
      this.state = 630;
      this._errHandler.sync(this);
      var _alt = this._interp.adaptivePredict(this._input, 71, this._ctx);
      while (_alt != 2 && _alt != _antlr.default.atn.ATN.INVALID_ALT_NUMBER) {
        if (_alt === 1) {
          this.state = 623;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          do {
            this.state = 622;
            this.match(JavaScriptParser.Comma);
            this.state = 625;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
          } while (_la === 11);
          this.state = 627;
          this.arrayElement();
        }
        this.state = 632;
        this._errHandler.sync(this);
        _alt = this._interp.adaptivePredict(this._input, 71, this._ctx);
      }
      this.state = 636;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      while (_la === 11) {
        this.state = 633;
        this.match(JavaScriptParser.Comma);
        this.state = 638;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
      }
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  arrayElement() {
    let localctx = new ArrayElementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 102, JavaScriptParser.RULE_arrayElement);
    var _la = 0; // Token type
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 640;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === 16) {
        this.state = 639;
        this.match(JavaScriptParser.Ellipsis);
      }
      this.state = 642;
      this.singleExpression(0);
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  propertyAssignment() {
    let localctx = new PropertyAssignmentContext(this, this._ctx, this.state);
    this.enterRule(localctx, 104, JavaScriptParser.RULE_propertyAssignment);
    var _la = 0; // Token type
    try {
      this.state = 683;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 78, this._ctx);
      switch (la_) {
        case 1:
          localctx = new PropertyExpressionAssignmentContext(this, localctx);
          this.enterOuterAlt(localctx, 1);
          this.state = 644;
          this.propertyName();
          this.state = 645;
          this.match(JavaScriptParser.Colon);
          this.state = 646;
          this.singleExpression(0);
          break;
        case 2:
          localctx = new ComputedPropertyExpressionAssignmentContext(this, localctx);
          this.enterOuterAlt(localctx, 2);
          this.state = 648;
          this.match(JavaScriptParser.OpenBracket);
          this.state = 649;
          this.singleExpression(0);
          this.state = 650;
          this.match(JavaScriptParser.CloseBracket);
          this.state = 651;
          this.match(JavaScriptParser.Colon);
          this.state = 652;
          this.singleExpression(0);
          break;
        case 3:
          localctx = new FunctionPropertyContext(this, localctx);
          this.enterOuterAlt(localctx, 3);
          this.state = 655;
          this._errHandler.sync(this);
          var la_ = this._interp.adaptivePredict(this._input, 74, this._ctx);
          if (la_ === 1) {
            this.state = 654;
            this.match(JavaScriptParser.Async);
          }
          this.state = 658;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if (_la === 24) {
            this.state = 657;
            this.match(JavaScriptParser.Multiply);
          }
          this.state = 660;
          this.propertyName();
          this.state = 661;
          this.match(JavaScriptParser.OpenParen);
          this.state = 663;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if ((_la & ~0x1f) == 0 && (1 << _la & 65672) !== 0 || (_la - 105 & ~0x1f) == 0 && (1 << _la - 105 & 4129) !== 0) {
            this.state = 662;
            this.formalParameterList();
          }
          this.state = 665;
          this.match(JavaScriptParser.CloseParen);
          this.state = 666;
          this.functionBody();
          break;
        case 4:
          localctx = new PropertyGetterContext(this, localctx);
          this.enterOuterAlt(localctx, 4);
          this.state = 668;
          this.getter();
          this.state = 669;
          this.match(JavaScriptParser.OpenParen);
          this.state = 670;
          this.match(JavaScriptParser.CloseParen);
          this.state = 671;
          this.functionBody();
          break;
        case 5:
          localctx = new PropertySetterContext(this, localctx);
          this.enterOuterAlt(localctx, 5);
          this.state = 673;
          this.setter();
          this.state = 674;
          this.match(JavaScriptParser.OpenParen);
          this.state = 675;
          this.formalParameterArg();
          this.state = 676;
          this.match(JavaScriptParser.CloseParen);
          this.state = 677;
          this.functionBody();
          break;
        case 6:
          localctx = new PropertyShorthandContext(this, localctx);
          this.enterOuterAlt(localctx, 6);
          this.state = 680;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if (_la === 16) {
            this.state = 679;
            this.match(JavaScriptParser.Ellipsis);
          }
          this.state = 682;
          this.singleExpression(0);
          break;
      }
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  propertyName() {
    let localctx = new PropertyNameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 106, JavaScriptParser.RULE_propertyName);
    try {
      this.state = 692;
      this._errHandler.sync(this);
      switch (this._input.LA(1)) {
        case 59:
        case 60:
        case 70:
        case 71:
        case 72:
        case 73:
        case 74:
        case 75:
        case 76:
        case 77:
        case 78:
        case 79:
        case 80:
        case 81:
        case 82:
        case 83:
        case 84:
        case 85:
        case 86:
        case 87:
        case 88:
        case 89:
        case 90:
        case 91:
        case 92:
        case 93:
        case 94:
        case 95:
        case 96:
        case 97:
        case 98:
        case 99:
        case 100:
        case 101:
        case 102:
        case 103:
        case 104:
        case 105:
        case 106:
        case 107:
        case 108:
        case 109:
        case 110:
        case 111:
        case 112:
        case 113:
        case 114:
        case 115:
        case 116:
        case 117:
          this.enterOuterAlt(localctx, 1);
          this.state = 685;
          this.identifierName();
          break;
        case 118:
          this.enterOuterAlt(localctx, 2);
          this.state = 686;
          this.match(JavaScriptParser.StringLiteral);
          break;
        case 61:
        case 62:
        case 63:
        case 64:
        case 65:
          this.enterOuterAlt(localctx, 3);
          this.state = 687;
          this.numericLiteral();
          break;
        case 3:
          this.enterOuterAlt(localctx, 4);
          this.state = 688;
          this.match(JavaScriptParser.OpenBracket);
          this.state = 689;
          this.singleExpression(0);
          this.state = 690;
          this.match(JavaScriptParser.CloseBracket);
          break;
        default:
          throw new _antlr.default.error.NoViableAltException(this);
      }
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  arguments() {
    let localctx = new ArgumentsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 108, JavaScriptParser.RULE_arguments);
    var _la = 0; // Token type
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 694;
      this.match(JavaScriptParser.OpenParen);
      this.state = 706;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if ((_la & ~0x1f) == 0 && (1 << _la & 16580776) !== 0 || (_la - 59 & ~0x1f) == 0 && (1 << _la - 59 & 809650175) !== 0 || (_la - 93 & ~0x1f) == 0 && (1 << _la - 93 & 117602593) !== 0) {
        this.state = 695;
        this.argument();
        this.state = 700;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input, 80, this._ctx);
        while (_alt != 2 && _alt != _antlr.default.atn.ATN.INVALID_ALT_NUMBER) {
          if (_alt === 1) {
            this.state = 696;
            this.match(JavaScriptParser.Comma);
            this.state = 697;
            this.argument();
          }
          this.state = 702;
          this._errHandler.sync(this);
          _alt = this._interp.adaptivePredict(this._input, 80, this._ctx);
        }
        this.state = 704;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if (_la === 11) {
          this.state = 703;
          this.match(JavaScriptParser.Comma);
        }
      }
      this.state = 708;
      this.match(JavaScriptParser.CloseParen);
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  argument() {
    let localctx = new ArgumentContext(this, this._ctx, this.state);
    this.enterRule(localctx, 110, JavaScriptParser.RULE_argument);
    var _la = 0; // Token type
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 711;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === 16) {
        this.state = 710;
        this.match(JavaScriptParser.Ellipsis);
      }
      this.state = 715;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 84, this._ctx);
      switch (la_) {
        case 1:
          this.state = 713;
          this.singleExpression(0);
          break;
        case 2:
          this.state = 714;
          this.identifier();
          break;
      }
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  expressionSequence() {
    let localctx = new ExpressionSequenceContext(this, this._ctx, this.state);
    this.enterRule(localctx, 112, JavaScriptParser.RULE_expressionSequence);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 717;
      this.singleExpression(0);
      this.state = 722;
      this._errHandler.sync(this);
      var _alt = this._interp.adaptivePredict(this._input, 85, this._ctx);
      while (_alt != 2 && _alt != _antlr.default.atn.ATN.INVALID_ALT_NUMBER) {
        if (_alt === 1) {
          this.state = 718;
          this.match(JavaScriptParser.Comma);
          this.state = 719;
          this.singleExpression(0);
        }
        this.state = 724;
        this._errHandler.sync(this);
        _alt = this._interp.adaptivePredict(this._input, 85, this._ctx);
      }
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  singleExpression(_p) {
    if (_p === undefined) {
      _p = 0;
    }
    const _parentctx = this._ctx;
    const _parentState = this.state;
    let localctx = new SingleExpressionContext(this, this._ctx, _parentState);
    let _prevctx = localctx;
    const _startState = 114;
    this.enterRecursionRule(localctx, 114, JavaScriptParser.RULE_singleExpression, _p);
    var _la = 0; // Token type
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 777;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 87, this._ctx);
      switch (la_) {
        case 1:
          localctx = new FunctionExpressionContext(this, localctx);
          this._ctx = localctx;
          _prevctx = localctx;
          this.state = 726;
          this.anonymousFunction();
          break;
        case 2:
          localctx = new ClassExpressionContext(this, localctx);
          this._ctx = localctx;
          _prevctx = localctx;
          this.state = 727;
          this.match(JavaScriptParser.Class);
          this.state = 729;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if ((_la - 105 & ~0x1f) == 0 && (1 << _la - 105 & 4129) !== 0) {
            this.state = 728;
            this.identifier();
          }
          this.state = 731;
          this.classTail();
          break;
        case 3:
          localctx = new NewExpressionContext(this, localctx);
          this._ctx = localctx;
          _prevctx = localctx;
          this.state = 732;
          this.match(JavaScriptParser.New);
          this.state = 733;
          this.singleExpression(0);
          this.state = 734;
          this.arguments();
          break;
        case 4:
          localctx = new NewExpressionContext(this, localctx);
          this._ctx = localctx;
          _prevctx = localctx;
          this.state = 736;
          this.match(JavaScriptParser.New);
          this.state = 737;
          this.singleExpression(42);
          break;
        case 5:
          localctx = new MetaExpressionContext(this, localctx);
          this._ctx = localctx;
          _prevctx = localctx;
          this.state = 738;
          this.match(JavaScriptParser.New);
          this.state = 739;
          this.match(JavaScriptParser.Dot);
          this.state = 740;
          this.identifier();
          break;
        case 6:
          localctx = new DeleteExpressionContext(this, localctx);
          this._ctx = localctx;
          _prevctx = localctx;
          this.state = 741;
          this.match(JavaScriptParser.Delete);
          this.state = 742;
          this.singleExpression(37);
          break;
        case 7:
          localctx = new VoidExpressionContext(this, localctx);
          this._ctx = localctx;
          _prevctx = localctx;
          this.state = 743;
          this.match(JavaScriptParser.Void);
          this.state = 744;
          this.singleExpression(36);
          break;
        case 8:
          localctx = new TypeofExpressionContext(this, localctx);
          this._ctx = localctx;
          _prevctx = localctx;
          this.state = 745;
          this.match(JavaScriptParser.Typeof);
          this.state = 746;
          this.singleExpression(35);
          break;
        case 9:
          localctx = new PreIncrementExpressionContext(this, localctx);
          this._ctx = localctx;
          _prevctx = localctx;
          this.state = 747;
          this.match(JavaScriptParser.PlusPlus);
          this.state = 748;
          this.singleExpression(34);
          break;
        case 10:
          localctx = new PreDecreaseExpressionContext(this, localctx);
          this._ctx = localctx;
          _prevctx = localctx;
          this.state = 749;
          this.match(JavaScriptParser.MinusMinus);
          this.state = 750;
          this.singleExpression(33);
          break;
        case 11:
          localctx = new UnaryPlusExpressionContext(this, localctx);
          this._ctx = localctx;
          _prevctx = localctx;
          this.state = 751;
          this.match(JavaScriptParser.Plus);
          this.state = 752;
          this.singleExpression(32);
          break;
        case 12:
          localctx = new UnaryMinusExpressionContext(this, localctx);
          this._ctx = localctx;
          _prevctx = localctx;
          this.state = 753;
          this.match(JavaScriptParser.Minus);
          this.state = 754;
          this.singleExpression(31);
          break;
        case 13:
          localctx = new BitNotExpressionContext(this, localctx);
          this._ctx = localctx;
          _prevctx = localctx;
          this.state = 755;
          this.match(JavaScriptParser.BitNot);
          this.state = 756;
          this.singleExpression(30);
          break;
        case 14:
          localctx = new NotExpressionContext(this, localctx);
          this._ctx = localctx;
          _prevctx = localctx;
          this.state = 757;
          this.match(JavaScriptParser.Not);
          this.state = 758;
          this.singleExpression(29);
          break;
        case 15:
          localctx = new AwaitExpressionContext(this, localctx);
          this._ctx = localctx;
          _prevctx = localctx;
          this.state = 759;
          this.match(JavaScriptParser.Await);
          this.state = 760;
          this.singleExpression(28);
          break;
        case 16:
          localctx = new ImportExpressionContext(this, localctx);
          this._ctx = localctx;
          _prevctx = localctx;
          this.state = 761;
          this.match(JavaScriptParser.Import);
          this.state = 762;
          this.match(JavaScriptParser.OpenParen);
          this.state = 763;
          this.singleExpression(0);
          this.state = 764;
          this.match(JavaScriptParser.CloseParen);
          break;
        case 17:
          localctx = new YieldExpressionContext(this, localctx);
          this._ctx = localctx;
          _prevctx = localctx;
          this.state = 766;
          this.yieldStatement();
          break;
        case 18:
          localctx = new ThisExpressionContext(this, localctx);
          this._ctx = localctx;
          _prevctx = localctx;
          this.state = 767;
          this.match(JavaScriptParser.This);
          break;
        case 19:
          localctx = new IdentifierExpressionContext(this, localctx);
          this._ctx = localctx;
          _prevctx = localctx;
          this.state = 768;
          this.identifier();
          break;
        case 20:
          localctx = new SuperExpressionContext(this, localctx);
          this._ctx = localctx;
          _prevctx = localctx;
          this.state = 769;
          this.match(JavaScriptParser.Super);
          break;
        case 21:
          localctx = new LiteralExpressionContext(this, localctx);
          this._ctx = localctx;
          _prevctx = localctx;
          this.state = 770;
          this.literal();
          break;
        case 22:
          localctx = new ArrayLiteralExpressionContext(this, localctx);
          this._ctx = localctx;
          _prevctx = localctx;
          this.state = 771;
          this.arrayLiteral();
          break;
        case 23:
          localctx = new ObjectLiteralExpressionContext(this, localctx);
          this._ctx = localctx;
          _prevctx = localctx;
          this.state = 772;
          this.objectLiteral();
          break;
        case 24:
          localctx = new ParenthesizedExpressionContext(this, localctx);
          this._ctx = localctx;
          _prevctx = localctx;
          this.state = 773;
          this.match(JavaScriptParser.OpenParen);
          this.state = 774;
          this.expressionSequence();
          this.state = 775;
          this.match(JavaScriptParser.CloseParen);
          break;
      }
      this._ctx.stop = this._input.LT(-1);
      this.state = 866;
      this._errHandler.sync(this);
      var _alt = this._interp.adaptivePredict(this._input, 92, this._ctx);
      while (_alt != 2 && _alt != _antlr.default.atn.ATN.INVALID_ALT_NUMBER) {
        if (_alt === 1) {
          if (this._parseListeners !== null) {
            this.triggerExitRuleEvent();
          }
          _prevctx = localctx;
          this.state = 864;
          this._errHandler.sync(this);
          var la_ = this._interp.adaptivePredict(this._input, 91, this._ctx);
          switch (la_) {
            case 1:
              localctx = new OptionalChainExpressionContext(this, new SingleExpressionContext(this, _parentctx, _parentState));
              this.pushNewRecursionContext(localctx, _startState, JavaScriptParser.RULE_singleExpression);
              this.state = 779;
              if (!this.precpred(this._ctx, 46)) {
                throw new _antlr.default.error.FailedPredicateException(this, "this.precpred(this._ctx, 46)");
              }
              this.state = 780;
              this.match(JavaScriptParser.QuestionMarkDot);
              this.state = 781;
              this.singleExpression(47);
              break;
            case 2:
              localctx = new PowerExpressionContext(this, new SingleExpressionContext(this, _parentctx, _parentState));
              this.pushNewRecursionContext(localctx, _startState, JavaScriptParser.RULE_singleExpression);
              this.state = 782;
              if (!this.precpred(this._ctx, 27)) {
                throw new _antlr.default.error.FailedPredicateException(this, "this.precpred(this._ctx, 27)");
              }
              this.state = 783;
              this.match(JavaScriptParser.Power);
              this.state = 784;
              this.singleExpression(27);
              break;
            case 3:
              localctx = new MultiplicativeExpressionContext(this, new SingleExpressionContext(this, _parentctx, _parentState));
              this.pushNewRecursionContext(localctx, _startState, JavaScriptParser.RULE_singleExpression);
              this.state = 785;
              if (!this.precpred(this._ctx, 26)) {
                throw new _antlr.default.error.FailedPredicateException(this, "this.precpred(this._ctx, 26)");
              }
              this.state = 786;
              _la = this._input.LA(1);
              if (!((_la & ~0x1f) == 0 && (1 << _la & 117440512) !== 0)) {
                this._errHandler.recoverInline(this);
              } else {
                this._errHandler.reportMatch(this);
                this.consume();
              }
              this.state = 787;
              this.singleExpression(27);
              break;
            case 4:
              localctx = new AdditiveExpressionContext(this, new SingleExpressionContext(this, _parentctx, _parentState));
              this.pushNewRecursionContext(localctx, _startState, JavaScriptParser.RULE_singleExpression);
              this.state = 788;
              if (!this.precpred(this._ctx, 25)) {
                throw new _antlr.default.error.FailedPredicateException(this, "this.precpred(this._ctx, 25)");
              }
              this.state = 789;
              _la = this._input.LA(1);
              if (!(_la === 20 || _la === 21)) {
                this._errHandler.recoverInline(this);
              } else {
                this._errHandler.reportMatch(this);
                this.consume();
              }
              this.state = 790;
              this.singleExpression(26);
              break;
            case 5:
              localctx = new CoalesceExpressionContext(this, new SingleExpressionContext(this, _parentctx, _parentState));
              this.pushNewRecursionContext(localctx, _startState, JavaScriptParser.RULE_singleExpression);
              this.state = 791;
              if (!this.precpred(this._ctx, 24)) {
                throw new _antlr.default.error.FailedPredicateException(this, "this.precpred(this._ctx, 24)");
              }
              this.state = 792;
              this.match(JavaScriptParser.NullCoalesce);
              this.state = 793;
              this.singleExpression(25);
              break;
            case 6:
              localctx = new BitShiftExpressionContext(this, new SingleExpressionContext(this, _parentctx, _parentState));
              this.pushNewRecursionContext(localctx, _startState, JavaScriptParser.RULE_singleExpression);
              this.state = 794;
              if (!this.precpred(this._ctx, 23)) {
                throw new _antlr.default.error.FailedPredicateException(this, "this.precpred(this._ctx, 23)");
              }
              this.state = 795;
              _la = this._input.LA(1);
              if (!((_la - 30 & ~0x1f) == 0 && (1 << _la - 30 & 7) !== 0)) {
                this._errHandler.recoverInline(this);
              } else {
                this._errHandler.reportMatch(this);
                this.consume();
              }
              this.state = 796;
              this.singleExpression(24);
              break;
            case 7:
              localctx = new RelationalExpressionContext(this, new SingleExpressionContext(this, _parentctx, _parentState));
              this.pushNewRecursionContext(localctx, _startState, JavaScriptParser.RULE_singleExpression);
              this.state = 797;
              if (!this.precpred(this._ctx, 22)) {
                throw new _antlr.default.error.FailedPredicateException(this, "this.precpred(this._ctx, 22)");
              }
              this.state = 798;
              _la = this._input.LA(1);
              if (!((_la - 33 & ~0x1f) == 0 && (1 << _la - 33 & 15) !== 0)) {
                this._errHandler.recoverInline(this);
              } else {
                this._errHandler.reportMatch(this);
                this.consume();
              }
              this.state = 799;
              this.singleExpression(23);
              break;
            case 8:
              localctx = new InstanceofExpressionContext(this, new SingleExpressionContext(this, _parentctx, _parentState));
              this.pushNewRecursionContext(localctx, _startState, JavaScriptParser.RULE_singleExpression);
              this.state = 800;
              if (!this.precpred(this._ctx, 21)) {
                throw new _antlr.default.error.FailedPredicateException(this, "this.precpred(this._ctx, 21)");
              }
              this.state = 801;
              this.match(JavaScriptParser.Instanceof);
              this.state = 802;
              this.singleExpression(22);
              break;
            case 9:
              localctx = new InExpressionContext(this, new SingleExpressionContext(this, _parentctx, _parentState));
              this.pushNewRecursionContext(localctx, _startState, JavaScriptParser.RULE_singleExpression);
              this.state = 803;
              if (!this.precpred(this._ctx, 20)) {
                throw new _antlr.default.error.FailedPredicateException(this, "this.precpred(this._ctx, 20)");
              }
              this.state = 804;
              this.match(JavaScriptParser.In);
              this.state = 805;
              this.singleExpression(21);
              break;
            case 10:
              localctx = new EqualityExpressionContext(this, new SingleExpressionContext(this, _parentctx, _parentState));
              this.pushNewRecursionContext(localctx, _startState, JavaScriptParser.RULE_singleExpression);
              this.state = 806;
              if (!this.precpred(this._ctx, 19)) {
                throw new _antlr.default.error.FailedPredicateException(this, "this.precpred(this._ctx, 19)");
              }
              this.state = 807;
              _la = this._input.LA(1);
              if (!((_la - 37 & ~0x1f) == 0 && (1 << _la - 37 & 15) !== 0)) {
                this._errHandler.recoverInline(this);
              } else {
                this._errHandler.reportMatch(this);
                this.consume();
              }
              this.state = 808;
              this.singleExpression(20);
              break;
            case 11:
              localctx = new BitAndExpressionContext(this, new SingleExpressionContext(this, _parentctx, _parentState));
              this.pushNewRecursionContext(localctx, _startState, JavaScriptParser.RULE_singleExpression);
              this.state = 809;
              if (!this.precpred(this._ctx, 18)) {
                throw new _antlr.default.error.FailedPredicateException(this, "this.precpred(this._ctx, 18)");
              }
              this.state = 810;
              this.match(JavaScriptParser.BitAnd);
              this.state = 811;
              this.singleExpression(19);
              break;
            case 12:
              localctx = new BitXOrExpressionContext(this, new SingleExpressionContext(this, _parentctx, _parentState));
              this.pushNewRecursionContext(localctx, _startState, JavaScriptParser.RULE_singleExpression);
              this.state = 812;
              if (!this.precpred(this._ctx, 17)) {
                throw new _antlr.default.error.FailedPredicateException(this, "this.precpred(this._ctx, 17)");
              }
              this.state = 813;
              this.match(JavaScriptParser.BitXOr);
              this.state = 814;
              this.singleExpression(18);
              break;
            case 13:
              localctx = new BitOrExpressionContext(this, new SingleExpressionContext(this, _parentctx, _parentState));
              this.pushNewRecursionContext(localctx, _startState, JavaScriptParser.RULE_singleExpression);
              this.state = 815;
              if (!this.precpred(this._ctx, 16)) {
                throw new _antlr.default.error.FailedPredicateException(this, "this.precpred(this._ctx, 16)");
              }
              this.state = 816;
              this.match(JavaScriptParser.BitOr);
              this.state = 817;
              this.singleExpression(17);
              break;
            case 14:
              localctx = new LogicalAndExpressionContext(this, new SingleExpressionContext(this, _parentctx, _parentState));
              this.pushNewRecursionContext(localctx, _startState, JavaScriptParser.RULE_singleExpression);
              this.state = 818;
              if (!this.precpred(this._ctx, 15)) {
                throw new _antlr.default.error.FailedPredicateException(this, "this.precpred(this._ctx, 15)");
              }
              this.state = 819;
              this.match(JavaScriptParser.And);
              this.state = 820;
              this.singleExpression(16);
              break;
            case 15:
              localctx = new LogicalOrExpressionContext(this, new SingleExpressionContext(this, _parentctx, _parentState));
              this.pushNewRecursionContext(localctx, _startState, JavaScriptParser.RULE_singleExpression);
              this.state = 821;
              if (!this.precpred(this._ctx, 14)) {
                throw new _antlr.default.error.FailedPredicateException(this, "this.precpred(this._ctx, 14)");
              }
              this.state = 822;
              this.match(JavaScriptParser.Or);
              this.state = 823;
              this.singleExpression(15);
              break;
            case 16:
              localctx = new TernaryExpressionContext(this, new SingleExpressionContext(this, _parentctx, _parentState));
              this.pushNewRecursionContext(localctx, _startState, JavaScriptParser.RULE_singleExpression);
              this.state = 824;
              if (!this.precpred(this._ctx, 13)) {
                throw new _antlr.default.error.FailedPredicateException(this, "this.precpred(this._ctx, 13)");
              }
              this.state = 825;
              this.match(JavaScriptParser.QuestionMark);
              this.state = 826;
              this.singleExpression(0);
              this.state = 827;
              this.match(JavaScriptParser.Colon);
              this.state = 828;
              this.singleExpression(14);
              break;
            case 17:
              localctx = new AssignmentExpressionContext(this, new SingleExpressionContext(this, _parentctx, _parentState));
              this.pushNewRecursionContext(localctx, _startState, JavaScriptParser.RULE_singleExpression);
              this.state = 830;
              if (!this.precpred(this._ctx, 12)) {
                throw new _antlr.default.error.FailedPredicateException(this, "this.precpred(this._ctx, 12)");
              }
              this.state = 831;
              this.match(JavaScriptParser.Assign);
              this.state = 832;
              this.singleExpression(12);
              break;
            case 18:
              localctx = new AssignmentOperatorExpressionContext(this, new SingleExpressionContext(this, _parentctx, _parentState));
              this.pushNewRecursionContext(localctx, _startState, JavaScriptParser.RULE_singleExpression);
              this.state = 833;
              if (!this.precpred(this._ctx, 11)) {
                throw new _antlr.default.error.FailedPredicateException(this, "this.precpred(this._ctx, 11)");
              }
              this.state = 834;
              this.assignmentOperator();
              this.state = 835;
              this.singleExpression(11);
              break;
            case 19:
              localctx = new MemberIndexExpressionContext(this, new SingleExpressionContext(this, _parentctx, _parentState));
              this.pushNewRecursionContext(localctx, _startState, JavaScriptParser.RULE_singleExpression);
              this.state = 837;
              if (!this.precpred(this._ctx, 45)) {
                throw new _antlr.default.error.FailedPredicateException(this, "this.precpred(this._ctx, 45)");
              }
              this.state = 839;
              this._errHandler.sync(this);
              _la = this._input.LA(1);
              if (_la === 14) {
                this.state = 838;
                this.match(JavaScriptParser.QuestionMarkDot);
              }
              this.state = 841;
              this.match(JavaScriptParser.OpenBracket);
              this.state = 842;
              this.expressionSequence();
              this.state = 843;
              this.match(JavaScriptParser.CloseBracket);
              break;
            case 20:
              localctx = new MemberDotExpressionContext(this, new SingleExpressionContext(this, _parentctx, _parentState));
              this.pushNewRecursionContext(localctx, _startState, JavaScriptParser.RULE_singleExpression);
              this.state = 845;
              if (!this.precpred(this._ctx, 44)) {
                throw new _antlr.default.error.FailedPredicateException(this, "this.precpred(this._ctx, 44)");
              }
              this.state = 847;
              this._errHandler.sync(this);
              _la = this._input.LA(1);
              if (_la === 13) {
                this.state = 846;
                this.match(JavaScriptParser.QuestionMark);
              }
              this.state = 849;
              this.match(JavaScriptParser.Dot);
              this.state = 851;
              this._errHandler.sync(this);
              _la = this._input.LA(1);
              if (_la === 29) {
                this.state = 850;
                this.match(JavaScriptParser.Hashtag);
              }
              this.state = 853;
              this.identifierName();
              break;
            case 21:
              localctx = new ArgumentsExpressionContext(this, new SingleExpressionContext(this, _parentctx, _parentState));
              this.pushNewRecursionContext(localctx, _startState, JavaScriptParser.RULE_singleExpression);
              this.state = 854;
              if (!this.precpred(this._ctx, 41)) {
                throw new _antlr.default.error.FailedPredicateException(this, "this.precpred(this._ctx, 41)");
              }
              this.state = 855;
              this.arguments();
              break;
            case 22:
              localctx = new PostIncrementExpressionContext(this, new SingleExpressionContext(this, _parentctx, _parentState));
              this.pushNewRecursionContext(localctx, _startState, JavaScriptParser.RULE_singleExpression);
              this.state = 856;
              if (!this.precpred(this._ctx, 39)) {
                throw new _antlr.default.error.FailedPredicateException(this, "this.precpred(this._ctx, 39)");
              }
              this.state = 857;
              if (!this.notLineTerminator()) {
                throw new _antlr.default.error.FailedPredicateException(this, "this.notLineTerminator()");
              }
              this.state = 858;
              this.match(JavaScriptParser.PlusPlus);
              break;
            case 23:
              localctx = new PostDecreaseExpressionContext(this, new SingleExpressionContext(this, _parentctx, _parentState));
              this.pushNewRecursionContext(localctx, _startState, JavaScriptParser.RULE_singleExpression);
              this.state = 859;
              if (!this.precpred(this._ctx, 38)) {
                throw new _antlr.default.error.FailedPredicateException(this, "this.precpred(this._ctx, 38)");
              }
              this.state = 860;
              if (!this.notLineTerminator()) {
                throw new _antlr.default.error.FailedPredicateException(this, "this.notLineTerminator()");
              }
              this.state = 861;
              this.match(JavaScriptParser.MinusMinus);
              break;
            case 24:
              localctx = new TemplateStringExpressionContext(this, new SingleExpressionContext(this, _parentctx, _parentState));
              this.pushNewRecursionContext(localctx, _startState, JavaScriptParser.RULE_singleExpression);
              this.state = 862;
              if (!this.precpred(this._ctx, 9)) {
                throw new _antlr.default.error.FailedPredicateException(this, "this.precpred(this._ctx, 9)");
              }
              this.state = 863;
              this.templateStringLiteral();
              break;
          }
        }
        this.state = 868;
        this._errHandler.sync(this);
        _alt = this._interp.adaptivePredict(this._input, 92, this._ctx);
      }
    } catch (error) {
      if (error instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = error;
        this._errHandler.reportError(this, error);
        this._errHandler.recover(this, error);
      } else {
        throw error;
      }
    } finally {
      this.unrollRecursionContexts(_parentctx);
    }
    return localctx;
  }
  assignable() {
    let localctx = new AssignableContext(this, this._ctx, this.state);
    this.enterRule(localctx, 116, JavaScriptParser.RULE_assignable);
    try {
      this.state = 872;
      this._errHandler.sync(this);
      switch (this._input.LA(1)) {
        case 105:
        case 110:
        case 117:
          this.enterOuterAlt(localctx, 1);
          this.state = 869;
          this.identifier();
          break;
        case 3:
          this.enterOuterAlt(localctx, 2);
          this.state = 870;
          this.arrayLiteral();
          break;
        case 7:
          this.enterOuterAlt(localctx, 3);
          this.state = 871;
          this.objectLiteral();
          break;
        default:
          throw new _antlr.default.error.NoViableAltException(this);
      }
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  objectLiteral() {
    let localctx = new ObjectLiteralContext(this, this._ctx, this.state);
    this.enterRule(localctx, 118, JavaScriptParser.RULE_objectLiteral);
    var _la = 0; // Token type
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 874;
      this.match(JavaScriptParser.OpenBrace);
      this.state = 886;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 96, this._ctx);
      if (la_ === 1) {
        this.state = 875;
        this.propertyAssignment();
        this.state = 880;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input, 94, this._ctx);
        while (_alt != 2 && _alt != _antlr.default.atn.ATN.INVALID_ALT_NUMBER) {
          if (_alt === 1) {
            this.state = 876;
            this.match(JavaScriptParser.Comma);
            this.state = 877;
            this.propertyAssignment();
          }
          this.state = 882;
          this._errHandler.sync(this);
          _alt = this._interp.adaptivePredict(this._input, 94, this._ctx);
        }
        this.state = 884;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if (_la === 11) {
          this.state = 883;
          this.match(JavaScriptParser.Comma);
        }
      }
      this.state = 888;
      this.match(JavaScriptParser.CloseBrace);
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  anonymousFunction() {
    let localctx = new AnonymousFunctionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 120, JavaScriptParser.RULE_anonymousFunction);
    var _la = 0; // Token type
    try {
      this.state = 911;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 101, this._ctx);
      switch (la_) {
        case 1:
          localctx = new FunctionDeclContext(this, localctx);
          this.enterOuterAlt(localctx, 1);
          this.state = 890;
          this.functionDeclaration();
          break;
        case 2:
          localctx = new AnonymousFunctionDeclContext(this, localctx);
          this.enterOuterAlt(localctx, 2);
          this.state = 892;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if (_la === 105) {
            this.state = 891;
            this.match(JavaScriptParser.Async);
          }
          this.state = 894;
          this.match(JavaScriptParser.FunctionObject);
          this.state = 896;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if (_la === 24) {
            this.state = 895;
            this.match(JavaScriptParser.Multiply);
          }
          this.state = 898;
          this.match(JavaScriptParser.OpenParen);
          this.state = 900;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if ((_la & ~0x1f) == 0 && (1 << _la & 65672) !== 0 || (_la - 105 & ~0x1f) == 0 && (1 << _la - 105 & 4129) !== 0) {
            this.state = 899;
            this.formalParameterList();
          }
          this.state = 902;
          this.match(JavaScriptParser.CloseParen);
          this.state = 903;
          this.functionBody();
          break;
        case 3:
          localctx = new ArrowFunctionContext(this, localctx);
          this.enterOuterAlt(localctx, 3);
          this.state = 905;
          this._errHandler.sync(this);
          var la_ = this._interp.adaptivePredict(this._input, 100, this._ctx);
          if (la_ === 1) {
            this.state = 904;
            this.match(JavaScriptParser.Async);
          }
          this.state = 907;
          this.arrowFunctionParameters();
          this.state = 908;
          this.match(JavaScriptParser.ARROW);
          this.state = 909;
          this.arrowFunctionBody();
          break;
      }
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  arrowFunctionParameters() {
    let localctx = new ArrowFunctionParametersContext(this, this._ctx, this.state);
    this.enterRule(localctx, 122, JavaScriptParser.RULE_arrowFunctionParameters);
    var _la = 0; // Token type
    try {
      this.state = 919;
      this._errHandler.sync(this);
      switch (this._input.LA(1)) {
        case 105:
        case 110:
        case 117:
          this.enterOuterAlt(localctx, 1);
          this.state = 913;
          this.identifier();
          break;
        case 5:
          this.enterOuterAlt(localctx, 2);
          this.state = 914;
          this.match(JavaScriptParser.OpenParen);
          this.state = 916;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if ((_la & ~0x1f) == 0 && (1 << _la & 65672) !== 0 || (_la - 105 & ~0x1f) == 0 && (1 << _la - 105 & 4129) !== 0) {
            this.state = 915;
            this.formalParameterList();
          }
          this.state = 918;
          this.match(JavaScriptParser.CloseParen);
          break;
        default:
          throw new _antlr.default.error.NoViableAltException(this);
      }
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  arrowFunctionBody() {
    let localctx = new ArrowFunctionBodyContext(this, this._ctx, this.state);
    this.enterRule(localctx, 124, JavaScriptParser.RULE_arrowFunctionBody);
    try {
      this.state = 923;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 104, this._ctx);
      switch (la_) {
        case 1:
          this.enterOuterAlt(localctx, 1);
          this.state = 921;
          this.singleExpression(0);
          break;
        case 2:
          this.enterOuterAlt(localctx, 2);
          this.state = 922;
          this.functionBody();
          break;
      }
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  assignmentOperator() {
    let localctx = new AssignmentOperatorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 126, JavaScriptParser.RULE_assignmentOperator);
    var _la = 0; // Token type
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 925;
      _la = this._input.LA(1);
      if (!((_la - 46 & ~0x1f) == 0 && (1 << _la - 46 & 4095) !== 0)) {
        this._errHandler.recoverInline(this);
      } else {
        this._errHandler.reportMatch(this);
        this.consume();
      }
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  literal() {
    let localctx = new LiteralContext(this, this._ctx, this.state);
    this.enterRule(localctx, 128, JavaScriptParser.RULE_literal);
    try {
      this.state = 933;
      this._errHandler.sync(this);
      switch (this._input.LA(1)) {
        case 59:
          this.enterOuterAlt(localctx, 1);
          this.state = 927;
          this.match(JavaScriptParser.NullLiteral);
          break;
        case 60:
          this.enterOuterAlt(localctx, 2);
          this.state = 928;
          this.match(JavaScriptParser.BooleanLiteral);
          break;
        case 118:
          this.enterOuterAlt(localctx, 3);
          this.state = 929;
          this.match(JavaScriptParser.StringLiteral);
          break;
        case 119:
          this.enterOuterAlt(localctx, 4);
          this.state = 930;
          this.templateStringLiteral();
          break;
        case 61:
        case 62:
        case 63:
        case 64:
        case 65:
          this.enterOuterAlt(localctx, 5);
          this.state = 931;
          this.numericLiteral();
          break;
        case 66:
        case 67:
        case 68:
        case 69:
          this.enterOuterAlt(localctx, 6);
          this.state = 932;
          this.bigintLiteral();
          break;
        default:
          throw new _antlr.default.error.NoViableAltException(this);
      }
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  templateStringLiteral() {
    let localctx = new TemplateStringLiteralContext(this, this._ctx, this.state);
    this.enterRule(localctx, 130, JavaScriptParser.RULE_templateStringLiteral);
    var _la = 0; // Token type
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 935;
      this.match(JavaScriptParser.BackTick);
      this.state = 939;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      while (_la === 125 || _la === 126) {
        this.state = 936;
        this.templateStringAtom();
        this.state = 941;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
      }
      this.state = 942;
      this.match(JavaScriptParser.BackTick);
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  templateStringAtom() {
    let localctx = new TemplateStringAtomContext(this, this._ctx, this.state);
    this.enterRule(localctx, 132, JavaScriptParser.RULE_templateStringAtom);
    try {
      this.state = 949;
      this._errHandler.sync(this);
      switch (this._input.LA(1)) {
        case 126:
          this.enterOuterAlt(localctx, 1);
          this.state = 944;
          this.match(JavaScriptParser.TemplateStringAtom);
          break;
        case 125:
          this.enterOuterAlt(localctx, 2);
          this.state = 945;
          this.match(JavaScriptParser.TemplateStringStartExpression);
          this.state = 946;
          this.singleExpression(0);
          this.state = 947;
          this.match(JavaScriptParser.TemplateCloseBrace);
          break;
        default:
          throw new _antlr.default.error.NoViableAltException(this);
      }
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  numericLiteral() {
    let localctx = new NumericLiteralContext(this, this._ctx, this.state);
    this.enterRule(localctx, 134, JavaScriptParser.RULE_numericLiteral);
    var _la = 0; // Token type
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 951;
      _la = this._input.LA(1);
      if (!((_la - 61 & ~0x1f) == 0 && (1 << _la - 61 & 31) !== 0)) {
        this._errHandler.recoverInline(this);
      } else {
        this._errHandler.reportMatch(this);
        this.consume();
      }
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  bigintLiteral() {
    let localctx = new BigintLiteralContext(this, this._ctx, this.state);
    this.enterRule(localctx, 136, JavaScriptParser.RULE_bigintLiteral);
    var _la = 0; // Token type
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 953;
      _la = this._input.LA(1);
      if (!((_la - 66 & ~0x1f) == 0 && (1 << _la - 66 & 15) !== 0)) {
        this._errHandler.recoverInline(this);
      } else {
        this._errHandler.reportMatch(this);
        this.consume();
      }
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  getter() {
    let localctx = new GetterContext(this, this._ctx, this.state);
    this.enterRule(localctx, 138, JavaScriptParser.RULE_getter);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 955;
      if (!this.n("get")) {
        throw new _antlr.default.error.FailedPredicateException(this, "this.n(\"get\")");
      }
      this.state = 956;
      this.identifier();
      this.state = 957;
      this.propertyName();
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  setter() {
    let localctx = new SetterContext(this, this._ctx, this.state);
    this.enterRule(localctx, 140, JavaScriptParser.RULE_setter);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 959;
      if (!this.n("set")) {
        throw new _antlr.default.error.FailedPredicateException(this, "this.n(\"set\")");
      }
      this.state = 960;
      this.identifier();
      this.state = 961;
      this.propertyName();
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  identifierName() {
    let localctx = new IdentifierNameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 142, JavaScriptParser.RULE_identifierName);
    try {
      this.state = 965;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 108, this._ctx);
      switch (la_) {
        case 1:
          this.enterOuterAlt(localctx, 1);
          this.state = 963;
          this.identifier();
          break;
        case 2:
          this.enterOuterAlt(localctx, 2);
          this.state = 964;
          this.reservedWord();
          break;
      }
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  identifier() {
    let localctx = new IdentifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 144, JavaScriptParser.RULE_identifier);
    var _la = 0; // Token type
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 967;
      _la = this._input.LA(1);
      if (!((_la - 105 & ~0x1f) == 0 && (1 << _la - 105 & 4129) !== 0)) {
        this._errHandler.recoverInline(this);
      } else {
        this._errHandler.reportMatch(this);
        this.consume();
      }
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  reservedWord() {
    let localctx = new ReservedWordContext(this, this._ctx, this.state);
    this.enterRule(localctx, 146, JavaScriptParser.RULE_reservedWord);
    try {
      this.state = 972;
      this._errHandler.sync(this);
      switch (this._input.LA(1)) {
        case 70:
        case 71:
        case 72:
        case 73:
        case 74:
        case 75:
        case 76:
        case 77:
        case 78:
        case 79:
        case 80:
        case 81:
        case 82:
        case 83:
        case 84:
        case 85:
        case 86:
        case 87:
        case 88:
        case 89:
        case 90:
        case 91:
        case 92:
        case 93:
        case 94:
        case 95:
        case 96:
        case 97:
        case 98:
        case 99:
        case 100:
        case 101:
        case 102:
        case 103:
        case 104:
        case 105:
        case 106:
        case 107:
        case 108:
        case 109:
        case 110:
        case 111:
        case 112:
        case 113:
        case 114:
        case 115:
        case 116:
          this.enterOuterAlt(localctx, 1);
          this.state = 969;
          this.keyword();
          break;
        case 59:
          this.enterOuterAlt(localctx, 2);
          this.state = 970;
          this.match(JavaScriptParser.NullLiteral);
          break;
        case 60:
          this.enterOuterAlt(localctx, 3);
          this.state = 971;
          this.match(JavaScriptParser.BooleanLiteral);
          break;
        default:
          throw new _antlr.default.error.NoViableAltException(this);
      }
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  keyword() {
    let localctx = new KeywordContext(this, this._ctx, this.state);
    this.enterRule(localctx, 148, JavaScriptParser.RULE_keyword);
    try {
      this.state = 1020;
      this._errHandler.sync(this);
      switch (this._input.LA(1)) {
        case 70:
          this.enterOuterAlt(localctx, 1);
          this.state = 974;
          this.match(JavaScriptParser.Break);
          break;
        case 71:
          this.enterOuterAlt(localctx, 2);
          this.state = 975;
          this.match(JavaScriptParser.Do);
          break;
        case 72:
          this.enterOuterAlt(localctx, 3);
          this.state = 976;
          this.match(JavaScriptParser.Instanceof);
          break;
        case 73:
          this.enterOuterAlt(localctx, 4);
          this.state = 977;
          this.match(JavaScriptParser.Typeof);
          break;
        case 74:
          this.enterOuterAlt(localctx, 5);
          this.state = 978;
          this.match(JavaScriptParser.Case);
          break;
        case 75:
          this.enterOuterAlt(localctx, 6);
          this.state = 979;
          this.match(JavaScriptParser.Else);
          break;
        case 76:
          this.enterOuterAlt(localctx, 7);
          this.state = 980;
          this.match(JavaScriptParser.New);
          break;
        case 77:
          this.enterOuterAlt(localctx, 8);
          this.state = 981;
          this.match(JavaScriptParser.Var);
          break;
        case 78:
          this.enterOuterAlt(localctx, 9);
          this.state = 982;
          this.match(JavaScriptParser.Catch);
          break;
        case 79:
          this.enterOuterAlt(localctx, 10);
          this.state = 983;
          this.match(JavaScriptParser.Finally);
          break;
        case 80:
          this.enterOuterAlt(localctx, 11);
          this.state = 984;
          this.match(JavaScriptParser.Return);
          break;
        case 81:
          this.enterOuterAlt(localctx, 12);
          this.state = 985;
          this.match(JavaScriptParser.Void);
          break;
        case 82:
          this.enterOuterAlt(localctx, 13);
          this.state = 986;
          this.match(JavaScriptParser.Continue);
          break;
        case 83:
          this.enterOuterAlt(localctx, 14);
          this.state = 987;
          this.match(JavaScriptParser.For);
          break;
        case 84:
          this.enterOuterAlt(localctx, 15);
          this.state = 988;
          this.match(JavaScriptParser.Switch);
          break;
        case 85:
          this.enterOuterAlt(localctx, 16);
          this.state = 989;
          this.match(JavaScriptParser.While);
          break;
        case 86:
          this.enterOuterAlt(localctx, 17);
          this.state = 990;
          this.match(JavaScriptParser.Debugger);
          break;
        case 87:
          this.enterOuterAlt(localctx, 18);
          this.state = 991;
          this.match(JavaScriptParser.FunctionObject);
          break;
        case 88:
          this.enterOuterAlt(localctx, 19);
          this.state = 992;
          this.match(JavaScriptParser.This);
          break;
        case 89:
          this.enterOuterAlt(localctx, 20);
          this.state = 993;
          this.match(JavaScriptParser.With);
          break;
        case 90:
          this.enterOuterAlt(localctx, 21);
          this.state = 994;
          this.match(JavaScriptParser.Default);
          break;
        case 91:
          this.enterOuterAlt(localctx, 22);
          this.state = 995;
          this.match(JavaScriptParser.If);
          break;
        case 92:
          this.enterOuterAlt(localctx, 23);
          this.state = 996;
          this.match(JavaScriptParser.Throw);
          break;
        case 93:
          this.enterOuterAlt(localctx, 24);
          this.state = 997;
          this.match(JavaScriptParser.Delete);
          break;
        case 94:
          this.enterOuterAlt(localctx, 25);
          this.state = 998;
          this.match(JavaScriptParser.In);
          break;
        case 95:
          this.enterOuterAlt(localctx, 26);
          this.state = 999;
          this.match(JavaScriptParser.Try);
          break;
        case 98:
          this.enterOuterAlt(localctx, 27);
          this.state = 1000;
          this.match(JavaScriptParser.Class);
          break;
        case 99:
          this.enterOuterAlt(localctx, 28);
          this.state = 1001;
          this.match(JavaScriptParser.Enum);
          break;
        case 100:
          this.enterOuterAlt(localctx, 29);
          this.state = 1002;
          this.match(JavaScriptParser.Extends);
          break;
        case 101:
          this.enterOuterAlt(localctx, 30);
          this.state = 1003;
          this.match(JavaScriptParser.Super);
          break;
        case 102:
          this.enterOuterAlt(localctx, 31);
          this.state = 1004;
          this.match(JavaScriptParser.Const);
          break;
        case 103:
          this.enterOuterAlt(localctx, 32);
          this.state = 1005;
          this.match(JavaScriptParser.Export);
          break;
        case 104:
          this.enterOuterAlt(localctx, 33);
          this.state = 1006;
          this.match(JavaScriptParser.Import);
          break;
        case 108:
          this.enterOuterAlt(localctx, 34);
          this.state = 1007;
          this.match(JavaScriptParser.Implements);
          break;
        case 109:
        case 110:
          this.enterOuterAlt(localctx, 35);
          this.state = 1008;
          this.let_();
          break;
        case 111:
          this.enterOuterAlt(localctx, 36);
          this.state = 1009;
          this.match(JavaScriptParser.Private);
          break;
        case 112:
          this.enterOuterAlt(localctx, 37);
          this.state = 1010;
          this.match(JavaScriptParser.Public);
          break;
        case 113:
          this.enterOuterAlt(localctx, 38);
          this.state = 1011;
          this.match(JavaScriptParser.Interface);
          break;
        case 114:
          this.enterOuterAlt(localctx, 39);
          this.state = 1012;
          this.match(JavaScriptParser.Package);
          break;
        case 115:
          this.enterOuterAlt(localctx, 40);
          this.state = 1013;
          this.match(JavaScriptParser.Protected);
          break;
        case 116:
          this.enterOuterAlt(localctx, 41);
          this.state = 1014;
          this.match(JavaScriptParser.Static);
          break;
        case 107:
          this.enterOuterAlt(localctx, 42);
          this.state = 1015;
          this.match(JavaScriptParser.Yield);
          break;
        case 105:
          this.enterOuterAlt(localctx, 43);
          this.state = 1016;
          this.match(JavaScriptParser.Async);
          break;
        case 106:
          this.enterOuterAlt(localctx, 44);
          this.state = 1017;
          this.match(JavaScriptParser.Await);
          break;
        case 97:
          this.enterOuterAlt(localctx, 45);
          this.state = 1018;
          this.match(JavaScriptParser.From);
          break;
        case 96:
          this.enterOuterAlt(localctx, 46);
          this.state = 1019;
          this.match(JavaScriptParser.As);
          break;
        default:
          throw new _antlr.default.error.NoViableAltException(this);
      }
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  let_() {
    let localctx = new Let_Context(this, this._ctx, this.state);
    this.enterRule(localctx, 150, JavaScriptParser.RULE_let_);
    var _la = 0; // Token type
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1022;
      _la = this._input.LA(1);
      if (!(_la === 109 || _la === 110)) {
        this._errHandler.recoverInline(this);
      } else {
        this._errHandler.reportMatch(this);
        this.consume();
      }
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  eos() {
    let localctx = new EosContext(this, this._ctx, this.state);
    this.enterRule(localctx, 152, JavaScriptParser.RULE_eos);
    try {
      this.state = 1028;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 111, this._ctx);
      switch (la_) {
        case 1:
          this.enterOuterAlt(localctx, 1);
          this.state = 1024;
          this.match(JavaScriptParser.SemiColon);
          break;
        case 2:
          this.enterOuterAlt(localctx, 2);
          this.state = 1025;
          this.match(JavaScriptParser.EOF);
          break;
        case 3:
          this.enterOuterAlt(localctx, 3);
          this.state = 1026;
          if (!this.lineTerminatorAhead()) {
            throw new _antlr.default.error.FailedPredicateException(this, "this.lineTerminatorAhead()");
          }
          break;
        case 4:
          this.enterOuterAlt(localctx, 4);
          this.state = 1027;
          if (!this.closeBrace()) {
            throw new _antlr.default.error.FailedPredicateException(this, "this.closeBrace()");
          }
          break;
      }
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
}
exports.default = JavaScriptParser;
JavaScriptParser.EOF = _antlr.default.Token.EOF;
JavaScriptParser.MultiLineComment = 1;
JavaScriptParser.SingleLineComment = 2;
JavaScriptParser.OpenBracket = 3;
JavaScriptParser.CloseBracket = 4;
JavaScriptParser.OpenParen = 5;
JavaScriptParser.CloseParen = 6;
JavaScriptParser.OpenBrace = 7;
JavaScriptParser.TemplateCloseBrace = 8;
JavaScriptParser.CloseBrace = 9;
JavaScriptParser.SemiColon = 10;
JavaScriptParser.Comma = 11;
JavaScriptParser.Assign = 12;
JavaScriptParser.QuestionMark = 13;
JavaScriptParser.QuestionMarkDot = 14;
JavaScriptParser.Colon = 15;
JavaScriptParser.Ellipsis = 16;
JavaScriptParser.Dot = 17;
JavaScriptParser.PlusPlus = 18;
JavaScriptParser.MinusMinus = 19;
JavaScriptParser.Plus = 20;
JavaScriptParser.Minus = 21;
JavaScriptParser.BitNot = 22;
JavaScriptParser.Not = 23;
JavaScriptParser.Multiply = 24;
JavaScriptParser.Divide = 25;
JavaScriptParser.Modulus = 26;
JavaScriptParser.Power = 27;
JavaScriptParser.NullCoalesce = 28;
JavaScriptParser.Hashtag = 29;
JavaScriptParser.RightShiftArithmetic = 30;
JavaScriptParser.LeftShiftArithmetic = 31;
JavaScriptParser.RightShiftLogical = 32;
JavaScriptParser.LessThan = 33;
JavaScriptParser.MoreThan = 34;
JavaScriptParser.LessThanEquals = 35;
JavaScriptParser.GreaterThanEquals = 36;
JavaScriptParser.Equals_ = 37;
JavaScriptParser.NotEquals = 38;
JavaScriptParser.IdentityEquals = 39;
JavaScriptParser.IdentityNotEquals = 40;
JavaScriptParser.BitAnd = 41;
JavaScriptParser.BitXOr = 42;
JavaScriptParser.BitOr = 43;
JavaScriptParser.And = 44;
JavaScriptParser.Or = 45;
JavaScriptParser.MultiplyAssign = 46;
JavaScriptParser.DivideAssign = 47;
JavaScriptParser.ModulusAssign = 48;
JavaScriptParser.PlusAssign = 49;
JavaScriptParser.MinusAssign = 50;
JavaScriptParser.LeftShiftArithmeticAssign = 51;
JavaScriptParser.RightShiftArithmeticAssign = 52;
JavaScriptParser.RightShiftLogicalAssign = 53;
JavaScriptParser.BitAndAssign = 54;
JavaScriptParser.BitXorAssign = 55;
JavaScriptParser.BitOrAssign = 56;
JavaScriptParser.PowerAssign = 57;
JavaScriptParser.ARROW = 58;
JavaScriptParser.NullLiteral = 59;
JavaScriptParser.BooleanLiteral = 60;
JavaScriptParser.DecimalLiteral = 61;
JavaScriptParser.HexIntegerLiteral = 62;
JavaScriptParser.OctalIntegerLiteral = 63;
JavaScriptParser.OctalIntegerLiteral2 = 64;
JavaScriptParser.BinaryIntegerLiteral = 65;
JavaScriptParser.BigHexIntegerLiteral = 66;
JavaScriptParser.BigOctalIntegerLiteral = 67;
JavaScriptParser.BigBinaryIntegerLiteral = 68;
JavaScriptParser.BigDecimalIntegerLiteral = 69;
JavaScriptParser.Break = 70;
JavaScriptParser.Do = 71;
JavaScriptParser.Instanceof = 72;
JavaScriptParser.Typeof = 73;
JavaScriptParser.Case = 74;
JavaScriptParser.Else = 75;
JavaScriptParser.New = 76;
JavaScriptParser.Var = 77;
JavaScriptParser.Catch = 78;
JavaScriptParser.Finally = 79;
JavaScriptParser.Return = 80;
JavaScriptParser.Void = 81;
JavaScriptParser.Continue = 82;
JavaScriptParser.For = 83;
JavaScriptParser.Switch = 84;
JavaScriptParser.While = 85;
JavaScriptParser.Debugger = 86;
JavaScriptParser.FunctionObject = 87;
JavaScriptParser.This = 88;
JavaScriptParser.With = 89;
JavaScriptParser.Default = 90;
JavaScriptParser.If = 91;
JavaScriptParser.Throw = 92;
JavaScriptParser.Delete = 93;
JavaScriptParser.In = 94;
JavaScriptParser.Try = 95;
JavaScriptParser.As = 96;
JavaScriptParser.From = 97;
JavaScriptParser.Class = 98;
JavaScriptParser.Enum = 99;
JavaScriptParser.Extends = 100;
JavaScriptParser.Super = 101;
JavaScriptParser.Const = 102;
JavaScriptParser.Export = 103;
JavaScriptParser.Import = 104;
JavaScriptParser.Async = 105;
JavaScriptParser.Await = 106;
JavaScriptParser.Yield = 107;
JavaScriptParser.Implements = 108;
JavaScriptParser.StrictLet = 109;
JavaScriptParser.NonStrictLet = 110;
JavaScriptParser.Private = 111;
JavaScriptParser.Public = 112;
JavaScriptParser.Interface = 113;
JavaScriptParser.Package = 114;
JavaScriptParser.Protected = 115;
JavaScriptParser.Static = 116;
JavaScriptParser.Identifier = 117;
JavaScriptParser.StringLiteral = 118;
JavaScriptParser.BackTick = 119;
JavaScriptParser.WhiteSpaces = 120;
JavaScriptParser.LineTerminator = 121;
JavaScriptParser.HtmlComment = 122;
JavaScriptParser.CDataComment = 123;
JavaScriptParser.UnexpectedCharacter = 124;
JavaScriptParser.TemplateStringStartExpression = 125;
JavaScriptParser.TemplateStringAtom = 126;
JavaScriptParser.RULE_program = 0;
JavaScriptParser.RULE_sourceElement = 1;
JavaScriptParser.RULE_statement = 2;
JavaScriptParser.RULE_block = 3;
JavaScriptParser.RULE_statementList = 4;
JavaScriptParser.RULE_importStatement = 5;
JavaScriptParser.RULE_importFromBlock = 6;
JavaScriptParser.RULE_moduleItems = 7;
JavaScriptParser.RULE_importDefault = 8;
JavaScriptParser.RULE_importNamespace = 9;
JavaScriptParser.RULE_importFrom = 10;
JavaScriptParser.RULE_aliasName = 11;
JavaScriptParser.RULE_exportStatement = 12;
JavaScriptParser.RULE_exportFromBlock = 13;
JavaScriptParser.RULE_declaration = 14;
JavaScriptParser.RULE_variableStatement = 15;
JavaScriptParser.RULE_variableDeclarationList = 16;
JavaScriptParser.RULE_variableDeclaration = 17;
JavaScriptParser.RULE_emptyStatement_ = 18;
JavaScriptParser.RULE_expressionStatement = 19;
JavaScriptParser.RULE_ifStatement = 20;
JavaScriptParser.RULE_iterationStatement = 21;
JavaScriptParser.RULE_varModifier = 22;
JavaScriptParser.RULE_continueStatement = 23;
JavaScriptParser.RULE_breakStatement = 24;
JavaScriptParser.RULE_returnStatement = 25;
JavaScriptParser.RULE_yieldStatement = 26;
JavaScriptParser.RULE_withStatement = 27;
JavaScriptParser.RULE_switchStatement = 28;
JavaScriptParser.RULE_caseBlock = 29;
JavaScriptParser.RULE_caseClauses = 30;
JavaScriptParser.RULE_caseClause = 31;
JavaScriptParser.RULE_defaultClause = 32;
JavaScriptParser.RULE_labelledStatement = 33;
JavaScriptParser.RULE_throwStatement = 34;
JavaScriptParser.RULE_tryStatement = 35;
JavaScriptParser.RULE_catchProduction = 36;
JavaScriptParser.RULE_finallyProduction = 37;
JavaScriptParser.RULE_debuggerStatement = 38;
JavaScriptParser.RULE_functionDeclaration = 39;
JavaScriptParser.RULE_classDeclaration = 40;
JavaScriptParser.RULE_classTail = 41;
JavaScriptParser.RULE_classElement = 42;
JavaScriptParser.RULE_methodDefinition = 43;
JavaScriptParser.RULE_formalParameterList = 44;
JavaScriptParser.RULE_formalParameterArg = 45;
JavaScriptParser.RULE_lastFormalParameterArg = 46;
JavaScriptParser.RULE_functionBody = 47;
JavaScriptParser.RULE_sourceElements = 48;
JavaScriptParser.RULE_arrayLiteral = 49;
JavaScriptParser.RULE_elementList = 50;
JavaScriptParser.RULE_arrayElement = 51;
JavaScriptParser.RULE_propertyAssignment = 52;
JavaScriptParser.RULE_propertyName = 53;
JavaScriptParser.RULE_arguments = 54;
JavaScriptParser.RULE_argument = 55;
JavaScriptParser.RULE_expressionSequence = 56;
JavaScriptParser.RULE_singleExpression = 57;
JavaScriptParser.RULE_assignable = 58;
JavaScriptParser.RULE_objectLiteral = 59;
JavaScriptParser.RULE_anonymousFunction = 60;
JavaScriptParser.RULE_arrowFunctionParameters = 61;
JavaScriptParser.RULE_arrowFunctionBody = 62;
JavaScriptParser.RULE_assignmentOperator = 63;
JavaScriptParser.RULE_literal = 64;
JavaScriptParser.RULE_templateStringLiteral = 65;
JavaScriptParser.RULE_templateStringAtom = 66;
JavaScriptParser.RULE_numericLiteral = 67;
JavaScriptParser.RULE_bigintLiteral = 68;
JavaScriptParser.RULE_getter = 69;
JavaScriptParser.RULE_setter = 70;
JavaScriptParser.RULE_identifierName = 71;
JavaScriptParser.RULE_identifier = 72;
JavaScriptParser.RULE_reservedWord = 73;
JavaScriptParser.RULE_keyword = 74;
JavaScriptParser.RULE_let_ = 75;
JavaScriptParser.RULE_eos = 76;
class ProgramContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaScriptParser.RULE_program;
  }
  EOF() {
    return this.getToken(JavaScriptParser.EOF, 0);
  }
  sourceElements() {
    return this.getTypedRuleContext(SourceElementsContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterProgram(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitProgram(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitProgram(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class SourceElementContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaScriptParser.RULE_sourceElement;
  }
  statement() {
    return this.getTypedRuleContext(StatementContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterSourceElement(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitSourceElement(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitSourceElement(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class StatementContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaScriptParser.RULE_statement;
  }
  block() {
    return this.getTypedRuleContext(BlockContext, 0);
  }
  variableStatement() {
    return this.getTypedRuleContext(VariableStatementContext, 0);
  }
  importStatement() {
    return this.getTypedRuleContext(ImportStatementContext, 0);
  }
  exportStatement() {
    return this.getTypedRuleContext(ExportStatementContext, 0);
  }
  emptyStatement_() {
    return this.getTypedRuleContext(EmptyStatement_Context, 0);
  }
  classDeclaration() {
    return this.getTypedRuleContext(ClassDeclarationContext, 0);
  }
  expressionStatement() {
    return this.getTypedRuleContext(ExpressionStatementContext, 0);
  }
  ifStatement() {
    return this.getTypedRuleContext(IfStatementContext, 0);
  }
  iterationStatement() {
    return this.getTypedRuleContext(IterationStatementContext, 0);
  }
  continueStatement() {
    return this.getTypedRuleContext(ContinueStatementContext, 0);
  }
  breakStatement() {
    return this.getTypedRuleContext(BreakStatementContext, 0);
  }
  returnStatement() {
    return this.getTypedRuleContext(ReturnStatementContext, 0);
  }
  yieldStatement() {
    return this.getTypedRuleContext(YieldStatementContext, 0);
  }
  withStatement() {
    return this.getTypedRuleContext(WithStatementContext, 0);
  }
  labelledStatement() {
    return this.getTypedRuleContext(LabelledStatementContext, 0);
  }
  switchStatement() {
    return this.getTypedRuleContext(SwitchStatementContext, 0);
  }
  throwStatement() {
    return this.getTypedRuleContext(ThrowStatementContext, 0);
  }
  tryStatement() {
    return this.getTypedRuleContext(TryStatementContext, 0);
  }
  debuggerStatement() {
    return this.getTypedRuleContext(DebuggerStatementContext, 0);
  }
  functionDeclaration() {
    return this.getTypedRuleContext(FunctionDeclarationContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterStatement(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitStatement(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitStatement(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class BlockContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaScriptParser.RULE_block;
  }
  OpenBrace() {
    return this.getToken(JavaScriptParser.OpenBrace, 0);
  }
  CloseBrace() {
    return this.getToken(JavaScriptParser.CloseBrace, 0);
  }
  statementList() {
    return this.getTypedRuleContext(StatementListContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterBlock(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitBlock(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitBlock(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class StatementListContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaScriptParser.RULE_statementList;
  }
  statement = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(StatementContext);
    } else {
      return this.getTypedRuleContext(StatementContext, i);
    }
  };
  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterStatementList(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitStatementList(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitStatementList(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class ImportStatementContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaScriptParser.RULE_importStatement;
  }
  Import() {
    return this.getToken(JavaScriptParser.Import, 0);
  }
  importFromBlock() {
    return this.getTypedRuleContext(ImportFromBlockContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterImportStatement(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitImportStatement(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitImportStatement(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class ImportFromBlockContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaScriptParser.RULE_importFromBlock;
  }
  importFrom() {
    return this.getTypedRuleContext(ImportFromContext, 0);
  }
  eos() {
    return this.getTypedRuleContext(EosContext, 0);
  }
  importNamespace() {
    return this.getTypedRuleContext(ImportNamespaceContext, 0);
  }
  moduleItems() {
    return this.getTypedRuleContext(ModuleItemsContext, 0);
  }
  importDefault() {
    return this.getTypedRuleContext(ImportDefaultContext, 0);
  }
  StringLiteral() {
    return this.getToken(JavaScriptParser.StringLiteral, 0);
  }
  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterImportFromBlock(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitImportFromBlock(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitImportFromBlock(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class ModuleItemsContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaScriptParser.RULE_moduleItems;
  }
  OpenBrace() {
    return this.getToken(JavaScriptParser.OpenBrace, 0);
  }
  CloseBrace() {
    return this.getToken(JavaScriptParser.CloseBrace, 0);
  }
  aliasName = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(AliasNameContext);
    } else {
      return this.getTypedRuleContext(AliasNameContext, i);
    }
  };
  Comma = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTokens(JavaScriptParser.Comma);
    } else {
      return this.getToken(JavaScriptParser.Comma, i);
    }
  };
  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterModuleItems(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitModuleItems(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitModuleItems(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class ImportDefaultContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaScriptParser.RULE_importDefault;
  }
  aliasName() {
    return this.getTypedRuleContext(AliasNameContext, 0);
  }
  Comma() {
    return this.getToken(JavaScriptParser.Comma, 0);
  }
  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterImportDefault(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitImportDefault(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitImportDefault(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class ImportNamespaceContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaScriptParser.RULE_importNamespace;
  }
  Multiply() {
    return this.getToken(JavaScriptParser.Multiply, 0);
  }
  identifierName = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(IdentifierNameContext);
    } else {
      return this.getTypedRuleContext(IdentifierNameContext, i);
    }
  };
  As() {
    return this.getToken(JavaScriptParser.As, 0);
  }
  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterImportNamespace(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitImportNamespace(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitImportNamespace(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class ImportFromContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaScriptParser.RULE_importFrom;
  }
  From() {
    return this.getToken(JavaScriptParser.From, 0);
  }
  StringLiteral() {
    return this.getToken(JavaScriptParser.StringLiteral, 0);
  }
  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterImportFrom(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitImportFrom(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitImportFrom(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class AliasNameContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaScriptParser.RULE_aliasName;
  }
  identifierName = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(IdentifierNameContext);
    } else {
      return this.getTypedRuleContext(IdentifierNameContext, i);
    }
  };
  As() {
    return this.getToken(JavaScriptParser.As, 0);
  }
  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterAliasName(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitAliasName(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitAliasName(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class ExportStatementContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaScriptParser.RULE_exportStatement;
  }
  copyFrom(ctx) {
    super.copyFrom(ctx);
  }
}
class ExportDefaultDeclarationContext extends ExportStatementContext {
  constructor(parser, ctx) {
    super(parser);
    super.copyFrom(ctx);
  }
  Export() {
    return this.getToken(JavaScriptParser.Export, 0);
  }
  Default() {
    return this.getToken(JavaScriptParser.Default, 0);
  }
  singleExpression() {
    return this.getTypedRuleContext(SingleExpressionContext, 0);
  }
  eos() {
    return this.getTypedRuleContext(EosContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterExportDefaultDeclaration(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitExportDefaultDeclaration(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitExportDefaultDeclaration(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
JavaScriptParser.ExportDefaultDeclarationContext = ExportDefaultDeclarationContext;
class ExportDeclarationContext extends ExportStatementContext {
  constructor(parser, ctx) {
    super(parser);
    super.copyFrom(ctx);
  }
  Export() {
    return this.getToken(JavaScriptParser.Export, 0);
  }
  eos() {
    return this.getTypedRuleContext(EosContext, 0);
  }
  exportFromBlock() {
    return this.getTypedRuleContext(ExportFromBlockContext, 0);
  }
  declaration() {
    return this.getTypedRuleContext(DeclarationContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterExportDeclaration(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitExportDeclaration(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitExportDeclaration(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
JavaScriptParser.ExportDeclarationContext = ExportDeclarationContext;
class ExportFromBlockContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaScriptParser.RULE_exportFromBlock;
  }
  importNamespace() {
    return this.getTypedRuleContext(ImportNamespaceContext, 0);
  }
  importFrom() {
    return this.getTypedRuleContext(ImportFromContext, 0);
  }
  eos() {
    return this.getTypedRuleContext(EosContext, 0);
  }
  moduleItems() {
    return this.getTypedRuleContext(ModuleItemsContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterExportFromBlock(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitExportFromBlock(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitExportFromBlock(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class DeclarationContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaScriptParser.RULE_declaration;
  }
  variableStatement() {
    return this.getTypedRuleContext(VariableStatementContext, 0);
  }
  classDeclaration() {
    return this.getTypedRuleContext(ClassDeclarationContext, 0);
  }
  functionDeclaration() {
    return this.getTypedRuleContext(FunctionDeclarationContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterDeclaration(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitDeclaration(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitDeclaration(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class VariableStatementContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaScriptParser.RULE_variableStatement;
  }
  variableDeclarationList() {
    return this.getTypedRuleContext(VariableDeclarationListContext, 0);
  }
  eos() {
    return this.getTypedRuleContext(EosContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterVariableStatement(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitVariableStatement(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitVariableStatement(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class VariableDeclarationListContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaScriptParser.RULE_variableDeclarationList;
  }
  varModifier() {
    return this.getTypedRuleContext(VarModifierContext, 0);
  }
  variableDeclaration = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(VariableDeclarationContext);
    } else {
      return this.getTypedRuleContext(VariableDeclarationContext, i);
    }
  };
  Comma = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTokens(JavaScriptParser.Comma);
    } else {
      return this.getToken(JavaScriptParser.Comma, i);
    }
  };
  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterVariableDeclarationList(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitVariableDeclarationList(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitVariableDeclarationList(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class VariableDeclarationContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaScriptParser.RULE_variableDeclaration;
  }
  assignable() {
    return this.getTypedRuleContext(AssignableContext, 0);
  }
  Assign() {
    return this.getToken(JavaScriptParser.Assign, 0);
  }
  singleExpression() {
    return this.getTypedRuleContext(SingleExpressionContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterVariableDeclaration(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitVariableDeclaration(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitVariableDeclaration(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class EmptyStatement_Context extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaScriptParser.RULE_emptyStatement_;
  }
  SemiColon() {
    return this.getToken(JavaScriptParser.SemiColon, 0);
  }
  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterEmptyStatement_(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitEmptyStatement_(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitEmptyStatement_(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class ExpressionStatementContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaScriptParser.RULE_expressionStatement;
  }
  expressionSequence() {
    return this.getTypedRuleContext(ExpressionSequenceContext, 0);
  }
  eos() {
    return this.getTypedRuleContext(EosContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterExpressionStatement(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitExpressionStatement(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitExpressionStatement(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class IfStatementContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaScriptParser.RULE_ifStatement;
  }
  If() {
    return this.getToken(JavaScriptParser.If, 0);
  }
  OpenParen() {
    return this.getToken(JavaScriptParser.OpenParen, 0);
  }
  expressionSequence() {
    return this.getTypedRuleContext(ExpressionSequenceContext, 0);
  }
  CloseParen() {
    return this.getToken(JavaScriptParser.CloseParen, 0);
  }
  statement = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(StatementContext);
    } else {
      return this.getTypedRuleContext(StatementContext, i);
    }
  };
  Else() {
    return this.getToken(JavaScriptParser.Else, 0);
  }
  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterIfStatement(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitIfStatement(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitIfStatement(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class IterationStatementContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaScriptParser.RULE_iterationStatement;
  }
  copyFrom(ctx) {
    super.copyFrom(ctx);
  }
}
class DoStatementContext extends IterationStatementContext {
  constructor(parser, ctx) {
    super(parser);
    super.copyFrom(ctx);
  }
  Do() {
    return this.getToken(JavaScriptParser.Do, 0);
  }
  statement() {
    return this.getTypedRuleContext(StatementContext, 0);
  }
  While() {
    return this.getToken(JavaScriptParser.While, 0);
  }
  OpenParen() {
    return this.getToken(JavaScriptParser.OpenParen, 0);
  }
  expressionSequence() {
    return this.getTypedRuleContext(ExpressionSequenceContext, 0);
  }
  CloseParen() {
    return this.getToken(JavaScriptParser.CloseParen, 0);
  }
  eos() {
    return this.getTypedRuleContext(EosContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterDoStatement(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitDoStatement(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitDoStatement(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
JavaScriptParser.DoStatementContext = DoStatementContext;
class WhileStatementContext extends IterationStatementContext {
  constructor(parser, ctx) {
    super(parser);
    super.copyFrom(ctx);
  }
  While() {
    return this.getToken(JavaScriptParser.While, 0);
  }
  OpenParen() {
    return this.getToken(JavaScriptParser.OpenParen, 0);
  }
  expressionSequence() {
    return this.getTypedRuleContext(ExpressionSequenceContext, 0);
  }
  CloseParen() {
    return this.getToken(JavaScriptParser.CloseParen, 0);
  }
  statement() {
    return this.getTypedRuleContext(StatementContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterWhileStatement(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitWhileStatement(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitWhileStatement(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
JavaScriptParser.WhileStatementContext = WhileStatementContext;
class ForStatementContext extends IterationStatementContext {
  constructor(parser, ctx) {
    super(parser);
    super.copyFrom(ctx);
  }
  For() {
    return this.getToken(JavaScriptParser.For, 0);
  }
  OpenParen() {
    return this.getToken(JavaScriptParser.OpenParen, 0);
  }
  SemiColon = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTokens(JavaScriptParser.SemiColon);
    } else {
      return this.getToken(JavaScriptParser.SemiColon, i);
    }
  };
  CloseParen() {
    return this.getToken(JavaScriptParser.CloseParen, 0);
  }
  statement() {
    return this.getTypedRuleContext(StatementContext, 0);
  }
  expressionSequence = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(ExpressionSequenceContext);
    } else {
      return this.getTypedRuleContext(ExpressionSequenceContext, i);
    }
  };
  variableDeclarationList() {
    return this.getTypedRuleContext(VariableDeclarationListContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterForStatement(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitForStatement(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitForStatement(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
JavaScriptParser.ForStatementContext = ForStatementContext;
class ForInStatementContext extends IterationStatementContext {
  constructor(parser, ctx) {
    super(parser);
    super.copyFrom(ctx);
  }
  For() {
    return this.getToken(JavaScriptParser.For, 0);
  }
  OpenParen() {
    return this.getToken(JavaScriptParser.OpenParen, 0);
  }
  In() {
    return this.getToken(JavaScriptParser.In, 0);
  }
  expressionSequence() {
    return this.getTypedRuleContext(ExpressionSequenceContext, 0);
  }
  CloseParen() {
    return this.getToken(JavaScriptParser.CloseParen, 0);
  }
  statement() {
    return this.getTypedRuleContext(StatementContext, 0);
  }
  singleExpression() {
    return this.getTypedRuleContext(SingleExpressionContext, 0);
  }
  variableDeclarationList() {
    return this.getTypedRuleContext(VariableDeclarationListContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterForInStatement(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitForInStatement(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitForInStatement(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
JavaScriptParser.ForInStatementContext = ForInStatementContext;
class ForOfStatementContext extends IterationStatementContext {
  constructor(parser, ctx) {
    super(parser);
    super.copyFrom(ctx);
  }
  For() {
    return this.getToken(JavaScriptParser.For, 0);
  }
  OpenParen() {
    return this.getToken(JavaScriptParser.OpenParen, 0);
  }
  identifier() {
    return this.getTypedRuleContext(IdentifierContext, 0);
  }
  expressionSequence() {
    return this.getTypedRuleContext(ExpressionSequenceContext, 0);
  }
  CloseParen() {
    return this.getToken(JavaScriptParser.CloseParen, 0);
  }
  statement() {
    return this.getTypedRuleContext(StatementContext, 0);
  }
  singleExpression() {
    return this.getTypedRuleContext(SingleExpressionContext, 0);
  }
  variableDeclarationList() {
    return this.getTypedRuleContext(VariableDeclarationListContext, 0);
  }
  Await() {
    return this.getToken(JavaScriptParser.Await, 0);
  }
  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterForOfStatement(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitForOfStatement(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitForOfStatement(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
JavaScriptParser.ForOfStatementContext = ForOfStatementContext;
class VarModifierContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaScriptParser.RULE_varModifier;
  }
  Var() {
    return this.getToken(JavaScriptParser.Var, 0);
  }
  let_() {
    return this.getTypedRuleContext(Let_Context, 0);
  }
  Const() {
    return this.getToken(JavaScriptParser.Const, 0);
  }
  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterVarModifier(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitVarModifier(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitVarModifier(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class ContinueStatementContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaScriptParser.RULE_continueStatement;
  }
  Continue() {
    return this.getToken(JavaScriptParser.Continue, 0);
  }
  eos() {
    return this.getTypedRuleContext(EosContext, 0);
  }
  identifier() {
    return this.getTypedRuleContext(IdentifierContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterContinueStatement(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitContinueStatement(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitContinueStatement(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class BreakStatementContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaScriptParser.RULE_breakStatement;
  }
  Break() {
    return this.getToken(JavaScriptParser.Break, 0);
  }
  eos() {
    return this.getTypedRuleContext(EosContext, 0);
  }
  identifier() {
    return this.getTypedRuleContext(IdentifierContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterBreakStatement(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitBreakStatement(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitBreakStatement(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class ReturnStatementContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaScriptParser.RULE_returnStatement;
  }
  Return() {
    return this.getToken(JavaScriptParser.Return, 0);
  }
  eos() {
    return this.getTypedRuleContext(EosContext, 0);
  }
  expressionSequence() {
    return this.getTypedRuleContext(ExpressionSequenceContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterReturnStatement(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitReturnStatement(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitReturnStatement(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class YieldStatementContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaScriptParser.RULE_yieldStatement;
  }
  Yield() {
    return this.getToken(JavaScriptParser.Yield, 0);
  }
  eos() {
    return this.getTypedRuleContext(EosContext, 0);
  }
  expressionSequence() {
    return this.getTypedRuleContext(ExpressionSequenceContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterYieldStatement(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitYieldStatement(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitYieldStatement(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class WithStatementContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaScriptParser.RULE_withStatement;
  }
  With() {
    return this.getToken(JavaScriptParser.With, 0);
  }
  OpenParen() {
    return this.getToken(JavaScriptParser.OpenParen, 0);
  }
  expressionSequence() {
    return this.getTypedRuleContext(ExpressionSequenceContext, 0);
  }
  CloseParen() {
    return this.getToken(JavaScriptParser.CloseParen, 0);
  }
  statement() {
    return this.getTypedRuleContext(StatementContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterWithStatement(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitWithStatement(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitWithStatement(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class SwitchStatementContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaScriptParser.RULE_switchStatement;
  }
  Switch() {
    return this.getToken(JavaScriptParser.Switch, 0);
  }
  OpenParen() {
    return this.getToken(JavaScriptParser.OpenParen, 0);
  }
  expressionSequence() {
    return this.getTypedRuleContext(ExpressionSequenceContext, 0);
  }
  CloseParen() {
    return this.getToken(JavaScriptParser.CloseParen, 0);
  }
  caseBlock() {
    return this.getTypedRuleContext(CaseBlockContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterSwitchStatement(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitSwitchStatement(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitSwitchStatement(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class CaseBlockContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaScriptParser.RULE_caseBlock;
  }
  OpenBrace() {
    return this.getToken(JavaScriptParser.OpenBrace, 0);
  }
  CloseBrace() {
    return this.getToken(JavaScriptParser.CloseBrace, 0);
  }
  caseClauses = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(CaseClausesContext);
    } else {
      return this.getTypedRuleContext(CaseClausesContext, i);
    }
  };
  defaultClause() {
    return this.getTypedRuleContext(DefaultClauseContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterCaseBlock(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitCaseBlock(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitCaseBlock(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class CaseClausesContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaScriptParser.RULE_caseClauses;
  }
  caseClause = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(CaseClauseContext);
    } else {
      return this.getTypedRuleContext(CaseClauseContext, i);
    }
  };
  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterCaseClauses(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitCaseClauses(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitCaseClauses(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class CaseClauseContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaScriptParser.RULE_caseClause;
  }
  Case() {
    return this.getToken(JavaScriptParser.Case, 0);
  }
  expressionSequence() {
    return this.getTypedRuleContext(ExpressionSequenceContext, 0);
  }
  Colon() {
    return this.getToken(JavaScriptParser.Colon, 0);
  }
  statementList() {
    return this.getTypedRuleContext(StatementListContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterCaseClause(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitCaseClause(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitCaseClause(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class DefaultClauseContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaScriptParser.RULE_defaultClause;
  }
  Default() {
    return this.getToken(JavaScriptParser.Default, 0);
  }
  Colon() {
    return this.getToken(JavaScriptParser.Colon, 0);
  }
  statementList() {
    return this.getTypedRuleContext(StatementListContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterDefaultClause(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitDefaultClause(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitDefaultClause(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class LabelledStatementContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaScriptParser.RULE_labelledStatement;
  }
  identifier() {
    return this.getTypedRuleContext(IdentifierContext, 0);
  }
  Colon() {
    return this.getToken(JavaScriptParser.Colon, 0);
  }
  statement() {
    return this.getTypedRuleContext(StatementContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterLabelledStatement(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitLabelledStatement(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitLabelledStatement(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class ThrowStatementContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaScriptParser.RULE_throwStatement;
  }
  Throw() {
    return this.getToken(JavaScriptParser.Throw, 0);
  }
  expressionSequence() {
    return this.getTypedRuleContext(ExpressionSequenceContext, 0);
  }
  eos() {
    return this.getTypedRuleContext(EosContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterThrowStatement(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitThrowStatement(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitThrowStatement(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class TryStatementContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaScriptParser.RULE_tryStatement;
  }
  Try() {
    return this.getToken(JavaScriptParser.Try, 0);
  }
  block() {
    return this.getTypedRuleContext(BlockContext, 0);
  }
  catchProduction() {
    return this.getTypedRuleContext(CatchProductionContext, 0);
  }
  finallyProduction() {
    return this.getTypedRuleContext(FinallyProductionContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterTryStatement(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitTryStatement(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitTryStatement(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class CatchProductionContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaScriptParser.RULE_catchProduction;
  }
  Catch() {
    return this.getToken(JavaScriptParser.Catch, 0);
  }
  block() {
    return this.getTypedRuleContext(BlockContext, 0);
  }
  OpenParen() {
    return this.getToken(JavaScriptParser.OpenParen, 0);
  }
  CloseParen() {
    return this.getToken(JavaScriptParser.CloseParen, 0);
  }
  assignable() {
    return this.getTypedRuleContext(AssignableContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterCatchProduction(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitCatchProduction(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitCatchProduction(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class FinallyProductionContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaScriptParser.RULE_finallyProduction;
  }
  Finally() {
    return this.getToken(JavaScriptParser.Finally, 0);
  }
  block() {
    return this.getTypedRuleContext(BlockContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterFinallyProduction(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitFinallyProduction(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitFinallyProduction(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class DebuggerStatementContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaScriptParser.RULE_debuggerStatement;
  }
  Debugger() {
    return this.getToken(JavaScriptParser.Debugger, 0);
  }
  eos() {
    return this.getTypedRuleContext(EosContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterDebuggerStatement(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitDebuggerStatement(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitDebuggerStatement(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class FunctionDeclarationContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaScriptParser.RULE_functionDeclaration;
  }
  FunctionObject() {
    return this.getToken(JavaScriptParser.FunctionObject, 0);
  }
  identifier() {
    return this.getTypedRuleContext(IdentifierContext, 0);
  }
  OpenParen() {
    return this.getToken(JavaScriptParser.OpenParen, 0);
  }
  CloseParen() {
    return this.getToken(JavaScriptParser.CloseParen, 0);
  }
  functionBody() {
    return this.getTypedRuleContext(FunctionBodyContext, 0);
  }
  Async() {
    return this.getToken(JavaScriptParser.Async, 0);
  }
  Multiply() {
    return this.getToken(JavaScriptParser.Multiply, 0);
  }
  formalParameterList() {
    return this.getTypedRuleContext(FormalParameterListContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterFunctionDeclaration(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitFunctionDeclaration(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitFunctionDeclaration(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class ClassDeclarationContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaScriptParser.RULE_classDeclaration;
  }
  Class() {
    return this.getToken(JavaScriptParser.Class, 0);
  }
  identifier() {
    return this.getTypedRuleContext(IdentifierContext, 0);
  }
  classTail() {
    return this.getTypedRuleContext(ClassTailContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterClassDeclaration(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitClassDeclaration(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitClassDeclaration(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class ClassTailContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaScriptParser.RULE_classTail;
  }
  OpenBrace() {
    return this.getToken(JavaScriptParser.OpenBrace, 0);
  }
  CloseBrace() {
    return this.getToken(JavaScriptParser.CloseBrace, 0);
  }
  Extends() {
    return this.getToken(JavaScriptParser.Extends, 0);
  }
  singleExpression() {
    return this.getTypedRuleContext(SingleExpressionContext, 0);
  }
  classElement = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(ClassElementContext);
    } else {
      return this.getTypedRuleContext(ClassElementContext, i);
    }
  };
  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterClassTail(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitClassTail(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitClassTail(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class ClassElementContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaScriptParser.RULE_classElement;
  }
  methodDefinition() {
    return this.getTypedRuleContext(MethodDefinitionContext, 0);
  }
  assignable() {
    return this.getTypedRuleContext(AssignableContext, 0);
  }
  Assign() {
    return this.getToken(JavaScriptParser.Assign, 0);
  }
  objectLiteral() {
    return this.getTypedRuleContext(ObjectLiteralContext, 0);
  }
  SemiColon() {
    return this.getToken(JavaScriptParser.SemiColon, 0);
  }
  Static = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTokens(JavaScriptParser.Static);
    } else {
      return this.getToken(JavaScriptParser.Static, i);
    }
  };
  identifier = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(IdentifierContext);
    } else {
      return this.getTypedRuleContext(IdentifierContext, i);
    }
  };
  Async = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTokens(JavaScriptParser.Async);
    } else {
      return this.getToken(JavaScriptParser.Async, i);
    }
  };
  emptyStatement_() {
    return this.getTypedRuleContext(EmptyStatement_Context, 0);
  }
  propertyName() {
    return this.getTypedRuleContext(PropertyNameContext, 0);
  }
  singleExpression() {
    return this.getTypedRuleContext(SingleExpressionContext, 0);
  }
  Hashtag() {
    return this.getToken(JavaScriptParser.Hashtag, 0);
  }
  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterClassElement(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitClassElement(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitClassElement(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class MethodDefinitionContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaScriptParser.RULE_methodDefinition;
  }
  propertyName() {
    return this.getTypedRuleContext(PropertyNameContext, 0);
  }
  OpenParen() {
    return this.getToken(JavaScriptParser.OpenParen, 0);
  }
  CloseParen() {
    return this.getToken(JavaScriptParser.CloseParen, 0);
  }
  functionBody() {
    return this.getTypedRuleContext(FunctionBodyContext, 0);
  }
  Multiply() {
    return this.getToken(JavaScriptParser.Multiply, 0);
  }
  Hashtag() {
    return this.getToken(JavaScriptParser.Hashtag, 0);
  }
  formalParameterList() {
    return this.getTypedRuleContext(FormalParameterListContext, 0);
  }
  getter() {
    return this.getTypedRuleContext(GetterContext, 0);
  }
  setter() {
    return this.getTypedRuleContext(SetterContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterMethodDefinition(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitMethodDefinition(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitMethodDefinition(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class FormalParameterListContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaScriptParser.RULE_formalParameterList;
  }
  formalParameterArg = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(FormalParameterArgContext);
    } else {
      return this.getTypedRuleContext(FormalParameterArgContext, i);
    }
  };
  Comma = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTokens(JavaScriptParser.Comma);
    } else {
      return this.getToken(JavaScriptParser.Comma, i);
    }
  };
  lastFormalParameterArg() {
    return this.getTypedRuleContext(LastFormalParameterArgContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterFormalParameterList(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitFormalParameterList(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitFormalParameterList(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class FormalParameterArgContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaScriptParser.RULE_formalParameterArg;
  }
  assignable() {
    return this.getTypedRuleContext(AssignableContext, 0);
  }
  Assign() {
    return this.getToken(JavaScriptParser.Assign, 0);
  }
  singleExpression() {
    return this.getTypedRuleContext(SingleExpressionContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterFormalParameterArg(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitFormalParameterArg(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitFormalParameterArg(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class LastFormalParameterArgContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaScriptParser.RULE_lastFormalParameterArg;
  }
  Ellipsis() {
    return this.getToken(JavaScriptParser.Ellipsis, 0);
  }
  singleExpression() {
    return this.getTypedRuleContext(SingleExpressionContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterLastFormalParameterArg(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitLastFormalParameterArg(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitLastFormalParameterArg(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class FunctionBodyContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaScriptParser.RULE_functionBody;
  }
  OpenBrace() {
    return this.getToken(JavaScriptParser.OpenBrace, 0);
  }
  CloseBrace() {
    return this.getToken(JavaScriptParser.CloseBrace, 0);
  }
  sourceElements() {
    return this.getTypedRuleContext(SourceElementsContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterFunctionBody(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitFunctionBody(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitFunctionBody(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class SourceElementsContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaScriptParser.RULE_sourceElements;
  }
  sourceElement = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(SourceElementContext);
    } else {
      return this.getTypedRuleContext(SourceElementContext, i);
    }
  };
  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterSourceElements(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitSourceElements(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitSourceElements(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class ArrayLiteralContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaScriptParser.RULE_arrayLiteral;
  }
  OpenBracket() {
    return this.getToken(JavaScriptParser.OpenBracket, 0);
  }
  elementList() {
    return this.getTypedRuleContext(ElementListContext, 0);
  }
  CloseBracket() {
    return this.getToken(JavaScriptParser.CloseBracket, 0);
  }
  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterArrayLiteral(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitArrayLiteral(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitArrayLiteral(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class ElementListContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaScriptParser.RULE_elementList;
  }
  Comma = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTokens(JavaScriptParser.Comma);
    } else {
      return this.getToken(JavaScriptParser.Comma, i);
    }
  };
  arrayElement = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(ArrayElementContext);
    } else {
      return this.getTypedRuleContext(ArrayElementContext, i);
    }
  };
  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterElementList(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitElementList(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitElementList(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class ArrayElementContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaScriptParser.RULE_arrayElement;
  }
  singleExpression() {
    return this.getTypedRuleContext(SingleExpressionContext, 0);
  }
  Ellipsis() {
    return this.getToken(JavaScriptParser.Ellipsis, 0);
  }
  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterArrayElement(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitArrayElement(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitArrayElement(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class PropertyAssignmentContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaScriptParser.RULE_propertyAssignment;
  }
  copyFrom(ctx) {
    super.copyFrom(ctx);
  }
}
class PropertyExpressionAssignmentContext extends PropertyAssignmentContext {
  constructor(parser, ctx) {
    super(parser);
    super.copyFrom(ctx);
  }
  propertyName() {
    return this.getTypedRuleContext(PropertyNameContext, 0);
  }
  Colon() {
    return this.getToken(JavaScriptParser.Colon, 0);
  }
  singleExpression() {
    return this.getTypedRuleContext(SingleExpressionContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterPropertyExpressionAssignment(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitPropertyExpressionAssignment(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitPropertyExpressionAssignment(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
JavaScriptParser.PropertyExpressionAssignmentContext = PropertyExpressionAssignmentContext;
class ComputedPropertyExpressionAssignmentContext extends PropertyAssignmentContext {
  constructor(parser, ctx) {
    super(parser);
    super.copyFrom(ctx);
  }
  OpenBracket() {
    return this.getToken(JavaScriptParser.OpenBracket, 0);
  }
  singleExpression = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(SingleExpressionContext);
    } else {
      return this.getTypedRuleContext(SingleExpressionContext, i);
    }
  };
  CloseBracket() {
    return this.getToken(JavaScriptParser.CloseBracket, 0);
  }
  Colon() {
    return this.getToken(JavaScriptParser.Colon, 0);
  }
  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterComputedPropertyExpressionAssignment(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitComputedPropertyExpressionAssignment(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitComputedPropertyExpressionAssignment(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
JavaScriptParser.ComputedPropertyExpressionAssignmentContext = ComputedPropertyExpressionAssignmentContext;
class PropertyShorthandContext extends PropertyAssignmentContext {
  constructor(parser, ctx) {
    super(parser);
    super.copyFrom(ctx);
  }
  singleExpression() {
    return this.getTypedRuleContext(SingleExpressionContext, 0);
  }
  Ellipsis() {
    return this.getToken(JavaScriptParser.Ellipsis, 0);
  }
  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterPropertyShorthand(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitPropertyShorthand(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitPropertyShorthand(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
JavaScriptParser.PropertyShorthandContext = PropertyShorthandContext;
class PropertySetterContext extends PropertyAssignmentContext {
  constructor(parser, ctx) {
    super(parser);
    super.copyFrom(ctx);
  }
  setter() {
    return this.getTypedRuleContext(SetterContext, 0);
  }
  OpenParen() {
    return this.getToken(JavaScriptParser.OpenParen, 0);
  }
  formalParameterArg() {
    return this.getTypedRuleContext(FormalParameterArgContext, 0);
  }
  CloseParen() {
    return this.getToken(JavaScriptParser.CloseParen, 0);
  }
  functionBody() {
    return this.getTypedRuleContext(FunctionBodyContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterPropertySetter(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitPropertySetter(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitPropertySetter(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
JavaScriptParser.PropertySetterContext = PropertySetterContext;
class PropertyGetterContext extends PropertyAssignmentContext {
  constructor(parser, ctx) {
    super(parser);
    super.copyFrom(ctx);
  }
  getter() {
    return this.getTypedRuleContext(GetterContext, 0);
  }
  OpenParen() {
    return this.getToken(JavaScriptParser.OpenParen, 0);
  }
  CloseParen() {
    return this.getToken(JavaScriptParser.CloseParen, 0);
  }
  functionBody() {
    return this.getTypedRuleContext(FunctionBodyContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterPropertyGetter(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitPropertyGetter(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitPropertyGetter(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
JavaScriptParser.PropertyGetterContext = PropertyGetterContext;
class FunctionPropertyContext extends PropertyAssignmentContext {
  constructor(parser, ctx) {
    super(parser);
    super.copyFrom(ctx);
  }
  propertyName() {
    return this.getTypedRuleContext(PropertyNameContext, 0);
  }
  OpenParen() {
    return this.getToken(JavaScriptParser.OpenParen, 0);
  }
  CloseParen() {
    return this.getToken(JavaScriptParser.CloseParen, 0);
  }
  functionBody() {
    return this.getTypedRuleContext(FunctionBodyContext, 0);
  }
  Async() {
    return this.getToken(JavaScriptParser.Async, 0);
  }
  Multiply() {
    return this.getToken(JavaScriptParser.Multiply, 0);
  }
  formalParameterList() {
    return this.getTypedRuleContext(FormalParameterListContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterFunctionProperty(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitFunctionProperty(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitFunctionProperty(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
JavaScriptParser.FunctionPropertyContext = FunctionPropertyContext;
class PropertyNameContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaScriptParser.RULE_propertyName;
  }
  identifierName() {
    return this.getTypedRuleContext(IdentifierNameContext, 0);
  }
  StringLiteral() {
    return this.getToken(JavaScriptParser.StringLiteral, 0);
  }
  numericLiteral() {
    return this.getTypedRuleContext(NumericLiteralContext, 0);
  }
  OpenBracket() {
    return this.getToken(JavaScriptParser.OpenBracket, 0);
  }
  singleExpression() {
    return this.getTypedRuleContext(SingleExpressionContext, 0);
  }
  CloseBracket() {
    return this.getToken(JavaScriptParser.CloseBracket, 0);
  }
  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterPropertyName(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitPropertyName(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitPropertyName(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class ArgumentsContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaScriptParser.RULE_arguments;
  }
  OpenParen() {
    return this.getToken(JavaScriptParser.OpenParen, 0);
  }
  CloseParen() {
    return this.getToken(JavaScriptParser.CloseParen, 0);
  }
  argument = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(ArgumentContext);
    } else {
      return this.getTypedRuleContext(ArgumentContext, i);
    }
  };
  Comma = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTokens(JavaScriptParser.Comma);
    } else {
      return this.getToken(JavaScriptParser.Comma, i);
    }
  };
  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterArguments(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitArguments(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitArguments(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class ArgumentContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaScriptParser.RULE_argument;
  }
  singleExpression() {
    return this.getTypedRuleContext(SingleExpressionContext, 0);
  }
  identifier() {
    return this.getTypedRuleContext(IdentifierContext, 0);
  }
  Ellipsis() {
    return this.getToken(JavaScriptParser.Ellipsis, 0);
  }
  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterArgument(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitArgument(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitArgument(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class ExpressionSequenceContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaScriptParser.RULE_expressionSequence;
  }
  singleExpression = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(SingleExpressionContext);
    } else {
      return this.getTypedRuleContext(SingleExpressionContext, i);
    }
  };
  Comma = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTokens(JavaScriptParser.Comma);
    } else {
      return this.getToken(JavaScriptParser.Comma, i);
    }
  };
  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterExpressionSequence(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitExpressionSequence(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitExpressionSequence(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class SingleExpressionContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaScriptParser.RULE_singleExpression;
  }
  copyFrom(ctx) {
    super.copyFrom(ctx);
  }
}
class TemplateStringExpressionContext extends SingleExpressionContext {
  constructor(parser, ctx) {
    super(parser);
    super.copyFrom(ctx);
  }
  singleExpression() {
    return this.getTypedRuleContext(SingleExpressionContext, 0);
  }
  templateStringLiteral() {
    return this.getTypedRuleContext(TemplateStringLiteralContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterTemplateStringExpression(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitTemplateStringExpression(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitTemplateStringExpression(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
JavaScriptParser.TemplateStringExpressionContext = TemplateStringExpressionContext;
class TernaryExpressionContext extends SingleExpressionContext {
  constructor(parser, ctx) {
    super(parser);
    super.copyFrom(ctx);
  }
  singleExpression = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(SingleExpressionContext);
    } else {
      return this.getTypedRuleContext(SingleExpressionContext, i);
    }
  };
  QuestionMark() {
    return this.getToken(JavaScriptParser.QuestionMark, 0);
  }
  Colon() {
    return this.getToken(JavaScriptParser.Colon, 0);
  }
  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterTernaryExpression(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitTernaryExpression(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitTernaryExpression(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
JavaScriptParser.TernaryExpressionContext = TernaryExpressionContext;
class LogicalAndExpressionContext extends SingleExpressionContext {
  constructor(parser, ctx) {
    super(parser);
    super.copyFrom(ctx);
  }
  singleExpression = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(SingleExpressionContext);
    } else {
      return this.getTypedRuleContext(SingleExpressionContext, i);
    }
  };
  And() {
    return this.getToken(JavaScriptParser.And, 0);
  }
  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterLogicalAndExpression(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitLogicalAndExpression(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitLogicalAndExpression(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
JavaScriptParser.LogicalAndExpressionContext = LogicalAndExpressionContext;
class PowerExpressionContext extends SingleExpressionContext {
  constructor(parser, ctx) {
    super(parser);
    super.copyFrom(ctx);
  }
  singleExpression = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(SingleExpressionContext);
    } else {
      return this.getTypedRuleContext(SingleExpressionContext, i);
    }
  };
  Power() {
    return this.getToken(JavaScriptParser.Power, 0);
  }
  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterPowerExpression(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitPowerExpression(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitPowerExpression(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
JavaScriptParser.PowerExpressionContext = PowerExpressionContext;
class PreIncrementExpressionContext extends SingleExpressionContext {
  constructor(parser, ctx) {
    super(parser);
    super.copyFrom(ctx);
  }
  PlusPlus() {
    return this.getToken(JavaScriptParser.PlusPlus, 0);
  }
  singleExpression() {
    return this.getTypedRuleContext(SingleExpressionContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterPreIncrementExpression(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitPreIncrementExpression(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitPreIncrementExpression(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
JavaScriptParser.PreIncrementExpressionContext = PreIncrementExpressionContext;
class ObjectLiteralExpressionContext extends SingleExpressionContext {
  constructor(parser, ctx) {
    super(parser);
    super.copyFrom(ctx);
  }
  objectLiteral() {
    return this.getTypedRuleContext(ObjectLiteralContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterObjectLiteralExpression(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitObjectLiteralExpression(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitObjectLiteralExpression(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
JavaScriptParser.ObjectLiteralExpressionContext = ObjectLiteralExpressionContext;
class MetaExpressionContext extends SingleExpressionContext {
  constructor(parser, ctx) {
    super(parser);
    super.copyFrom(ctx);
  }
  New() {
    return this.getToken(JavaScriptParser.New, 0);
  }
  Dot() {
    return this.getToken(JavaScriptParser.Dot, 0);
  }
  identifier() {
    return this.getTypedRuleContext(IdentifierContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterMetaExpression(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitMetaExpression(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitMetaExpression(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
JavaScriptParser.MetaExpressionContext = MetaExpressionContext;
class InExpressionContext extends SingleExpressionContext {
  constructor(parser, ctx) {
    super(parser);
    super.copyFrom(ctx);
  }
  singleExpression = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(SingleExpressionContext);
    } else {
      return this.getTypedRuleContext(SingleExpressionContext, i);
    }
  };
  In() {
    return this.getToken(JavaScriptParser.In, 0);
  }
  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterInExpression(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitInExpression(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitInExpression(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
JavaScriptParser.InExpressionContext = InExpressionContext;
class LogicalOrExpressionContext extends SingleExpressionContext {
  constructor(parser, ctx) {
    super(parser);
    super.copyFrom(ctx);
  }
  singleExpression = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(SingleExpressionContext);
    } else {
      return this.getTypedRuleContext(SingleExpressionContext, i);
    }
  };
  Or() {
    return this.getToken(JavaScriptParser.Or, 0);
  }
  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterLogicalOrExpression(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitLogicalOrExpression(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitLogicalOrExpression(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
JavaScriptParser.LogicalOrExpressionContext = LogicalOrExpressionContext;
class OptionalChainExpressionContext extends SingleExpressionContext {
  constructor(parser, ctx) {
    super(parser);
    super.copyFrom(ctx);
  }
  singleExpression = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(SingleExpressionContext);
    } else {
      return this.getTypedRuleContext(SingleExpressionContext, i);
    }
  };
  QuestionMarkDot() {
    return this.getToken(JavaScriptParser.QuestionMarkDot, 0);
  }
  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterOptionalChainExpression(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitOptionalChainExpression(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitOptionalChainExpression(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
JavaScriptParser.OptionalChainExpressionContext = OptionalChainExpressionContext;
class NotExpressionContext extends SingleExpressionContext {
  constructor(parser, ctx) {
    super(parser);
    super.copyFrom(ctx);
  }
  Not() {
    return this.getToken(JavaScriptParser.Not, 0);
  }
  singleExpression() {
    return this.getTypedRuleContext(SingleExpressionContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterNotExpression(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitNotExpression(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitNotExpression(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
JavaScriptParser.NotExpressionContext = NotExpressionContext;
class PreDecreaseExpressionContext extends SingleExpressionContext {
  constructor(parser, ctx) {
    super(parser);
    super.copyFrom(ctx);
  }
  MinusMinus() {
    return this.getToken(JavaScriptParser.MinusMinus, 0);
  }
  singleExpression() {
    return this.getTypedRuleContext(SingleExpressionContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterPreDecreaseExpression(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitPreDecreaseExpression(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitPreDecreaseExpression(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
JavaScriptParser.PreDecreaseExpressionContext = PreDecreaseExpressionContext;
class ArgumentsExpressionContext extends SingleExpressionContext {
  constructor(parser, ctx) {
    super(parser);
    super.copyFrom(ctx);
  }
  singleExpression() {
    return this.getTypedRuleContext(SingleExpressionContext, 0);
  }
  arguments() {
    return this.getTypedRuleContext(ArgumentsContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterArgumentsExpression(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitArgumentsExpression(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitArgumentsExpression(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
JavaScriptParser.ArgumentsExpressionContext = ArgumentsExpressionContext;
class AwaitExpressionContext extends SingleExpressionContext {
  constructor(parser, ctx) {
    super(parser);
    super.copyFrom(ctx);
  }
  Await() {
    return this.getToken(JavaScriptParser.Await, 0);
  }
  singleExpression() {
    return this.getTypedRuleContext(SingleExpressionContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterAwaitExpression(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitAwaitExpression(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitAwaitExpression(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
JavaScriptParser.AwaitExpressionContext = AwaitExpressionContext;
class ThisExpressionContext extends SingleExpressionContext {
  constructor(parser, ctx) {
    super(parser);
    super.copyFrom(ctx);
  }
  This() {
    return this.getToken(JavaScriptParser.This, 0);
  }
  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterThisExpression(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitThisExpression(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitThisExpression(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
JavaScriptParser.ThisExpressionContext = ThisExpressionContext;
class FunctionExpressionContext extends SingleExpressionContext {
  constructor(parser, ctx) {
    super(parser);
    super.copyFrom(ctx);
  }
  anonymousFunction() {
    return this.getTypedRuleContext(AnonymousFunctionContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterFunctionExpression(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitFunctionExpression(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitFunctionExpression(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
JavaScriptParser.FunctionExpressionContext = FunctionExpressionContext;
class UnaryMinusExpressionContext extends SingleExpressionContext {
  constructor(parser, ctx) {
    super(parser);
    super.copyFrom(ctx);
  }
  Minus() {
    return this.getToken(JavaScriptParser.Minus, 0);
  }
  singleExpression() {
    return this.getTypedRuleContext(SingleExpressionContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterUnaryMinusExpression(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitUnaryMinusExpression(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitUnaryMinusExpression(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
JavaScriptParser.UnaryMinusExpressionContext = UnaryMinusExpressionContext;
class AssignmentExpressionContext extends SingleExpressionContext {
  constructor(parser, ctx) {
    super(parser);
    super.copyFrom(ctx);
  }
  singleExpression = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(SingleExpressionContext);
    } else {
      return this.getTypedRuleContext(SingleExpressionContext, i);
    }
  };
  Assign() {
    return this.getToken(JavaScriptParser.Assign, 0);
  }
  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterAssignmentExpression(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitAssignmentExpression(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitAssignmentExpression(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
JavaScriptParser.AssignmentExpressionContext = AssignmentExpressionContext;
class PostDecreaseExpressionContext extends SingleExpressionContext {
  constructor(parser, ctx) {
    super(parser);
    super.copyFrom(ctx);
  }
  singleExpression() {
    return this.getTypedRuleContext(SingleExpressionContext, 0);
  }
  MinusMinus() {
    return this.getToken(JavaScriptParser.MinusMinus, 0);
  }
  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterPostDecreaseExpression(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitPostDecreaseExpression(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitPostDecreaseExpression(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
JavaScriptParser.PostDecreaseExpressionContext = PostDecreaseExpressionContext;
class TypeofExpressionContext extends SingleExpressionContext {
  constructor(parser, ctx) {
    super(parser);
    super.copyFrom(ctx);
  }
  Typeof() {
    return this.getToken(JavaScriptParser.Typeof, 0);
  }
  singleExpression() {
    return this.getTypedRuleContext(SingleExpressionContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterTypeofExpression(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitTypeofExpression(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitTypeofExpression(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
JavaScriptParser.TypeofExpressionContext = TypeofExpressionContext;
class InstanceofExpressionContext extends SingleExpressionContext {
  constructor(parser, ctx) {
    super(parser);
    super.copyFrom(ctx);
  }
  singleExpression = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(SingleExpressionContext);
    } else {
      return this.getTypedRuleContext(SingleExpressionContext, i);
    }
  };
  Instanceof() {
    return this.getToken(JavaScriptParser.Instanceof, 0);
  }
  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterInstanceofExpression(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitInstanceofExpression(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitInstanceofExpression(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
JavaScriptParser.InstanceofExpressionContext = InstanceofExpressionContext;
class UnaryPlusExpressionContext extends SingleExpressionContext {
  constructor(parser, ctx) {
    super(parser);
    super.copyFrom(ctx);
  }
  Plus() {
    return this.getToken(JavaScriptParser.Plus, 0);
  }
  singleExpression() {
    return this.getTypedRuleContext(SingleExpressionContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterUnaryPlusExpression(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitUnaryPlusExpression(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitUnaryPlusExpression(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
JavaScriptParser.UnaryPlusExpressionContext = UnaryPlusExpressionContext;
class DeleteExpressionContext extends SingleExpressionContext {
  constructor(parser, ctx) {
    super(parser);
    super.copyFrom(ctx);
  }
  Delete() {
    return this.getToken(JavaScriptParser.Delete, 0);
  }
  singleExpression() {
    return this.getTypedRuleContext(SingleExpressionContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterDeleteExpression(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitDeleteExpression(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitDeleteExpression(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
JavaScriptParser.DeleteExpressionContext = DeleteExpressionContext;
class ImportExpressionContext extends SingleExpressionContext {
  constructor(parser, ctx) {
    super(parser);
    super.copyFrom(ctx);
  }
  Import() {
    return this.getToken(JavaScriptParser.Import, 0);
  }
  OpenParen() {
    return this.getToken(JavaScriptParser.OpenParen, 0);
  }
  singleExpression() {
    return this.getTypedRuleContext(SingleExpressionContext, 0);
  }
  CloseParen() {
    return this.getToken(JavaScriptParser.CloseParen, 0);
  }
  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterImportExpression(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitImportExpression(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitImportExpression(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
JavaScriptParser.ImportExpressionContext = ImportExpressionContext;
class EqualityExpressionContext extends SingleExpressionContext {
  constructor(parser, ctx) {
    super(parser);
    super.copyFrom(ctx);
  }
  singleExpression = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(SingleExpressionContext);
    } else {
      return this.getTypedRuleContext(SingleExpressionContext, i);
    }
  };
  Equals_() {
    return this.getToken(JavaScriptParser.Equals_, 0);
  }
  NotEquals() {
    return this.getToken(JavaScriptParser.NotEquals, 0);
  }
  IdentityEquals() {
    return this.getToken(JavaScriptParser.IdentityEquals, 0);
  }
  IdentityNotEquals() {
    return this.getToken(JavaScriptParser.IdentityNotEquals, 0);
  }
  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterEqualityExpression(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitEqualityExpression(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitEqualityExpression(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
JavaScriptParser.EqualityExpressionContext = EqualityExpressionContext;
class BitXOrExpressionContext extends SingleExpressionContext {
  constructor(parser, ctx) {
    super(parser);
    super.copyFrom(ctx);
  }
  singleExpression = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(SingleExpressionContext);
    } else {
      return this.getTypedRuleContext(SingleExpressionContext, i);
    }
  };
  BitXOr() {
    return this.getToken(JavaScriptParser.BitXOr, 0);
  }
  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterBitXOrExpression(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitBitXOrExpression(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitBitXOrExpression(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
JavaScriptParser.BitXOrExpressionContext = BitXOrExpressionContext;
class SuperExpressionContext extends SingleExpressionContext {
  constructor(parser, ctx) {
    super(parser);
    super.copyFrom(ctx);
  }
  Super() {
    return this.getToken(JavaScriptParser.Super, 0);
  }
  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterSuperExpression(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitSuperExpression(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitSuperExpression(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
JavaScriptParser.SuperExpressionContext = SuperExpressionContext;
class MultiplicativeExpressionContext extends SingleExpressionContext {
  constructor(parser, ctx) {
    super(parser);
    super.copyFrom(ctx);
  }
  singleExpression = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(SingleExpressionContext);
    } else {
      return this.getTypedRuleContext(SingleExpressionContext, i);
    }
  };
  Multiply() {
    return this.getToken(JavaScriptParser.Multiply, 0);
  }
  Divide() {
    return this.getToken(JavaScriptParser.Divide, 0);
  }
  Modulus() {
    return this.getToken(JavaScriptParser.Modulus, 0);
  }
  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterMultiplicativeExpression(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitMultiplicativeExpression(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitMultiplicativeExpression(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
JavaScriptParser.MultiplicativeExpressionContext = MultiplicativeExpressionContext;
class BitShiftExpressionContext extends SingleExpressionContext {
  constructor(parser, ctx) {
    super(parser);
    super.copyFrom(ctx);
  }
  singleExpression = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(SingleExpressionContext);
    } else {
      return this.getTypedRuleContext(SingleExpressionContext, i);
    }
  };
  LeftShiftArithmetic() {
    return this.getToken(JavaScriptParser.LeftShiftArithmetic, 0);
  }
  RightShiftArithmetic() {
    return this.getToken(JavaScriptParser.RightShiftArithmetic, 0);
  }
  RightShiftLogical() {
    return this.getToken(JavaScriptParser.RightShiftLogical, 0);
  }
  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterBitShiftExpression(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitBitShiftExpression(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitBitShiftExpression(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
JavaScriptParser.BitShiftExpressionContext = BitShiftExpressionContext;
class ParenthesizedExpressionContext extends SingleExpressionContext {
  constructor(parser, ctx) {
    super(parser);
    super.copyFrom(ctx);
  }
  OpenParen() {
    return this.getToken(JavaScriptParser.OpenParen, 0);
  }
  expressionSequence() {
    return this.getTypedRuleContext(ExpressionSequenceContext, 0);
  }
  CloseParen() {
    return this.getToken(JavaScriptParser.CloseParen, 0);
  }
  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterParenthesizedExpression(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitParenthesizedExpression(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitParenthesizedExpression(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
JavaScriptParser.ParenthesizedExpressionContext = ParenthesizedExpressionContext;
class AdditiveExpressionContext extends SingleExpressionContext {
  constructor(parser, ctx) {
    super(parser);
    super.copyFrom(ctx);
  }
  singleExpression = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(SingleExpressionContext);
    } else {
      return this.getTypedRuleContext(SingleExpressionContext, i);
    }
  };
  Plus() {
    return this.getToken(JavaScriptParser.Plus, 0);
  }
  Minus() {
    return this.getToken(JavaScriptParser.Minus, 0);
  }
  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterAdditiveExpression(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitAdditiveExpression(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitAdditiveExpression(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
JavaScriptParser.AdditiveExpressionContext = AdditiveExpressionContext;
class RelationalExpressionContext extends SingleExpressionContext {
  constructor(parser, ctx) {
    super(parser);
    super.copyFrom(ctx);
  }
  singleExpression = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(SingleExpressionContext);
    } else {
      return this.getTypedRuleContext(SingleExpressionContext, i);
    }
  };
  LessThan() {
    return this.getToken(JavaScriptParser.LessThan, 0);
  }
  MoreThan() {
    return this.getToken(JavaScriptParser.MoreThan, 0);
  }
  LessThanEquals() {
    return this.getToken(JavaScriptParser.LessThanEquals, 0);
  }
  GreaterThanEquals() {
    return this.getToken(JavaScriptParser.GreaterThanEquals, 0);
  }
  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterRelationalExpression(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitRelationalExpression(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitRelationalExpression(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
JavaScriptParser.RelationalExpressionContext = RelationalExpressionContext;
class PostIncrementExpressionContext extends SingleExpressionContext {
  constructor(parser, ctx) {
    super(parser);
    super.copyFrom(ctx);
  }
  singleExpression() {
    return this.getTypedRuleContext(SingleExpressionContext, 0);
  }
  PlusPlus() {
    return this.getToken(JavaScriptParser.PlusPlus, 0);
  }
  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterPostIncrementExpression(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitPostIncrementExpression(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitPostIncrementExpression(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
JavaScriptParser.PostIncrementExpressionContext = PostIncrementExpressionContext;
class YieldExpressionContext extends SingleExpressionContext {
  constructor(parser, ctx) {
    super(parser);
    super.copyFrom(ctx);
  }
  yieldStatement() {
    return this.getTypedRuleContext(YieldStatementContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterYieldExpression(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitYieldExpression(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitYieldExpression(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
JavaScriptParser.YieldExpressionContext = YieldExpressionContext;
class BitNotExpressionContext extends SingleExpressionContext {
  constructor(parser, ctx) {
    super(parser);
    super.copyFrom(ctx);
  }
  BitNot() {
    return this.getToken(JavaScriptParser.BitNot, 0);
  }
  singleExpression() {
    return this.getTypedRuleContext(SingleExpressionContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterBitNotExpression(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitBitNotExpression(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitBitNotExpression(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
JavaScriptParser.BitNotExpressionContext = BitNotExpressionContext;
class NewExpressionContext extends SingleExpressionContext {
  constructor(parser, ctx) {
    super(parser);
    super.copyFrom(ctx);
  }
  New() {
    return this.getToken(JavaScriptParser.New, 0);
  }
  singleExpression() {
    return this.getTypedRuleContext(SingleExpressionContext, 0);
  }
  arguments() {
    return this.getTypedRuleContext(ArgumentsContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterNewExpression(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitNewExpression(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitNewExpression(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
JavaScriptParser.NewExpressionContext = NewExpressionContext;
class LiteralExpressionContext extends SingleExpressionContext {
  constructor(parser, ctx) {
    super(parser);
    super.copyFrom(ctx);
  }
  literal() {
    return this.getTypedRuleContext(LiteralContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterLiteralExpression(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitLiteralExpression(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitLiteralExpression(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
JavaScriptParser.LiteralExpressionContext = LiteralExpressionContext;
class ArrayLiteralExpressionContext extends SingleExpressionContext {
  constructor(parser, ctx) {
    super(parser);
    super.copyFrom(ctx);
  }
  arrayLiteral() {
    return this.getTypedRuleContext(ArrayLiteralContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterArrayLiteralExpression(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitArrayLiteralExpression(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitArrayLiteralExpression(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
JavaScriptParser.ArrayLiteralExpressionContext = ArrayLiteralExpressionContext;
class MemberDotExpressionContext extends SingleExpressionContext {
  constructor(parser, ctx) {
    super(parser);
    super.copyFrom(ctx);
  }
  singleExpression() {
    return this.getTypedRuleContext(SingleExpressionContext, 0);
  }
  Dot() {
    return this.getToken(JavaScriptParser.Dot, 0);
  }
  identifierName() {
    return this.getTypedRuleContext(IdentifierNameContext, 0);
  }
  QuestionMark() {
    return this.getToken(JavaScriptParser.QuestionMark, 0);
  }
  Hashtag() {
    return this.getToken(JavaScriptParser.Hashtag, 0);
  }
  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterMemberDotExpression(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitMemberDotExpression(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitMemberDotExpression(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
JavaScriptParser.MemberDotExpressionContext = MemberDotExpressionContext;
class ClassExpressionContext extends SingleExpressionContext {
  constructor(parser, ctx) {
    super(parser);
    super.copyFrom(ctx);
  }
  Class() {
    return this.getToken(JavaScriptParser.Class, 0);
  }
  classTail() {
    return this.getTypedRuleContext(ClassTailContext, 0);
  }
  identifier() {
    return this.getTypedRuleContext(IdentifierContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterClassExpression(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitClassExpression(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitClassExpression(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
JavaScriptParser.ClassExpressionContext = ClassExpressionContext;
class MemberIndexExpressionContext extends SingleExpressionContext {
  constructor(parser, ctx) {
    super(parser);
    super.copyFrom(ctx);
  }
  singleExpression() {
    return this.getTypedRuleContext(SingleExpressionContext, 0);
  }
  OpenBracket() {
    return this.getToken(JavaScriptParser.OpenBracket, 0);
  }
  expressionSequence() {
    return this.getTypedRuleContext(ExpressionSequenceContext, 0);
  }
  CloseBracket() {
    return this.getToken(JavaScriptParser.CloseBracket, 0);
  }
  QuestionMarkDot() {
    return this.getToken(JavaScriptParser.QuestionMarkDot, 0);
  }
  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterMemberIndexExpression(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitMemberIndexExpression(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitMemberIndexExpression(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
JavaScriptParser.MemberIndexExpressionContext = MemberIndexExpressionContext;
class IdentifierExpressionContext extends SingleExpressionContext {
  constructor(parser, ctx) {
    super(parser);
    super.copyFrom(ctx);
  }
  identifier() {
    return this.getTypedRuleContext(IdentifierContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterIdentifierExpression(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitIdentifierExpression(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitIdentifierExpression(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
JavaScriptParser.IdentifierExpressionContext = IdentifierExpressionContext;
class BitAndExpressionContext extends SingleExpressionContext {
  constructor(parser, ctx) {
    super(parser);
    super.copyFrom(ctx);
  }
  singleExpression = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(SingleExpressionContext);
    } else {
      return this.getTypedRuleContext(SingleExpressionContext, i);
    }
  };
  BitAnd() {
    return this.getToken(JavaScriptParser.BitAnd, 0);
  }
  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterBitAndExpression(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitBitAndExpression(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitBitAndExpression(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
JavaScriptParser.BitAndExpressionContext = BitAndExpressionContext;
class BitOrExpressionContext extends SingleExpressionContext {
  constructor(parser, ctx) {
    super(parser);
    super.copyFrom(ctx);
  }
  singleExpression = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(SingleExpressionContext);
    } else {
      return this.getTypedRuleContext(SingleExpressionContext, i);
    }
  };
  BitOr() {
    return this.getToken(JavaScriptParser.BitOr, 0);
  }
  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterBitOrExpression(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitBitOrExpression(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitBitOrExpression(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
JavaScriptParser.BitOrExpressionContext = BitOrExpressionContext;
class AssignmentOperatorExpressionContext extends SingleExpressionContext {
  constructor(parser, ctx) {
    super(parser);
    super.copyFrom(ctx);
  }
  singleExpression = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(SingleExpressionContext);
    } else {
      return this.getTypedRuleContext(SingleExpressionContext, i);
    }
  };
  assignmentOperator() {
    return this.getTypedRuleContext(AssignmentOperatorContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterAssignmentOperatorExpression(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitAssignmentOperatorExpression(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitAssignmentOperatorExpression(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
JavaScriptParser.AssignmentOperatorExpressionContext = AssignmentOperatorExpressionContext;
class VoidExpressionContext extends SingleExpressionContext {
  constructor(parser, ctx) {
    super(parser);
    super.copyFrom(ctx);
  }
  Void() {
    return this.getToken(JavaScriptParser.Void, 0);
  }
  singleExpression() {
    return this.getTypedRuleContext(SingleExpressionContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterVoidExpression(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitVoidExpression(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitVoidExpression(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
JavaScriptParser.VoidExpressionContext = VoidExpressionContext;
class CoalesceExpressionContext extends SingleExpressionContext {
  constructor(parser, ctx) {
    super(parser);
    super.copyFrom(ctx);
  }
  singleExpression = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(SingleExpressionContext);
    } else {
      return this.getTypedRuleContext(SingleExpressionContext, i);
    }
  };
  NullCoalesce() {
    return this.getToken(JavaScriptParser.NullCoalesce, 0);
  }
  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterCoalesceExpression(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitCoalesceExpression(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitCoalesceExpression(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
JavaScriptParser.CoalesceExpressionContext = CoalesceExpressionContext;
class AssignableContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaScriptParser.RULE_assignable;
  }
  identifier() {
    return this.getTypedRuleContext(IdentifierContext, 0);
  }
  arrayLiteral() {
    return this.getTypedRuleContext(ArrayLiteralContext, 0);
  }
  objectLiteral() {
    return this.getTypedRuleContext(ObjectLiteralContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterAssignable(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitAssignable(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitAssignable(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class ObjectLiteralContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaScriptParser.RULE_objectLiteral;
  }
  OpenBrace() {
    return this.getToken(JavaScriptParser.OpenBrace, 0);
  }
  CloseBrace() {
    return this.getToken(JavaScriptParser.CloseBrace, 0);
  }
  propertyAssignment = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(PropertyAssignmentContext);
    } else {
      return this.getTypedRuleContext(PropertyAssignmentContext, i);
    }
  };
  Comma = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTokens(JavaScriptParser.Comma);
    } else {
      return this.getToken(JavaScriptParser.Comma, i);
    }
  };
  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterObjectLiteral(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitObjectLiteral(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitObjectLiteral(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class AnonymousFunctionContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaScriptParser.RULE_anonymousFunction;
  }
  copyFrom(ctx) {
    super.copyFrom(ctx);
  }
}
class AnonymousFunctionDeclContext extends AnonymousFunctionContext {
  constructor(parser, ctx) {
    super(parser);
    super.copyFrom(ctx);
  }
  FunctionObject() {
    return this.getToken(JavaScriptParser.FunctionObject, 0);
  }
  OpenParen() {
    return this.getToken(JavaScriptParser.OpenParen, 0);
  }
  CloseParen() {
    return this.getToken(JavaScriptParser.CloseParen, 0);
  }
  functionBody() {
    return this.getTypedRuleContext(FunctionBodyContext, 0);
  }
  Async() {
    return this.getToken(JavaScriptParser.Async, 0);
  }
  Multiply() {
    return this.getToken(JavaScriptParser.Multiply, 0);
  }
  formalParameterList() {
    return this.getTypedRuleContext(FormalParameterListContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterAnonymousFunctionDecl(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitAnonymousFunctionDecl(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitAnonymousFunctionDecl(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
JavaScriptParser.AnonymousFunctionDeclContext = AnonymousFunctionDeclContext;
class ArrowFunctionContext extends AnonymousFunctionContext {
  constructor(parser, ctx) {
    super(parser);
    super.copyFrom(ctx);
  }
  arrowFunctionParameters() {
    return this.getTypedRuleContext(ArrowFunctionParametersContext, 0);
  }
  ARROW() {
    return this.getToken(JavaScriptParser.ARROW, 0);
  }
  arrowFunctionBody() {
    return this.getTypedRuleContext(ArrowFunctionBodyContext, 0);
  }
  Async() {
    return this.getToken(JavaScriptParser.Async, 0);
  }
  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterArrowFunction(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitArrowFunction(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitArrowFunction(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
JavaScriptParser.ArrowFunctionContext = ArrowFunctionContext;
class FunctionDeclContext extends AnonymousFunctionContext {
  constructor(parser, ctx) {
    super(parser);
    super.copyFrom(ctx);
  }
  functionDeclaration() {
    return this.getTypedRuleContext(FunctionDeclarationContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterFunctionDecl(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitFunctionDecl(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitFunctionDecl(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
JavaScriptParser.FunctionDeclContext = FunctionDeclContext;
class ArrowFunctionParametersContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaScriptParser.RULE_arrowFunctionParameters;
  }
  identifier() {
    return this.getTypedRuleContext(IdentifierContext, 0);
  }
  OpenParen() {
    return this.getToken(JavaScriptParser.OpenParen, 0);
  }
  CloseParen() {
    return this.getToken(JavaScriptParser.CloseParen, 0);
  }
  formalParameterList() {
    return this.getTypedRuleContext(FormalParameterListContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterArrowFunctionParameters(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitArrowFunctionParameters(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitArrowFunctionParameters(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class ArrowFunctionBodyContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaScriptParser.RULE_arrowFunctionBody;
  }
  singleExpression() {
    return this.getTypedRuleContext(SingleExpressionContext, 0);
  }
  functionBody() {
    return this.getTypedRuleContext(FunctionBodyContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterArrowFunctionBody(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitArrowFunctionBody(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitArrowFunctionBody(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class AssignmentOperatorContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaScriptParser.RULE_assignmentOperator;
  }
  MultiplyAssign() {
    return this.getToken(JavaScriptParser.MultiplyAssign, 0);
  }
  DivideAssign() {
    return this.getToken(JavaScriptParser.DivideAssign, 0);
  }
  ModulusAssign() {
    return this.getToken(JavaScriptParser.ModulusAssign, 0);
  }
  PlusAssign() {
    return this.getToken(JavaScriptParser.PlusAssign, 0);
  }
  MinusAssign() {
    return this.getToken(JavaScriptParser.MinusAssign, 0);
  }
  LeftShiftArithmeticAssign() {
    return this.getToken(JavaScriptParser.LeftShiftArithmeticAssign, 0);
  }
  RightShiftArithmeticAssign() {
    return this.getToken(JavaScriptParser.RightShiftArithmeticAssign, 0);
  }
  RightShiftLogicalAssign() {
    return this.getToken(JavaScriptParser.RightShiftLogicalAssign, 0);
  }
  BitAndAssign() {
    return this.getToken(JavaScriptParser.BitAndAssign, 0);
  }
  BitXorAssign() {
    return this.getToken(JavaScriptParser.BitXorAssign, 0);
  }
  BitOrAssign() {
    return this.getToken(JavaScriptParser.BitOrAssign, 0);
  }
  PowerAssign() {
    return this.getToken(JavaScriptParser.PowerAssign, 0);
  }
  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterAssignmentOperator(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitAssignmentOperator(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitAssignmentOperator(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class LiteralContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaScriptParser.RULE_literal;
  }
  NullLiteral() {
    return this.getToken(JavaScriptParser.NullLiteral, 0);
  }
  BooleanLiteral() {
    return this.getToken(JavaScriptParser.BooleanLiteral, 0);
  }
  StringLiteral() {
    return this.getToken(JavaScriptParser.StringLiteral, 0);
  }
  templateStringLiteral() {
    return this.getTypedRuleContext(TemplateStringLiteralContext, 0);
  }
  numericLiteral() {
    return this.getTypedRuleContext(NumericLiteralContext, 0);
  }
  bigintLiteral() {
    return this.getTypedRuleContext(BigintLiteralContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterLiteral(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitLiteral(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitLiteral(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class TemplateStringLiteralContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaScriptParser.RULE_templateStringLiteral;
  }
  BackTick = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTokens(JavaScriptParser.BackTick);
    } else {
      return this.getToken(JavaScriptParser.BackTick, i);
    }
  };
  templateStringAtom = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(TemplateStringAtomContext);
    } else {
      return this.getTypedRuleContext(TemplateStringAtomContext, i);
    }
  };
  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterTemplateStringLiteral(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitTemplateStringLiteral(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitTemplateStringLiteral(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class TemplateStringAtomContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaScriptParser.RULE_templateStringAtom;
  }
  TemplateStringAtom() {
    return this.getToken(JavaScriptParser.TemplateStringAtom, 0);
  }
  TemplateStringStartExpression() {
    return this.getToken(JavaScriptParser.TemplateStringStartExpression, 0);
  }
  singleExpression() {
    return this.getTypedRuleContext(SingleExpressionContext, 0);
  }
  TemplateCloseBrace() {
    return this.getToken(JavaScriptParser.TemplateCloseBrace, 0);
  }
  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterTemplateStringAtom(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitTemplateStringAtom(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitTemplateStringAtom(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class NumericLiteralContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaScriptParser.RULE_numericLiteral;
  }
  DecimalLiteral() {
    return this.getToken(JavaScriptParser.DecimalLiteral, 0);
  }
  HexIntegerLiteral() {
    return this.getToken(JavaScriptParser.HexIntegerLiteral, 0);
  }
  OctalIntegerLiteral() {
    return this.getToken(JavaScriptParser.OctalIntegerLiteral, 0);
  }
  OctalIntegerLiteral2() {
    return this.getToken(JavaScriptParser.OctalIntegerLiteral2, 0);
  }
  BinaryIntegerLiteral() {
    return this.getToken(JavaScriptParser.BinaryIntegerLiteral, 0);
  }
  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterNumericLiteral(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitNumericLiteral(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitNumericLiteral(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class BigintLiteralContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaScriptParser.RULE_bigintLiteral;
  }
  BigDecimalIntegerLiteral() {
    return this.getToken(JavaScriptParser.BigDecimalIntegerLiteral, 0);
  }
  BigHexIntegerLiteral() {
    return this.getToken(JavaScriptParser.BigHexIntegerLiteral, 0);
  }
  BigOctalIntegerLiteral() {
    return this.getToken(JavaScriptParser.BigOctalIntegerLiteral, 0);
  }
  BigBinaryIntegerLiteral() {
    return this.getToken(JavaScriptParser.BigBinaryIntegerLiteral, 0);
  }
  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterBigintLiteral(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitBigintLiteral(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitBigintLiteral(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class GetterContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaScriptParser.RULE_getter;
  }
  identifier() {
    return this.getTypedRuleContext(IdentifierContext, 0);
  }
  propertyName() {
    return this.getTypedRuleContext(PropertyNameContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterGetter(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitGetter(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitGetter(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class SetterContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaScriptParser.RULE_setter;
  }
  identifier() {
    return this.getTypedRuleContext(IdentifierContext, 0);
  }
  propertyName() {
    return this.getTypedRuleContext(PropertyNameContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterSetter(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitSetter(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitSetter(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class IdentifierNameContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaScriptParser.RULE_identifierName;
  }
  identifier() {
    return this.getTypedRuleContext(IdentifierContext, 0);
  }
  reservedWord() {
    return this.getTypedRuleContext(ReservedWordContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterIdentifierName(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitIdentifierName(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitIdentifierName(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class IdentifierContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaScriptParser.RULE_identifier;
  }
  Identifier() {
    return this.getToken(JavaScriptParser.Identifier, 0);
  }
  NonStrictLet() {
    return this.getToken(JavaScriptParser.NonStrictLet, 0);
  }
  Async() {
    return this.getToken(JavaScriptParser.Async, 0);
  }
  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterIdentifier(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitIdentifier(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitIdentifier(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class ReservedWordContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaScriptParser.RULE_reservedWord;
  }
  keyword() {
    return this.getTypedRuleContext(KeywordContext, 0);
  }
  NullLiteral() {
    return this.getToken(JavaScriptParser.NullLiteral, 0);
  }
  BooleanLiteral() {
    return this.getToken(JavaScriptParser.BooleanLiteral, 0);
  }
  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterReservedWord(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitReservedWord(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitReservedWord(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class KeywordContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaScriptParser.RULE_keyword;
  }
  Break() {
    return this.getToken(JavaScriptParser.Break, 0);
  }
  Do() {
    return this.getToken(JavaScriptParser.Do, 0);
  }
  Instanceof() {
    return this.getToken(JavaScriptParser.Instanceof, 0);
  }
  Typeof() {
    return this.getToken(JavaScriptParser.Typeof, 0);
  }
  Case() {
    return this.getToken(JavaScriptParser.Case, 0);
  }
  Else() {
    return this.getToken(JavaScriptParser.Else, 0);
  }
  New() {
    return this.getToken(JavaScriptParser.New, 0);
  }
  Var() {
    return this.getToken(JavaScriptParser.Var, 0);
  }
  Catch() {
    return this.getToken(JavaScriptParser.Catch, 0);
  }
  Finally() {
    return this.getToken(JavaScriptParser.Finally, 0);
  }
  Return() {
    return this.getToken(JavaScriptParser.Return, 0);
  }
  Void() {
    return this.getToken(JavaScriptParser.Void, 0);
  }
  Continue() {
    return this.getToken(JavaScriptParser.Continue, 0);
  }
  For() {
    return this.getToken(JavaScriptParser.For, 0);
  }
  Switch() {
    return this.getToken(JavaScriptParser.Switch, 0);
  }
  While() {
    return this.getToken(JavaScriptParser.While, 0);
  }
  Debugger() {
    return this.getToken(JavaScriptParser.Debugger, 0);
  }
  FunctionObject() {
    return this.getToken(JavaScriptParser.FunctionObject, 0);
  }
  This() {
    return this.getToken(JavaScriptParser.This, 0);
  }
  With() {
    return this.getToken(JavaScriptParser.With, 0);
  }
  Default() {
    return this.getToken(JavaScriptParser.Default, 0);
  }
  If() {
    return this.getToken(JavaScriptParser.If, 0);
  }
  Throw() {
    return this.getToken(JavaScriptParser.Throw, 0);
  }
  Delete() {
    return this.getToken(JavaScriptParser.Delete, 0);
  }
  In() {
    return this.getToken(JavaScriptParser.In, 0);
  }
  Try() {
    return this.getToken(JavaScriptParser.Try, 0);
  }
  Class() {
    return this.getToken(JavaScriptParser.Class, 0);
  }
  Enum() {
    return this.getToken(JavaScriptParser.Enum, 0);
  }
  Extends() {
    return this.getToken(JavaScriptParser.Extends, 0);
  }
  Super() {
    return this.getToken(JavaScriptParser.Super, 0);
  }
  Const() {
    return this.getToken(JavaScriptParser.Const, 0);
  }
  Export() {
    return this.getToken(JavaScriptParser.Export, 0);
  }
  Import() {
    return this.getToken(JavaScriptParser.Import, 0);
  }
  Implements() {
    return this.getToken(JavaScriptParser.Implements, 0);
  }
  let_() {
    return this.getTypedRuleContext(Let_Context, 0);
  }
  Private() {
    return this.getToken(JavaScriptParser.Private, 0);
  }
  Public() {
    return this.getToken(JavaScriptParser.Public, 0);
  }
  Interface() {
    return this.getToken(JavaScriptParser.Interface, 0);
  }
  Package() {
    return this.getToken(JavaScriptParser.Package, 0);
  }
  Protected() {
    return this.getToken(JavaScriptParser.Protected, 0);
  }
  Static() {
    return this.getToken(JavaScriptParser.Static, 0);
  }
  Yield() {
    return this.getToken(JavaScriptParser.Yield, 0);
  }
  Async() {
    return this.getToken(JavaScriptParser.Async, 0);
  }
  Await() {
    return this.getToken(JavaScriptParser.Await, 0);
  }
  From() {
    return this.getToken(JavaScriptParser.From, 0);
  }
  As() {
    return this.getToken(JavaScriptParser.As, 0);
  }
  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterKeyword(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitKeyword(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitKeyword(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class Let_Context extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaScriptParser.RULE_let_;
  }
  NonStrictLet() {
    return this.getToken(JavaScriptParser.NonStrictLet, 0);
  }
  StrictLet() {
    return this.getToken(JavaScriptParser.StrictLet, 0);
  }
  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterLet_(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitLet_(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitLet_(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class EosContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaScriptParser.RULE_eos;
  }
  SemiColon() {
    return this.getToken(JavaScriptParser.SemiColon, 0);
  }
  EOF() {
    return this.getToken(JavaScriptParser.EOF, 0);
  }
  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterEos(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitEos(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitEos(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
JavaScriptParser.ProgramContext = ProgramContext;
JavaScriptParser.SourceElementContext = SourceElementContext;
JavaScriptParser.StatementContext = StatementContext;
JavaScriptParser.BlockContext = BlockContext;
JavaScriptParser.StatementListContext = StatementListContext;
JavaScriptParser.ImportStatementContext = ImportStatementContext;
JavaScriptParser.ImportFromBlockContext = ImportFromBlockContext;
JavaScriptParser.ModuleItemsContext = ModuleItemsContext;
JavaScriptParser.ImportDefaultContext = ImportDefaultContext;
JavaScriptParser.ImportNamespaceContext = ImportNamespaceContext;
JavaScriptParser.ImportFromContext = ImportFromContext;
JavaScriptParser.AliasNameContext = AliasNameContext;
JavaScriptParser.ExportStatementContext = ExportStatementContext;
JavaScriptParser.ExportFromBlockContext = ExportFromBlockContext;
JavaScriptParser.DeclarationContext = DeclarationContext;
JavaScriptParser.VariableStatementContext = VariableStatementContext;
JavaScriptParser.VariableDeclarationListContext = VariableDeclarationListContext;
JavaScriptParser.VariableDeclarationContext = VariableDeclarationContext;
JavaScriptParser.EmptyStatement_Context = EmptyStatement_Context;
JavaScriptParser.ExpressionStatementContext = ExpressionStatementContext;
JavaScriptParser.IfStatementContext = IfStatementContext;
JavaScriptParser.IterationStatementContext = IterationStatementContext;
JavaScriptParser.VarModifierContext = VarModifierContext;
JavaScriptParser.ContinueStatementContext = ContinueStatementContext;
JavaScriptParser.BreakStatementContext = BreakStatementContext;
JavaScriptParser.ReturnStatementContext = ReturnStatementContext;
JavaScriptParser.YieldStatementContext = YieldStatementContext;
JavaScriptParser.WithStatementContext = WithStatementContext;
JavaScriptParser.SwitchStatementContext = SwitchStatementContext;
JavaScriptParser.CaseBlockContext = CaseBlockContext;
JavaScriptParser.CaseClausesContext = CaseClausesContext;
JavaScriptParser.CaseClauseContext = CaseClauseContext;
JavaScriptParser.DefaultClauseContext = DefaultClauseContext;
JavaScriptParser.LabelledStatementContext = LabelledStatementContext;
JavaScriptParser.ThrowStatementContext = ThrowStatementContext;
JavaScriptParser.TryStatementContext = TryStatementContext;
JavaScriptParser.CatchProductionContext = CatchProductionContext;
JavaScriptParser.FinallyProductionContext = FinallyProductionContext;
JavaScriptParser.DebuggerStatementContext = DebuggerStatementContext;
JavaScriptParser.FunctionDeclarationContext = FunctionDeclarationContext;
JavaScriptParser.ClassDeclarationContext = ClassDeclarationContext;
JavaScriptParser.ClassTailContext = ClassTailContext;
JavaScriptParser.ClassElementContext = ClassElementContext;
JavaScriptParser.MethodDefinitionContext = MethodDefinitionContext;
JavaScriptParser.FormalParameterListContext = FormalParameterListContext;
JavaScriptParser.FormalParameterArgContext = FormalParameterArgContext;
JavaScriptParser.LastFormalParameterArgContext = LastFormalParameterArgContext;
JavaScriptParser.FunctionBodyContext = FunctionBodyContext;
JavaScriptParser.SourceElementsContext = SourceElementsContext;
JavaScriptParser.ArrayLiteralContext = ArrayLiteralContext;
JavaScriptParser.ElementListContext = ElementListContext;
JavaScriptParser.ArrayElementContext = ArrayElementContext;
JavaScriptParser.PropertyAssignmentContext = PropertyAssignmentContext;
JavaScriptParser.PropertyNameContext = PropertyNameContext;
JavaScriptParser.ArgumentsContext = ArgumentsContext;
JavaScriptParser.ArgumentContext = ArgumentContext;
JavaScriptParser.ExpressionSequenceContext = ExpressionSequenceContext;
JavaScriptParser.SingleExpressionContext = SingleExpressionContext;
JavaScriptParser.AssignableContext = AssignableContext;
JavaScriptParser.ObjectLiteralContext = ObjectLiteralContext;
JavaScriptParser.AnonymousFunctionContext = AnonymousFunctionContext;
JavaScriptParser.ArrowFunctionParametersContext = ArrowFunctionParametersContext;
JavaScriptParser.ArrowFunctionBodyContext = ArrowFunctionBodyContext;
JavaScriptParser.AssignmentOperatorContext = AssignmentOperatorContext;
JavaScriptParser.LiteralContext = LiteralContext;
JavaScriptParser.TemplateStringLiteralContext = TemplateStringLiteralContext;
JavaScriptParser.TemplateStringAtomContext = TemplateStringAtomContext;
JavaScriptParser.NumericLiteralContext = NumericLiteralContext;
JavaScriptParser.BigintLiteralContext = BigintLiteralContext;
JavaScriptParser.GetterContext = GetterContext;
JavaScriptParser.SetterContext = SetterContext;
JavaScriptParser.IdentifierNameContext = IdentifierNameContext;
JavaScriptParser.IdentifierContext = IdentifierContext;
JavaScriptParser.ReservedWordContext = ReservedWordContext;
JavaScriptParser.KeywordContext = KeywordContext;
JavaScriptParser.Let_Context = Let_Context;
JavaScriptParser.EosContext = EosContext;